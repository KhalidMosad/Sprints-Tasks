
SPRINTS_usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a5a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000a5a  00000ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c54  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000849  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <main>
  7a:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidSetPinDirection>:
#include"BIT_MATH.h"
#include"DIO_register.h"
#include"DIO_interface.h"

void DIO_voidSetPinDirection		(ST_DIO_config_t * configurations)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <DIO_voidSetPinDirection+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <DIO_voidSetPinDirection+0x8>
  8a:	00 d0       	rcall	.+0      	; 0x8c <DIO_voidSetPinDirection+0xa>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	9a 83       	std	Y+2, r25	; 0x02
  92:	89 83       	std	Y+1, r24	; 0x01
	if(OUTPUT==configurations->state)
  94:	e9 81       	ldd	r30, Y+1	; 0x01
  96:	fa 81       	ldd	r31, Y+2	; 0x02
  98:	82 81       	ldd	r24, Z+2	; 0x02
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_voidSetPinDirection+0x1e>
  9e:	7a c0       	rjmp	.+244    	; 0x194 <DIO_voidSetPinDirection+0x112>
	{
		switch (configurations->port_no)
  a0:	e9 81       	ldd	r30, Y+1	; 0x01
  a2:	fa 81       	ldd	r31, Y+2	; 0x02
  a4:	80 81       	ld	r24, Z
  a6:	28 2f       	mov	r18, r24
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	3e 83       	std	Y+6, r19	; 0x06
  ac:	2d 83       	std	Y+5, r18	; 0x05
  ae:	8d 81       	ldd	r24, Y+5	; 0x05
  b0:	9e 81       	ldd	r25, Y+6	; 0x06
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	91 05       	cpc	r25, r1
  b6:	61 f1       	breq	.+88     	; 0x110 <DIO_voidSetPinDirection+0x8e>
  b8:	2d 81       	ldd	r18, Y+5	; 0x05
  ba:	3e 81       	ldd	r19, Y+6	; 0x06
  bc:	22 30       	cpi	r18, 0x02	; 2
  be:	31 05       	cpc	r19, r1
  c0:	2c f4       	brge	.+10     	; 0xcc <DIO_voidSetPinDirection+0x4a>
  c2:	8d 81       	ldd	r24, Y+5	; 0x05
  c4:	9e 81       	ldd	r25, Y+6	; 0x06
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	69 f0       	breq	.+26     	; 0xe4 <DIO_voidSetPinDirection+0x62>
  ca:	e7 c0       	rjmp	.+462    	; 0x29a <DIO_voidSetPinDirection+0x218>
  cc:	2d 81       	ldd	r18, Y+5	; 0x05
  ce:	3e 81       	ldd	r19, Y+6	; 0x06
  d0:	22 30       	cpi	r18, 0x02	; 2
  d2:	31 05       	cpc	r19, r1
  d4:	99 f1       	breq	.+102    	; 0x13c <DIO_voidSetPinDirection+0xba>
  d6:	8d 81       	ldd	r24, Y+5	; 0x05
  d8:	9e 81       	ldd	r25, Y+6	; 0x06
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	91 05       	cpc	r25, r1
  de:	09 f4       	brne	.+2      	; 0xe2 <DIO_voidSetPinDirection+0x60>
  e0:	43 c0       	rjmp	.+134    	; 0x168 <DIO_voidSetPinDirection+0xe6>
  e2:	db c0       	rjmp	.+438    	; 0x29a <DIO_voidSetPinDirection+0x218>
		{
			case PORTA:SET_BIT(DDRA, configurations->pin_no); break;
  e4:	aa e3       	ldi	r26, 0x3A	; 58
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ea e3       	ldi	r30, 0x3A	; 58
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	48 2f       	mov	r20, r24
  f0:	e9 81       	ldd	r30, Y+1	; 0x01
  f2:	fa 81       	ldd	r31, Y+2	; 0x02
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_voidSetPinDirection+0x84>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_voidSetPinDirection+0x80>
 10a:	84 2b       	or	r24, r20
 10c:	8c 93       	st	X, r24
 10e:	c5 c0       	rjmp	.+394    	; 0x29a <DIO_voidSetPinDirection+0x218>
			case PORTB:SET_BIT(DDRB,  configurations->pin_no); break;
 110:	a7 e3       	ldi	r26, 0x37	; 55
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e7 e3       	ldi	r30, 0x37	; 55
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	48 2f       	mov	r20, r24
 11c:	e9 81       	ldd	r30, Y+1	; 0x01
 11e:	fa 81       	ldd	r31, Y+2	; 0x02
 120:	81 81       	ldd	r24, Z+1	; 0x01
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 2e       	mov	r0, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_voidSetPinDirection+0xb0>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_voidSetPinDirection+0xac>
 136:	84 2b       	or	r24, r20
 138:	8c 93       	st	X, r24
 13a:	af c0       	rjmp	.+350    	; 0x29a <DIO_voidSetPinDirection+0x218>
			case PORTC:SET_BIT(DDRC,  configurations->pin_no); break;
 13c:	a4 e3       	ldi	r26, 0x34	; 52
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e4 e3       	ldi	r30, 0x34	; 52
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	e9 81       	ldd	r30, Y+1	; 0x01
 14a:	fa 81       	ldd	r31, Y+2	; 0x02
 14c:	81 81       	ldd	r24, Z+1	; 0x01
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_voidSetPinDirection+0xdc>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_voidSetPinDirection+0xd8>
 162:	84 2b       	or	r24, r20
 164:	8c 93       	st	X, r24
 166:	99 c0       	rjmp	.+306    	; 0x29a <DIO_voidSetPinDirection+0x218>
			case PORTD:SET_BIT(DDRD,  configurations->pin_no); break;
 168:	a1 e3       	ldi	r26, 0x31	; 49
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	e1 e3       	ldi	r30, 0x31	; 49
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	e9 81       	ldd	r30, Y+1	; 0x01
 176:	fa 81       	ldd	r31, Y+2	; 0x02
 178:	81 81       	ldd	r24, Z+1	; 0x01
 17a:	28 2f       	mov	r18, r24
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 2e       	mov	r0, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_voidSetPinDirection+0x108>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_voidSetPinDirection+0x104>
 18e:	84 2b       	or	r24, r20
 190:	8c 93       	st	X, r24
 192:	83 c0       	rjmp	.+262    	; 0x29a <DIO_voidSetPinDirection+0x218>
	
		}	
	}
	else if(INPUT==configurations->state)
 194:	e9 81       	ldd	r30, Y+1	; 0x01
 196:	fa 81       	ldd	r31, Y+2	; 0x02
 198:	82 81       	ldd	r24, Z+2	; 0x02
 19a:	88 23       	and	r24, r24
 19c:	09 f0       	breq	.+2      	; 0x1a0 <DIO_voidSetPinDirection+0x11e>
 19e:	7d c0       	rjmp	.+250    	; 0x29a <DIO_voidSetPinDirection+0x218>
	{
		switch(configurations->port_no)
 1a0:	e9 81       	ldd	r30, Y+1	; 0x01
 1a2:	fa 81       	ldd	r31, Y+2	; 0x02
 1a4:	80 81       	ld	r24, Z
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	3c 83       	std	Y+4, r19	; 0x04
 1ac:	2b 83       	std	Y+3, r18	; 0x03
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	9c 81       	ldd	r25, Y+4	; 0x04
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	91 05       	cpc	r25, r1
 1b6:	69 f1       	breq	.+90     	; 0x212 <DIO_voidSetPinDirection+0x190>
 1b8:	2b 81       	ldd	r18, Y+3	; 0x03
 1ba:	3c 81       	ldd	r19, Y+4	; 0x04
 1bc:	22 30       	cpi	r18, 0x02	; 2
 1be:	31 05       	cpc	r19, r1
 1c0:	2c f4       	brge	.+10     	; 0x1cc <DIO_voidSetPinDirection+0x14a>
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	9c 81       	ldd	r25, Y+4	; 0x04
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	69 f0       	breq	.+26     	; 0x1e4 <DIO_voidSetPinDirection+0x162>
 1ca:	67 c0       	rjmp	.+206    	; 0x29a <DIO_voidSetPinDirection+0x218>
 1cc:	2b 81       	ldd	r18, Y+3	; 0x03
 1ce:	3c 81       	ldd	r19, Y+4	; 0x04
 1d0:	22 30       	cpi	r18, 0x02	; 2
 1d2:	31 05       	cpc	r19, r1
 1d4:	a9 f1       	breq	.+106    	; 0x240 <DIO_voidSetPinDirection+0x1be>
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	9c 81       	ldd	r25, Y+4	; 0x04
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	91 05       	cpc	r25, r1
 1de:	09 f4       	brne	.+2      	; 0x1e2 <DIO_voidSetPinDirection+0x160>
 1e0:	46 c0       	rjmp	.+140    	; 0x26e <DIO_voidSetPinDirection+0x1ec>
 1e2:	5b c0       	rjmp	.+182    	; 0x29a <DIO_voidSetPinDirection+0x218>
		{
			case PORTA:CLR_BIT(DDRA,  configurations->pin_no); break;
 1e4:	aa e3       	ldi	r26, 0x3A	; 58
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	ea e3       	ldi	r30, 0x3A	; 58
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	48 2f       	mov	r20, r24
 1f0:	e9 81       	ldd	r30, Y+1	; 0x01
 1f2:	fa 81       	ldd	r31, Y+2	; 0x02
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 2e       	mov	r0, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinDirection+0x184>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinDirection+0x180>
 20a:	80 95       	com	r24
 20c:	84 23       	and	r24, r20
 20e:	8c 93       	st	X, r24
 210:	44 c0       	rjmp	.+136    	; 0x29a <DIO_voidSetPinDirection+0x218>
			case PORTB:CLR_BIT(DDRB,  configurations->pin_no); break;
 212:	a7 e3       	ldi	r26, 0x37	; 55
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e7 e3       	ldi	r30, 0x37	; 55
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	e9 81       	ldd	r30, Y+1	; 0x01
 220:	fa 81       	ldd	r31, Y+2	; 0x02
 222:	81 81       	ldd	r24, Z+1	; 0x01
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 2e       	mov	r0, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_voidSetPinDirection+0x1b2>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_voidSetPinDirection+0x1ae>
 238:	80 95       	com	r24
 23a:	84 23       	and	r24, r20
 23c:	8c 93       	st	X, r24
 23e:	2d c0       	rjmp	.+90     	; 0x29a <DIO_voidSetPinDirection+0x218>
		    case PORTC:CLR_BIT(DDRC,  configurations->pin_no); break;
 240:	a4 e3       	ldi	r26, 0x34	; 52
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	e4 e3       	ldi	r30, 0x34	; 52
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	48 2f       	mov	r20, r24
 24c:	e9 81       	ldd	r30, Y+1	; 0x01
 24e:	fa 81       	ldd	r31, Y+2	; 0x02
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_voidSetPinDirection+0x1e0>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_voidSetPinDirection+0x1dc>
 266:	80 95       	com	r24
 268:	84 23       	and	r24, r20
 26a:	8c 93       	st	X, r24
 26c:	16 c0       	rjmp	.+44     	; 0x29a <DIO_voidSetPinDirection+0x218>
		    case PORTD:CLR_BIT(DDRD,  configurations->pin_no); break;
 26e:	a1 e3       	ldi	r26, 0x31	; 49
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	e1 e3       	ldi	r30, 0x31	; 49
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	48 2f       	mov	r20, r24
 27a:	e9 81       	ldd	r30, Y+1	; 0x01
 27c:	fa 81       	ldd	r31, Y+2	; 0x02
 27e:	81 81       	ldd	r24, Z+1	; 0x01
 280:	28 2f       	mov	r18, r24
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 2e       	mov	r0, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_voidSetPinDirection+0x20e>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_voidSetPinDirection+0x20a>
 294:	80 95       	com	r24
 296:	84 23       	and	r24, r20
 298:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
 29a:	26 96       	adiw	r28, 0x06	; 6
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	cf 91       	pop	r28
 2a8:	df 91       	pop	r29
 2aa:	08 95       	ret

000002ac <DIO_voidSetPinValue>:
void DIO_voidSetPinValue			(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8value)
{
 2ac:	df 93       	push	r29
 2ae:	cf 93       	push	r28
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	27 97       	sbiw	r28, 0x07	; 7
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	89 83       	std	Y+1, r24	; 0x01
 2c2:	6a 83       	std	Y+2, r22	; 0x02
 2c4:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_u8value)
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	09 f0       	breq	.+2      	; 0x2ce <DIO_voidSetPinValue+0x22>
 2cc:	6f c0       	rjmp	.+222    	; 0x3ac <DIO_voidSetPinValue+0x100>
	{
		switch (copy_u8port)
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	28 2f       	mov	r18, r24
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	3f 83       	std	Y+7, r19	; 0x07
 2d6:	2e 83       	std	Y+6, r18	; 0x06
 2d8:	8e 81       	ldd	r24, Y+6	; 0x06
 2da:	9f 81       	ldd	r25, Y+7	; 0x07
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	91 05       	cpc	r25, r1
 2e0:	49 f1       	breq	.+82     	; 0x334 <DIO_voidSetPinValue+0x88>
 2e2:	2e 81       	ldd	r18, Y+6	; 0x06
 2e4:	3f 81       	ldd	r19, Y+7	; 0x07
 2e6:	22 30       	cpi	r18, 0x02	; 2
 2e8:	31 05       	cpc	r19, r1
 2ea:	2c f4       	brge	.+10     	; 0x2f6 <DIO_voidSetPinValue+0x4a>
 2ec:	8e 81       	ldd	r24, Y+6	; 0x06
 2ee:	9f 81       	ldd	r25, Y+7	; 0x07
 2f0:	00 97       	sbiw	r24, 0x00	; 0
 2f2:	61 f0       	breq	.+24     	; 0x30c <DIO_voidSetPinValue+0x60>
 2f4:	d2 c0       	rjmp	.+420    	; 0x49a <DIO_voidSetPinValue+0x1ee>
 2f6:	2e 81       	ldd	r18, Y+6	; 0x06
 2f8:	3f 81       	ldd	r19, Y+7	; 0x07
 2fa:	22 30       	cpi	r18, 0x02	; 2
 2fc:	31 05       	cpc	r19, r1
 2fe:	71 f1       	breq	.+92     	; 0x35c <DIO_voidSetPinValue+0xb0>
 300:	8e 81       	ldd	r24, Y+6	; 0x06
 302:	9f 81       	ldd	r25, Y+7	; 0x07
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	91 05       	cpc	r25, r1
 308:	e9 f1       	breq	.+122    	; 0x384 <DIO_voidSetPinValue+0xd8>
 30a:	c7 c0       	rjmp	.+398    	; 0x49a <DIO_voidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_u8pin); break;
 30c:	ab e3       	ldi	r26, 0x3B	; 59
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	eb e3       	ldi	r30, 0x3B	; 59
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	48 2f       	mov	r20, r24
 318:	8a 81       	ldd	r24, Y+2	; 0x02
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 2e       	mov	r0, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_voidSetPinValue+0x7e>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_voidSetPinValue+0x7a>
 32e:	84 2b       	or	r24, r20
 330:	8c 93       	st	X, r24
 332:	b3 c0       	rjmp	.+358    	; 0x49a <DIO_voidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_u8pin); break;
 334:	a8 e3       	ldi	r26, 0x38	; 56
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e8 e3       	ldi	r30, 0x38	; 56
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	48 2f       	mov	r20, r24
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 2e       	mov	r0, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_voidSetPinValue+0xa6>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_voidSetPinValue+0xa2>
 356:	84 2b       	or	r24, r20
 358:	8c 93       	st	X, r24
 35a:	9f c0       	rjmp	.+318    	; 0x49a <DIO_voidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_u8pin); break;
 35c:	a5 e3       	ldi	r26, 0x35	; 53
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e5 e3       	ldi	r30, 0x35	; 53
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	48 2f       	mov	r20, r24
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_voidSetPinValue+0xce>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_voidSetPinValue+0xca>
 37e:	84 2b       	or	r24, r20
 380:	8c 93       	st	X, r24
 382:	8b c0       	rjmp	.+278    	; 0x49a <DIO_voidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_u8pin); break;
 384:	a2 e3       	ldi	r26, 0x32	; 50
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	e2 e3       	ldi	r30, 0x32	; 50
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	48 2f       	mov	r20, r24
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 2e       	mov	r0, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_voidSetPinValue+0xf6>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_voidSetPinValue+0xf2>
 3a6:	84 2b       	or	r24, r20
 3a8:	8c 93       	st	X, r24
 3aa:	77 c0       	rjmp	.+238    	; 0x49a <DIO_voidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_u8value)
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	88 23       	and	r24, r24
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <DIO_voidSetPinValue+0x108>
 3b2:	73 c0       	rjmp	.+230    	; 0x49a <DIO_voidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	28 2f       	mov	r18, r24
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	3d 83       	std	Y+5, r19	; 0x05
 3bc:	2c 83       	std	Y+4, r18	; 0x04
 3be:	8c 81       	ldd	r24, Y+4	; 0x04
 3c0:	9d 81       	ldd	r25, Y+5	; 0x05
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	91 05       	cpc	r25, r1
 3c6:	59 f1       	breq	.+86     	; 0x41e <DIO_voidSetPinValue+0x172>
 3c8:	2c 81       	ldd	r18, Y+4	; 0x04
 3ca:	3d 81       	ldd	r19, Y+5	; 0x05
 3cc:	22 30       	cpi	r18, 0x02	; 2
 3ce:	31 05       	cpc	r19, r1
 3d0:	2c f4       	brge	.+10     	; 0x3dc <DIO_voidSetPinValue+0x130>
 3d2:	8c 81       	ldd	r24, Y+4	; 0x04
 3d4:	9d 81       	ldd	r25, Y+5	; 0x05
 3d6:	00 97       	sbiw	r24, 0x00	; 0
 3d8:	69 f0       	breq	.+26     	; 0x3f4 <DIO_voidSetPinValue+0x148>
 3da:	5f c0       	rjmp	.+190    	; 0x49a <DIO_voidSetPinValue+0x1ee>
 3dc:	2c 81       	ldd	r18, Y+4	; 0x04
 3de:	3d 81       	ldd	r19, Y+5	; 0x05
 3e0:	22 30       	cpi	r18, 0x02	; 2
 3e2:	31 05       	cpc	r19, r1
 3e4:	89 f1       	breq	.+98     	; 0x448 <DIO_voidSetPinValue+0x19c>
 3e6:	8c 81       	ldd	r24, Y+4	; 0x04
 3e8:	9d 81       	ldd	r25, Y+5	; 0x05
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	91 05       	cpc	r25, r1
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <DIO_voidSetPinValue+0x146>
 3f0:	40 c0       	rjmp	.+128    	; 0x472 <DIO_voidSetPinValue+0x1c6>
 3f2:	53 c0       	rjmp	.+166    	; 0x49a <DIO_voidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_u8pin); break;
 3f4:	ab e3       	ldi	r26, 0x3B	; 59
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	eb e3       	ldi	r30, 0x3B	; 59
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	48 2f       	mov	r20, r24
 400:	8a 81       	ldd	r24, Y+2	; 0x02
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 2e       	mov	r0, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_voidSetPinValue+0x166>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_voidSetPinValue+0x162>
 416:	80 95       	com	r24
 418:	84 23       	and	r24, r20
 41a:	8c 93       	st	X, r24
 41c:	3e c0       	rjmp	.+124    	; 0x49a <DIO_voidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_u8pin); break;
 41e:	a8 e3       	ldi	r26, 0x38	; 56
 420:	b0 e0       	ldi	r27, 0x00	; 0
 422:	e8 e3       	ldi	r30, 0x38	; 56
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	48 2f       	mov	r20, r24
 42a:	8a 81       	ldd	r24, Y+2	; 0x02
 42c:	28 2f       	mov	r18, r24
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 2e       	mov	r0, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_voidSetPinValue+0x190>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	0a 94       	dec	r0
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_voidSetPinValue+0x18c>
 440:	80 95       	com	r24
 442:	84 23       	and	r24, r20
 444:	8c 93       	st	X, r24
 446:	29 c0       	rjmp	.+82     	; 0x49a <DIO_voidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_u8pin); break;
 448:	a5 e3       	ldi	r26, 0x35	; 53
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	e5 e3       	ldi	r30, 0x35	; 53
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	48 2f       	mov	r20, r24
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 2e       	mov	r0, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_voidSetPinValue+0x1ba>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_voidSetPinValue+0x1b6>
 46a:	80 95       	com	r24
 46c:	84 23       	and	r24, r20
 46e:	8c 93       	st	X, r24
 470:	14 c0       	rjmp	.+40     	; 0x49a <DIO_voidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_u8pin); break;
 472:	a2 e3       	ldi	r26, 0x32	; 50
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	e2 e3       	ldi	r30, 0x32	; 50
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	48 2f       	mov	r20, r24
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 2e       	mov	r0, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_voidSetPinValue+0x1e4>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_voidSetPinValue+0x1e0>
 494:	80 95       	com	r24
 496:	84 23       	and	r24, r20
 498:	8c 93       	st	X, r24
		
	}	
	
	
	
}
 49a:	27 96       	adiw	r28, 0x07	; 7
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	cf 91       	pop	r28
 4a8:	df 91       	pop	r29
 4aa:	08 95       	ret

000004ac <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue			(u8 copy_u8port, u8 Copy_U8Pin)
{
 4ac:	df 93       	push	r29
 4ae:	cf 93       	push	r28
 4b0:	00 d0       	rcall	.+0      	; 0x4b2 <DIO_u8GetPinValue+0x6>
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <DIO_u8GetPinValue+0x8>
 4b4:	0f 92       	push	r0
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	8a 83       	std	Y+2, r24	; 0x02
 4bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcal_U8PinResult=0;
 4be:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
 4c0:	8a 81       	ldd	r24, Y+2	; 0x02
 4c2:	28 2f       	mov	r18, r24
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	3d 83       	std	Y+5, r19	; 0x05
 4c8:	2c 83       	std	Y+4, r18	; 0x04
 4ca:	4c 81       	ldd	r20, Y+4	; 0x04
 4cc:	5d 81       	ldd	r21, Y+5	; 0x05
 4ce:	41 30       	cpi	r20, 0x01	; 1
 4d0:	51 05       	cpc	r21, r1
 4d2:	41 f1       	breq	.+80     	; 0x524 <DIO_u8GetPinValue+0x78>
 4d4:	8c 81       	ldd	r24, Y+4	; 0x04
 4d6:	9d 81       	ldd	r25, Y+5	; 0x05
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	91 05       	cpc	r25, r1
 4dc:	34 f4       	brge	.+12     	; 0x4ea <DIO_u8GetPinValue+0x3e>
 4de:	2c 81       	ldd	r18, Y+4	; 0x04
 4e0:	3d 81       	ldd	r19, Y+5	; 0x05
 4e2:	21 15       	cp	r18, r1
 4e4:	31 05       	cpc	r19, r1
 4e6:	61 f0       	breq	.+24     	; 0x500 <DIO_u8GetPinValue+0x54>
 4e8:	52 c0       	rjmp	.+164    	; 0x58e <DIO_u8GetPinValue+0xe2>
 4ea:	4c 81       	ldd	r20, Y+4	; 0x04
 4ec:	5d 81       	ldd	r21, Y+5	; 0x05
 4ee:	42 30       	cpi	r20, 0x02	; 2
 4f0:	51 05       	cpc	r21, r1
 4f2:	51 f1       	breq	.+84     	; 0x548 <DIO_u8GetPinValue+0x9c>
 4f4:	8c 81       	ldd	r24, Y+4	; 0x04
 4f6:	9d 81       	ldd	r25, Y+5	; 0x05
 4f8:	83 30       	cpi	r24, 0x03	; 3
 4fa:	91 05       	cpc	r25, r1
 4fc:	b9 f1       	breq	.+110    	; 0x56c <DIO_u8GetPinValue+0xc0>
 4fe:	47 c0       	rjmp	.+142    	; 0x58e <DIO_u8GetPinValue+0xe2>

			case PORTA :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
 500:	e9 e3       	ldi	r30, 0x39	; 57
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	8b 81       	ldd	r24, Y+3	; 0x03
 50c:	88 2f       	mov	r24, r24
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	a9 01       	movw	r20, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_u8GetPinValue+0x6c>
 514:	55 95       	asr	r21
 516:	47 95       	ror	r20
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_u8GetPinValue+0x68>
 51c:	ca 01       	movw	r24, r20
 51e:	81 70       	andi	r24, 0x01	; 1
 520:	89 83       	std	Y+1, r24	; 0x01
 522:	35 c0       	rjmp	.+106    	; 0x58e <DIO_u8GetPinValue+0xe2>
			case PORTB :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
 524:	e6 e3       	ldi	r30, 0x36	; 54
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	28 2f       	mov	r18, r24
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	8b 81       	ldd	r24, Y+3	; 0x03
 530:	88 2f       	mov	r24, r24
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	a9 01       	movw	r20, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_u8GetPinValue+0x90>
 538:	55 95       	asr	r21
 53a:	47 95       	ror	r20
 53c:	8a 95       	dec	r24
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_u8GetPinValue+0x8c>
 540:	ca 01       	movw	r24, r20
 542:	81 70       	andi	r24, 0x01	; 1
 544:	89 83       	std	Y+1, r24	; 0x01
 546:	23 c0       	rjmp	.+70     	; 0x58e <DIO_u8GetPinValue+0xe2>
			case PORTC :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
 548:	e3 e3       	ldi	r30, 0x33	; 51
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	28 2f       	mov	r18, r24
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	8b 81       	ldd	r24, Y+3	; 0x03
 554:	88 2f       	mov	r24, r24
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	a9 01       	movw	r20, r18
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_u8GetPinValue+0xb4>
 55c:	55 95       	asr	r21
 55e:	47 95       	ror	r20
 560:	8a 95       	dec	r24
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_u8GetPinValue+0xb0>
 564:	ca 01       	movw	r24, r20
 566:	81 70       	andi	r24, 0x01	; 1
 568:	89 83       	std	Y+1, r24	; 0x01
 56a:	11 c0       	rjmp	.+34     	; 0x58e <DIO_u8GetPinValue+0xe2>
			case PORTD :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
 56c:	e0 e3       	ldi	r30, 0x30	; 48
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	8b 81       	ldd	r24, Y+3	; 0x03
 578:	88 2f       	mov	r24, r24
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	a9 01       	movw	r20, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_u8GetPinValue+0xd8>
 580:	55 95       	asr	r21
 582:	47 95       	ror	r20
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_u8GetPinValue+0xd4>
 588:	ca 01       	movw	r24, r20
 58a:	81 70       	andi	r24, 0x01	; 1
 58c:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
 58e:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	cf 91       	pop	r28
 59c:	df 91       	pop	r29
 59e:	08 95       	ret

000005a0 <DIO_voidTogglePin>:

void DIO_voidTogglePin			(u8 copy_u8port, u8 copy_U8pin)
{
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <DIO_voidTogglePin+0x6>
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <DIO_voidTogglePin+0x8>
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	89 83       	std	Y+1, r24	; 0x01
 5ae:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_u8port)
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
 5b2:	28 2f       	mov	r18, r24
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	3c 83       	std	Y+4, r19	; 0x04
 5b8:	2b 83       	std	Y+3, r18	; 0x03
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	9c 81       	ldd	r25, Y+4	; 0x04
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	91 05       	cpc	r25, r1
 5c2:	49 f1       	breq	.+82     	; 0x616 <DIO_voidTogglePin+0x76>
 5c4:	2b 81       	ldd	r18, Y+3	; 0x03
 5c6:	3c 81       	ldd	r19, Y+4	; 0x04
 5c8:	22 30       	cpi	r18, 0x02	; 2
 5ca:	31 05       	cpc	r19, r1
 5cc:	2c f4       	brge	.+10     	; 0x5d8 <DIO_voidTogglePin+0x38>
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	9c 81       	ldd	r25, Y+4	; 0x04
 5d2:	00 97       	sbiw	r24, 0x00	; 0
 5d4:	61 f0       	breq	.+24     	; 0x5ee <DIO_voidTogglePin+0x4e>
 5d6:	5a c0       	rjmp	.+180    	; 0x68c <DIO_voidTogglePin+0xec>
 5d8:	2b 81       	ldd	r18, Y+3	; 0x03
 5da:	3c 81       	ldd	r19, Y+4	; 0x04
 5dc:	22 30       	cpi	r18, 0x02	; 2
 5de:	31 05       	cpc	r19, r1
 5e0:	71 f1       	breq	.+92     	; 0x63e <DIO_voidTogglePin+0x9e>
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	9c 81       	ldd	r25, Y+4	; 0x04
 5e6:	83 30       	cpi	r24, 0x03	; 3
 5e8:	91 05       	cpc	r25, r1
 5ea:	e9 f1       	breq	.+122    	; 0x666 <DIO_voidTogglePin+0xc6>
 5ec:	4f c0       	rjmp	.+158    	; 0x68c <DIO_voidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_U8pin); break;
 5ee:	ab e3       	ldi	r26, 0x3B	; 59
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	eb e3       	ldi	r30, 0x3B	; 59
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	48 2f       	mov	r20, r24
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 2e       	mov	r0, r18
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_voidTogglePin+0x6c>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	0a 94       	dec	r0
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_voidTogglePin+0x68>
 610:	84 27       	eor	r24, r20
 612:	8c 93       	st	X, r24
 614:	3b c0       	rjmp	.+118    	; 0x68c <DIO_voidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_U8pin); break;
 616:	a8 e3       	ldi	r26, 0x38	; 56
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	e8 e3       	ldi	r30, 0x38	; 56
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	48 2f       	mov	r20, r24
 622:	8a 81       	ldd	r24, Y+2	; 0x02
 624:	28 2f       	mov	r18, r24
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 2e       	mov	r0, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_voidTogglePin+0x94>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	0a 94       	dec	r0
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_voidTogglePin+0x90>
 638:	84 27       	eor	r24, r20
 63a:	8c 93       	st	X, r24
 63c:	27 c0       	rjmp	.+78     	; 0x68c <DIO_voidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_U8pin); break;
 63e:	a5 e3       	ldi	r26, 0x35	; 53
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e5 e3       	ldi	r30, 0x35	; 53
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	48 2f       	mov	r20, r24
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	28 2f       	mov	r18, r24
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 2e       	mov	r0, r18
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_voidTogglePin+0xbc>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	0a 94       	dec	r0
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_voidTogglePin+0xb8>
 660:	84 27       	eor	r24, r20
 662:	8c 93       	st	X, r24
 664:	13 c0       	rjmp	.+38     	; 0x68c <DIO_voidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_U8pin); break;
 666:	a2 e3       	ldi	r26, 0x32	; 50
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	e2 e3       	ldi	r30, 0x32	; 50
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	48 2f       	mov	r20, r24
 672:	8a 81       	ldd	r24, Y+2	; 0x02
 674:	28 2f       	mov	r18, r24
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 2e       	mov	r0, r18
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_voidTogglePin+0xe4>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	0a 94       	dec	r0
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_voidTogglePin+0xe0>
 688:	84 27       	eor	r24, r20
 68a:	8c 93       	st	X, r24
		}

}
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	cf 91       	pop	r28
 696:	df 91       	pop	r29
 698:	08 95       	ret

0000069a <usart_Init>:




error_state usart_Init(ST_UART_config_t * USART_InitStruct)
{
 69a:	df 93       	push	r29
 69c:	cf 93       	push	r28
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <usart_Init+0x6>
 6a0:	00 d0       	rcall	.+0      	; 0x6a2 <usart_Init+0x8>
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
 6a6:	9b 83       	std	Y+3, r25	; 0x03
 6a8:	8a 83       	std	Y+2, r24	; 0x02
	UBRRH = (USART_InitStruct->USART_BaudRate>>8) & 0x7F;
 6aa:	a0 e4       	ldi	r26, 0x40	; 64
 6ac:	b0 e0       	ldi	r27, 0x00	; 0
 6ae:	ea 81       	ldd	r30, Y+2	; 0x02
 6b0:	fb 81       	ldd	r31, Y+3	; 0x03
 6b2:	80 81       	ld	r24, Z
 6b4:	91 81       	ldd	r25, Z+1	; 0x01
 6b6:	89 2f       	mov	r24, r25
 6b8:	99 27       	eor	r25, r25
 6ba:	8f 77       	andi	r24, 0x7F	; 127
 6bc:	8c 93       	st	X, r24
    UBRRL = (USART_InitStruct->USART_BaudRate );
 6be:	a9 e2       	ldi	r26, 0x29	; 41
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	ea 81       	ldd	r30, Y+2	; 0x02
 6c4:	fb 81       	ldd	r31, Y+3	; 0x03
 6c6:	80 81       	ld	r24, Z
 6c8:	91 81       	ldd	r25, Z+1	; 0x01
 6ca:	8c 93       	st	X, r24

    uint8_t UCSRC_h;
    SET_BIT(UCSRC_h,URSEL);
 6cc:	89 81       	ldd	r24, Y+1	; 0x01
 6ce:	80 68       	ori	r24, 0x80	; 128
 6d0:	89 83       	std	Y+1, r24	; 0x01
    /****** Set Word Length *******/
    if(USART_InitStruct->USART_WordLength == FIVE_BITS)
 6d2:	ea 81       	ldd	r30, Y+2	; 0x02
 6d4:	fb 81       	ldd	r31, Y+3	; 0x03
 6d6:	82 81       	ldd	r24, Z+2	; 0x02
 6d8:	85 30       	cpi	r24, 0x05	; 5
 6da:	71 f4       	brne	.+28     	; 0x6f8 <usart_Init+0x5e>
    {
        CLR_BIT(UCSRC_h,UCSZ0 );
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	8d 7f       	andi	r24, 0xFD	; 253
 6e0:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRC_h,UCSZ1 );        
 6e2:	89 81       	ldd	r24, Y+1	; 0x01
 6e4:	8b 7f       	andi	r24, 0xFB	; 251
 6e6:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB,UCSZ2 );
 6e8:	aa e2       	ldi	r26, 0x2A	; 42
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	ea e2       	ldi	r30, 0x2A	; 42
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	8b 7f       	andi	r24, 0xFB	; 251
 6f4:	8c 93       	st	X, r24
 6f6:	4f c0       	rjmp	.+158    	; 0x796 <usart_Init+0xfc>
    }
    else if(USART_InitStruct->USART_WordLength == SIX_BITS)
 6f8:	ea 81       	ldd	r30, Y+2	; 0x02
 6fa:	fb 81       	ldd	r31, Y+3	; 0x03
 6fc:	82 81       	ldd	r24, Z+2	; 0x02
 6fe:	86 30       	cpi	r24, 0x06	; 6
 700:	71 f4       	brne	.+28     	; 0x71e <usart_Init+0x84>
    {
        SET_BIT(UCSRC_h,UCSZ0 );
 702:	89 81       	ldd	r24, Y+1	; 0x01
 704:	82 60       	ori	r24, 0x02	; 2
 706:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRC_h,UCSZ1 );        
 708:	89 81       	ldd	r24, Y+1	; 0x01
 70a:	8b 7f       	andi	r24, 0xFB	; 251
 70c:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB,UCSZ2 );
 70e:	aa e2       	ldi	r26, 0x2A	; 42
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	ea e2       	ldi	r30, 0x2A	; 42
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	8b 7f       	andi	r24, 0xFB	; 251
 71a:	8c 93       	st	X, r24
 71c:	3c c0       	rjmp	.+120    	; 0x796 <usart_Init+0xfc>
    }
    else if(USART_InitStruct->USART_WordLength == SEVEN_BITS)
 71e:	ea 81       	ldd	r30, Y+2	; 0x02
 720:	fb 81       	ldd	r31, Y+3	; 0x03
 722:	82 81       	ldd	r24, Z+2	; 0x02
 724:	87 30       	cpi	r24, 0x07	; 7
 726:	71 f4       	brne	.+28     	; 0x744 <usart_Init+0xaa>
    {
        CLR_BIT(UCSRC_h,UCSZ0 );
 728:	89 81       	ldd	r24, Y+1	; 0x01
 72a:	8d 7f       	andi	r24, 0xFD	; 253
 72c:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRC_h,UCSZ1 );        
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	84 60       	ori	r24, 0x04	; 4
 732:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB,UCSZ2 );
 734:	aa e2       	ldi	r26, 0x2A	; 42
 736:	b0 e0       	ldi	r27, 0x00	; 0
 738:	ea e2       	ldi	r30, 0x2A	; 42
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	8b 7f       	andi	r24, 0xFB	; 251
 740:	8c 93       	st	X, r24
 742:	29 c0       	rjmp	.+82     	; 0x796 <usart_Init+0xfc>
    }
    else if(USART_InitStruct->USART_WordLength == EIGHT_BITS)
 744:	ea 81       	ldd	r30, Y+2	; 0x02
 746:	fb 81       	ldd	r31, Y+3	; 0x03
 748:	82 81       	ldd	r24, Z+2	; 0x02
 74a:	88 30       	cpi	r24, 0x08	; 8
 74c:	71 f4       	brne	.+28     	; 0x76a <usart_Init+0xd0>
    {
        SET_BIT(UCSRC_h,UCSZ0 );
 74e:	89 81       	ldd	r24, Y+1	; 0x01
 750:	82 60       	ori	r24, 0x02	; 2
 752:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRC_h,UCSZ1 );        
 754:	89 81       	ldd	r24, Y+1	; 0x01
 756:	84 60       	ori	r24, 0x04	; 4
 758:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB,UCSZ2 );
 75a:	aa e2       	ldi	r26, 0x2A	; 42
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	ea e2       	ldi	r30, 0x2A	; 42
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	80 81       	ld	r24, Z
 764:	8b 7f       	andi	r24, 0xFB	; 251
 766:	8c 93       	st	X, r24
 768:	16 c0       	rjmp	.+44     	; 0x796 <usart_Init+0xfc>
    }
    else if(USART_InitStruct->USART_WordLength ==NINE_BITS)
 76a:	ea 81       	ldd	r30, Y+2	; 0x02
 76c:	fb 81       	ldd	r31, Y+3	; 0x03
 76e:	82 81       	ldd	r24, Z+2	; 0x02
 770:	89 30       	cpi	r24, 0x09	; 9
 772:	71 f4       	brne	.+28     	; 0x790 <usart_Init+0xf6>
    {
        SET_BIT(UCSRC_h,UCSZ0 );
 774:	89 81       	ldd	r24, Y+1	; 0x01
 776:	82 60       	ori	r24, 0x02	; 2
 778:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRC_h,UCSZ1 );        
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	84 60       	ori	r24, 0x04	; 4
 77e:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRB,UCSZ2 );
 780:	aa e2       	ldi	r26, 0x2A	; 42
 782:	b0 e0       	ldi	r27, 0x00	; 0
 784:	ea e2       	ldi	r30, 0x2A	; 42
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	84 60       	ori	r24, 0x04	; 4
 78c:	8c 93       	st	X, r24
 78e:	03 c0       	rjmp	.+6      	; 0x796 <usart_Init+0xfc>
    }    
    else
    {
        return WORD_LENGTH_ERROR;
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	8c 83       	std	Y+4, r24	; 0x04
 794:	65 c0       	rjmp	.+202    	; 0x860 <__stack+0x1>
    }
    /****** Set Number of Stop bits *******/
    if(USART_InitStruct->USART_StopBits == ONE_BIT)
 796:	ea 81       	ldd	r30, Y+2	; 0x02
 798:	fb 81       	ldd	r31, Y+3	; 0x03
 79a:	83 81       	ldd	r24, Z+3	; 0x03
 79c:	88 23       	and	r24, r24
 79e:	21 f4       	brne	.+8      	; 0x7a8 <usart_Init+0x10e>
    {
        CLR_BIT(UCSRC_h, USBS);
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	87 7f       	andi	r24, 0xF7	; 247
 7a4:	89 83       	std	Y+1, r24	; 0x01
 7a6:	0c c0       	rjmp	.+24     	; 0x7c0 <usart_Init+0x126>
    }
    else if(USART_InitStruct->USART_StopBits == TWO_BIT)
 7a8:	ea 81       	ldd	r30, Y+2	; 0x02
 7aa:	fb 81       	ldd	r31, Y+3	; 0x03
 7ac:	83 81       	ldd	r24, Z+3	; 0x03
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	21 f4       	brne	.+8      	; 0x7ba <usart_Init+0x120>
    {
        SET_BIT(UCSRC_h, USBS);        
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
 7b4:	88 60       	ori	r24, 0x08	; 8
 7b6:	89 83       	std	Y+1, r24	; 0x01
 7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <usart_Init+0x126>
    }
    else
    {
        return STOP_BIT_ERROR;
 7ba:	82 e0       	ldi	r24, 0x02	; 2
 7bc:	8c 83       	std	Y+4, r24	; 0x04
 7be:	50 c0       	rjmp	.+160    	; 0x860 <__stack+0x1>
    }

    if(USART_InitStruct->USART_Parity == DISABLED)
 7c0:	ea 81       	ldd	r30, Y+2	; 0x02
 7c2:	fb 81       	ldd	r31, Y+3	; 0x03
 7c4:	84 81       	ldd	r24, Z+4	; 0x04
 7c6:	88 23       	and	r24, r24
 7c8:	39 f4       	brne	.+14     	; 0x7d8 <usart_Init+0x13e>
    {
        CLR_BIT(UCSRC_h,UPM1);
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
 7cc:	8f 7d       	andi	r24, 0xDF	; 223
 7ce:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRC_h,UPM0);
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	8f 7e       	andi	r24, 0xEF	; 239
 7d4:	89 83       	std	Y+1, r24	; 0x01
 7d6:	1b c0       	rjmp	.+54     	; 0x80e <usart_Init+0x174>
    }
    else if(USART_InitStruct->USART_Parity == ENABLED_EVEN)
 7d8:	ea 81       	ldd	r30, Y+2	; 0x02
 7da:	fb 81       	ldd	r31, Y+3	; 0x03
 7dc:	84 81       	ldd	r24, Z+4	; 0x04
 7de:	81 30       	cpi	r24, 0x01	; 1
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <usart_Init+0x156>
    {
        SET_BIT(UCSRC_h,UPM1);
 7e2:	89 81       	ldd	r24, Y+1	; 0x01
 7e4:	80 62       	ori	r24, 0x20	; 32
 7e6:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRC_h,UPM0);
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	8f 7e       	andi	r24, 0xEF	; 239
 7ec:	89 83       	std	Y+1, r24	; 0x01
 7ee:	0f c0       	rjmp	.+30     	; 0x80e <usart_Init+0x174>
    } 
    else if(USART_InitStruct->USART_Parity == ENABLED_ODD)
 7f0:	ea 81       	ldd	r30, Y+2	; 0x02
 7f2:	fb 81       	ldd	r31, Y+3	; 0x03
 7f4:	84 81       	ldd	r24, Z+4	; 0x04
 7f6:	82 30       	cpi	r24, 0x02	; 2
 7f8:	39 f4       	brne	.+14     	; 0x808 <usart_Init+0x16e>
    {
        SET_BIT(UCSRC_h,UPM1);
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	80 62       	ori	r24, 0x20	; 32
 7fe:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRC_h,UPM0);
 800:	89 81       	ldd	r24, Y+1	; 0x01
 802:	80 61       	ori	r24, 0x10	; 16
 804:	89 83       	std	Y+1, r24	; 0x01
 806:	03 c0       	rjmp	.+6      	; 0x80e <usart_Init+0x174>
    }
    else
    {
        return PARITY_ERROR;
 808:	83 e0       	ldi	r24, 0x03	; 3
 80a:	8c 83       	std	Y+4, r24	; 0x04
 80c:	29 c0       	rjmp	.+82     	; 0x860 <__stack+0x1>
    }
    if(USART_InitStruct->USART_Mode == TRANSMITTER)  
 80e:	ea 81       	ldd	r30, Y+2	; 0x02
 810:	fb 81       	ldd	r31, Y+3	; 0x03
 812:	85 81       	ldd	r24, Z+5	; 0x05
 814:	88 23       	and	r24, r24
 816:	79 f4       	brne	.+30     	; 0x836 <usart_Init+0x19c>
    {
        //Transmitter Enable
	    SET_BIT(UCSRB,TXEN);
 818:	aa e2       	ldi	r26, 0x2A	; 42
 81a:	b0 e0       	ldi	r27, 0x00	; 0
 81c:	ea e2       	ldi	r30, 0x2A	; 42
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	88 60       	ori	r24, 0x08	; 8
 824:	8c 93       	st	X, r24
        //Receiver Enable
        SET_BIT(UCSRB,RXEN);
 826:	aa e2       	ldi	r26, 0x2A	; 42
 828:	b0 e0       	ldi	r27, 0x00	; 0
 82a:	ea e2       	ldi	r30, 0x2A	; 42
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	80 61       	ori	r24, 0x10	; 16
 832:	8c 93       	st	X, r24
 834:	10 c0       	rjmp	.+32     	; 0x856 <usart_Init+0x1bc>
    }
    else if(USART_InitStruct->USART_Mode == RECEIVER)  
 836:	ea 81       	ldd	r30, Y+2	; 0x02
 838:	fb 81       	ldd	r31, Y+3	; 0x03
 83a:	85 81       	ldd	r24, Z+5	; 0x05
 83c:	81 30       	cpi	r24, 0x01	; 1
 83e:	41 f4       	brne	.+16     	; 0x850 <usart_Init+0x1b6>
    {
        //Receiver Enable
        SET_BIT(UCSRB,RXEN);
 840:	aa e2       	ldi	r26, 0x2A	; 42
 842:	b0 e0       	ldi	r27, 0x00	; 0
 844:	ea e2       	ldi	r30, 0x2A	; 42
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	80 81       	ld	r24, Z
 84a:	80 61       	ori	r24, 0x10	; 16
 84c:	8c 93       	st	X, r24
 84e:	03 c0       	rjmp	.+6      	; 0x856 <usart_Init+0x1bc>
    }
    else
    {
        return MODE_ERROR;
 850:	84 e0       	ldi	r24, 0x04	; 4
 852:	8c 83       	std	Y+4, r24	; 0x04
 854:	05 c0       	rjmp	.+10     	; 0x860 <__stack+0x1>
    }

    UCSRC = UCSRC_h;
 856:	e0 e4       	ldi	r30, 0x40	; 64
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	89 81       	ldd	r24, Y+1	; 0x01
 85c:	80 83       	st	Z, r24

    return NO_ERROR;
 85e:	1c 82       	std	Y+4, r1	; 0x04
 860:	8c 81       	ldd	r24, Y+4	; 0x04

}
 862:	0f 90       	pop	r0
 864:	0f 90       	pop	r0
 866:	0f 90       	pop	r0
 868:	0f 90       	pop	r0
 86a:	cf 91       	pop	r28
 86c:	df 91       	pop	r29
 86e:	08 95       	ret

00000870 <usart_SendData>:

error_state usart_SendData(uint8_t data_transmitted)
{
 870:	df 93       	push	r29
 872:	cf 93       	push	r28
 874:	00 d0       	rcall	.+0      	; 0x876 <usart_SendData+0x6>
 876:	cd b7       	in	r28, 0x3d	; 61
 878:	de b7       	in	r29, 0x3e	; 62
 87a:	89 83       	std	Y+1, r24	; 0x01


	while(!GET_BIT(UCSRA,UDRE));
 87c:	eb e2       	ldi	r30, 0x2B	; 43
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	82 95       	swap	r24
 884:	86 95       	lsr	r24
 886:	87 70       	andi	r24, 0x07	; 7
 888:	88 2f       	mov	r24, r24
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	81 70       	andi	r24, 0x01	; 1
 88e:	90 70       	andi	r25, 0x00	; 0
 890:	00 97       	sbiw	r24, 0x00	; 0
 892:	a1 f3       	breq	.-24     	; 0x87c <usart_SendData+0xc>
	UDR=data_transmitted;
 894:	ec e2       	ldi	r30, 0x2C	; 44
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	89 81       	ldd	r24, Y+1	; 0x01
 89a:	80 83       	st	Z, r24
    if(GET_BIT(UCSRA,TXC)!=1)
 89c:	eb e2       	ldi	r30, 0x2B	; 43
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	82 95       	swap	r24
 8a4:	86 95       	lsr	r24
 8a6:	86 95       	lsr	r24
 8a8:	83 70       	andi	r24, 0x03	; 3
 8aa:	88 2f       	mov	r24, r24
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	81 70       	andi	r24, 0x01	; 1
 8b0:	90 70       	andi	r25, 0x00	; 0
 8b2:	00 97       	sbiw	r24, 0x00	; 0
 8b4:	19 f4       	brne	.+6      	; 0x8bc <usart_SendData+0x4c>
        return TRANSMITION_ERROR;
 8b6:	85 e0       	ldi	r24, 0x05	; 5
 8b8:	8a 83       	std	Y+2, r24	; 0x02
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <usart_SendData+0x50>

    return NO_TRANSMITION_ERROR;
 8bc:	86 e0       	ldi	r24, 0x06	; 6
 8be:	8a 83       	std	Y+2, r24	; 0x02
 8c0:	8a 81       	ldd	r24, Y+2	; 0x02

}
 8c2:	0f 90       	pop	r0
 8c4:	0f 90       	pop	r0
 8c6:	cf 91       	pop	r28
 8c8:	df 91       	pop	r29
 8ca:	08 95       	ret

000008cc <usart_ReceiveData>:

uint8_t usart_ReceiveData(void)
{
 8cc:	df 93       	push	r29
 8ce:	cf 93       	push	r28
 8d0:	0f 92       	push	r0
 8d2:	cd b7       	in	r28, 0x3d	; 61
 8d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	while(0==GET_BIT(UCSRA,RXC));
 8d6:	eb e2       	ldi	r30, 0x2B	; 43
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	88 23       	and	r24, r24
 8de:	dc f7       	brge	.-10     	; 0x8d6 <usart_ReceiveData+0xa>
	data=UDR;
 8e0:	ec e2       	ldi	r30, 0x2C	; 44
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	89 83       	std	Y+1, r24	; 0x01
	return data;
 8e8:	89 81       	ldd	r24, Y+1	; 0x01
}
 8ea:	0f 90       	pop	r0
 8ec:	cf 91       	pop	r28
 8ee:	df 91       	pop	r29
 8f0:	08 95       	ret

000008f2 <usart_SendString>:


error_state usart_SendString(uint8_t *str)
{
 8f2:	df 93       	push	r29
 8f4:	cf 93       	push	r28
 8f6:	00 d0       	rcall	.+0      	; 0x8f8 <usart_SendString+0x6>
 8f8:	0f 92       	push	r0
 8fa:	cd b7       	in	r28, 0x3d	; 61
 8fc:	de b7       	in	r29, 0x3e	; 62
 8fe:	9b 83       	std	Y+3, r25	; 0x03
 900:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t j=0;
 902:	19 82       	std	Y+1, r1	; 0x01
 904:	0e c0       	rjmp	.+28     	; 0x922 <usart_SendString+0x30>

	while (str[j]!= '\0')
	{
		usart_SendData(str[j]);
 906:	89 81       	ldd	r24, Y+1	; 0x01
 908:	28 2f       	mov	r18, r24
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	8a 81       	ldd	r24, Y+2	; 0x02
 90e:	9b 81       	ldd	r25, Y+3	; 0x03
 910:	fc 01       	movw	r30, r24
 912:	e2 0f       	add	r30, r18
 914:	f3 1f       	adc	r31, r19
 916:	80 81       	ld	r24, Z
 918:	0e 94 38 04 	call	0x870	; 0x870 <usart_SendData>
		j++;
 91c:	89 81       	ldd	r24, Y+1	; 0x01
 91e:	8f 5f       	subi	r24, 0xFF	; 255
 920:	89 83       	std	Y+1, r24	; 0x01

error_state usart_SendString(uint8_t *str)
{
	uint8_t j=0;

	while (str[j]!= '\0')
 922:	89 81       	ldd	r24, Y+1	; 0x01
 924:	28 2f       	mov	r18, r24
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	9b 81       	ldd	r25, Y+3	; 0x03
 92c:	fc 01       	movw	r30, r24
 92e:	e2 0f       	add	r30, r18
 930:	f3 1f       	adc	r31, r19
 932:	80 81       	ld	r24, Z
 934:	88 23       	and	r24, r24
 936:	39 f7       	brne	.-50     	; 0x906 <usart_SendString+0x14>
	{
		usart_SendData(str[j]);
		j++;
	}

	return STRING_NOERROR;
 938:	87 e0       	ldi	r24, 0x07	; 7
}
 93a:	0f 90       	pop	r0
 93c:	0f 90       	pop	r0
 93e:	0f 90       	pop	r0
 940:	cf 91       	pop	r28
 942:	df 91       	pop	r29
 944:	08 95       	ret

00000946 <usart_ReceiveString>:

uint8_t * usart_ReceiveString(uint8_t * au8data ,uint8_t terminating_character)
{
 946:	0f 93       	push	r16
 948:	1f 93       	push	r17
 94a:	df 93       	push	r29
 94c:	cf 93       	push	r28
 94e:	cd b7       	in	r28, 0x3d	; 61
 950:	de b7       	in	r29, 0x3e	; 62
 952:	27 97       	sbiw	r28, 0x07	; 7
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	f8 94       	cli
 958:	de bf       	out	0x3e, r29	; 62
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	cd bf       	out	0x3d, r28	; 61
 95e:	9e 83       	std	Y+6, r25	; 0x06
 960:	8d 83       	std	Y+5, r24	; 0x05
 962:	6f 83       	std	Y+7, r22	; 0x07
	uint32_t i,temp=0;
 964:	1a 82       	std	Y+2, r1	; 0x02
 966:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;;i++)
 968:	1c 82       	std	Y+4, r1	; 0x04
 96a:	1b 82       	std	Y+3, r1	; 0x03
	{
		*(au8data+i)=usart_ReceiveData();
 96c:	2d 81       	ldd	r18, Y+5	; 0x05
 96e:	3e 81       	ldd	r19, Y+6	; 0x06
 970:	8b 81       	ldd	r24, Y+3	; 0x03
 972:	9c 81       	ldd	r25, Y+4	; 0x04
 974:	89 01       	movw	r16, r18
 976:	08 0f       	add	r16, r24
 978:	19 1f       	adc	r17, r25
 97a:	0e 94 66 04 	call	0x8cc	; 0x8cc <usart_ReceiveData>
 97e:	f8 01       	movw	r30, r16
 980:	80 83       	st	Z, r24
		if(*(au8data+i)==terminating_character)
 982:	2d 81       	ldd	r18, Y+5	; 0x05
 984:	3e 81       	ldd	r19, Y+6	; 0x06
 986:	8b 81       	ldd	r24, Y+3	; 0x03
 988:	9c 81       	ldd	r25, Y+4	; 0x04
 98a:	f9 01       	movw	r30, r18
 98c:	e8 0f       	add	r30, r24
 98e:	f9 1f       	adc	r31, r25
 990:	90 81       	ld	r25, Z
 992:	8f 81       	ldd	r24, Y+7	; 0x07
 994:	98 17       	cp	r25, r24
 996:	59 f0       	breq	.+22     	; 0x9ae <usart_ReceiveString+0x68>
			break;
		else
			temp++;
 998:	89 81       	ldd	r24, Y+1	; 0x01
 99a:	9a 81       	ldd	r25, Y+2	; 0x02
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	9a 83       	std	Y+2, r25	; 0x02
 9a0:	89 83       	std	Y+1, r24	; 0x01
}

uint8_t * usart_ReceiveString(uint8_t * au8data ,uint8_t terminating_character)
{
	uint32_t i,temp=0;
	for(i=0;;i++)
 9a2:	8b 81       	ldd	r24, Y+3	; 0x03
 9a4:	9c 81       	ldd	r25, Y+4	; 0x04
 9a6:	01 96       	adiw	r24, 0x01	; 1
 9a8:	9c 83       	std	Y+4, r25	; 0x04
 9aa:	8b 83       	std	Y+3, r24	; 0x03
 9ac:	df cf       	rjmp	.-66     	; 0x96c <usart_ReceiveString+0x26>
		if(*(au8data+i)==terminating_character)
			break;
		else
			temp++;
	}
	*(au8data+temp)='\0';
 9ae:	2d 81       	ldd	r18, Y+5	; 0x05
 9b0:	3e 81       	ldd	r19, Y+6	; 0x06
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	9a 81       	ldd	r25, Y+2	; 0x02
 9b6:	f9 01       	movw	r30, r18
 9b8:	e8 0f       	add	r30, r24
 9ba:	f9 1f       	adc	r31, r25
 9bc:	10 82       	st	Z, r1
	return au8data;
 9be:	8d 81       	ldd	r24, Y+5	; 0x05
 9c0:	9e 81       	ldd	r25, Y+6	; 0x06
}
 9c2:	27 96       	adiw	r28, 0x07	; 7
 9c4:	0f b6       	in	r0, 0x3f	; 63
 9c6:	f8 94       	cli
 9c8:	de bf       	out	0x3e, r29	; 62
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	cd bf       	out	0x3d, r28	; 61
 9ce:	cf 91       	pop	r28
 9d0:	df 91       	pop	r29
 9d2:	1f 91       	pop	r17
 9d4:	0f 91       	pop	r16
 9d6:	08 95       	ret

000009d8 <main>:
#include <string.h>



void main(void)
{
 9d8:	df 93       	push	r29
 9da:	cf 93       	push	r28
 9dc:	cd b7       	in	r28, 0x3d	; 61
 9de:	de b7       	in	r29, 0x3e	; 62
 9e0:	2c 97       	sbiw	r28, 0x0c	; 12
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	f8 94       	cli
 9e6:	de bf       	out	0x3e, r29	; 62
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	cd bf       	out	0x3d, r28	; 61

    ST_UART_config_t x={51,EIGHT_BITS,ONE_BIT,DISABLED,TRANSMITTER};
 9ec:	ce 01       	movw	r24, r28
 9ee:	01 96       	adiw	r24, 0x01	; 1
 9f0:	99 87       	std	Y+9, r25	; 0x09
 9f2:	88 87       	std	Y+8, r24	; 0x08
 9f4:	e0 e6       	ldi	r30, 0x60	; 96
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	fb 87       	std	Y+11, r31	; 0x0b
 9fa:	ea 87       	std	Y+10, r30	; 0x0a
 9fc:	f6 e0       	ldi	r31, 0x06	; 6
 9fe:	fc 87       	std	Y+12, r31	; 0x0c
 a00:	ea 85       	ldd	r30, Y+10	; 0x0a
 a02:	fb 85       	ldd	r31, Y+11	; 0x0b
 a04:	00 80       	ld	r0, Z
 a06:	8a 85       	ldd	r24, Y+10	; 0x0a
 a08:	9b 85       	ldd	r25, Y+11	; 0x0b
 a0a:	01 96       	adiw	r24, 0x01	; 1
 a0c:	9b 87       	std	Y+11, r25	; 0x0b
 a0e:	8a 87       	std	Y+10, r24	; 0x0a
 a10:	e8 85       	ldd	r30, Y+8	; 0x08
 a12:	f9 85       	ldd	r31, Y+9	; 0x09
 a14:	00 82       	st	Z, r0
 a16:	88 85       	ldd	r24, Y+8	; 0x08
 a18:	99 85       	ldd	r25, Y+9	; 0x09
 a1a:	01 96       	adiw	r24, 0x01	; 1
 a1c:	99 87       	std	Y+9, r25	; 0x09
 a1e:	88 87       	std	Y+8, r24	; 0x08
 a20:	9c 85       	ldd	r25, Y+12	; 0x0c
 a22:	91 50       	subi	r25, 0x01	; 1
 a24:	9c 87       	std	Y+12, r25	; 0x0c
 a26:	ec 85       	ldd	r30, Y+12	; 0x0c
 a28:	ee 23       	and	r30, r30
 a2a:	51 f7       	brne	.-44     	; 0xa00 <main+0x28>
    if( usart_Init(&x) == TRANSMITION_ERROR){
 a2c:	ce 01       	movw	r24, r28
 a2e:	01 96       	adiw	r24, 0x01	; 1
 a30:	0e 94 4d 03 	call	0x69a	; 0x69a <usart_Init>
 a34:	85 30       	cpi	r24, 0x05	; 5
 a36:	29 f4       	brne	.+10     	; 0xa42 <main+0x6a>
    	DIO_voidSetPinValue(PORTA, PIN0,HIGH);
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	60 e0       	ldi	r22, 0x00	; 0
 a3c:	41 e0       	ldi	r20, 0x01	; 1
 a3e:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_voidSetPinValue>
    }
    uint8_t local;
	usart_ReceiveString(&local, '\r');
 a42:	ce 01       	movw	r24, r28
 a44:	07 96       	adiw	r24, 0x07	; 7
 a46:	6d e0       	ldi	r22, 0x0D	; 13
 a48:	0e 94 a3 04 	call	0x946	; 0x946 <usart_ReceiveString>
	usart_SendString(&local);
 a4c:	ce 01       	movw	r24, r28
 a4e:	07 96       	adiw	r24, 0x07	; 7
 a50:	0e 94 79 04 	call	0x8f2	; 0x8f2 <usart_SendString>
 a54:	ff cf       	rjmp	.-2      	; 0xa54 <main+0x7c>

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
