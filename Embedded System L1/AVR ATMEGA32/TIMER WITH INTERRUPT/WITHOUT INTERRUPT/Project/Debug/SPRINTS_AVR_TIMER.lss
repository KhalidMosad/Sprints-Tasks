
SPRINTS_AVR_TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001a9a  00001b2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800070  00800070  00001b3e  2**0
                  ALLOC
  3 .stab         00001890  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000087d  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a4 0c 	call	0x1948	; 0x1948 <main>
      8a:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
#include"BIT_MATH.h"
#include"DIO_register.h"
#include"DIO_interface.h"

void DIO_voidSetPinDirection		(ST_DIO_config_t * configurations)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <DIO_voidSetPinDirection+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <DIO_voidSetPinDirection+0x8>
      9a:	00 d0       	rcall	.+0      	; 0x9c <DIO_voidSetPinDirection+0xa>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	9a 83       	std	Y+2, r25	; 0x02
      a2:	89 83       	std	Y+1, r24	; 0x01
	if(OUTPUT==configurations->state)
      a4:	e9 81       	ldd	r30, Y+1	; 0x01
      a6:	fa 81       	ldd	r31, Y+2	; 0x02
      a8:	82 81       	ldd	r24, Z+2	; 0x02
      aa:	81 30       	cpi	r24, 0x01	; 1
      ac:	09 f0       	breq	.+2      	; 0xb0 <DIO_voidSetPinDirection+0x1e>
      ae:	7a c0       	rjmp	.+244    	; 0x1a4 <DIO_voidSetPinDirection+0x112>
	{
		switch (configurations->port_no)
      b0:	e9 81       	ldd	r30, Y+1	; 0x01
      b2:	fa 81       	ldd	r31, Y+2	; 0x02
      b4:	80 81       	ld	r24, Z
      b6:	28 2f       	mov	r18, r24
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	3e 83       	std	Y+6, r19	; 0x06
      bc:	2d 83       	std	Y+5, r18	; 0x05
      be:	8d 81       	ldd	r24, Y+5	; 0x05
      c0:	9e 81       	ldd	r25, Y+6	; 0x06
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	91 05       	cpc	r25, r1
      c6:	61 f1       	breq	.+88     	; 0x120 <DIO_voidSetPinDirection+0x8e>
      c8:	2d 81       	ldd	r18, Y+5	; 0x05
      ca:	3e 81       	ldd	r19, Y+6	; 0x06
      cc:	22 30       	cpi	r18, 0x02	; 2
      ce:	31 05       	cpc	r19, r1
      d0:	2c f4       	brge	.+10     	; 0xdc <DIO_voidSetPinDirection+0x4a>
      d2:	8d 81       	ldd	r24, Y+5	; 0x05
      d4:	9e 81       	ldd	r25, Y+6	; 0x06
      d6:	00 97       	sbiw	r24, 0x00	; 0
      d8:	69 f0       	breq	.+26     	; 0xf4 <DIO_voidSetPinDirection+0x62>
      da:	e7 c0       	rjmp	.+462    	; 0x2aa <DIO_voidSetPinDirection+0x218>
      dc:	2d 81       	ldd	r18, Y+5	; 0x05
      de:	3e 81       	ldd	r19, Y+6	; 0x06
      e0:	22 30       	cpi	r18, 0x02	; 2
      e2:	31 05       	cpc	r19, r1
      e4:	99 f1       	breq	.+102    	; 0x14c <DIO_voidSetPinDirection+0xba>
      e6:	8d 81       	ldd	r24, Y+5	; 0x05
      e8:	9e 81       	ldd	r25, Y+6	; 0x06
      ea:	83 30       	cpi	r24, 0x03	; 3
      ec:	91 05       	cpc	r25, r1
      ee:	09 f4       	brne	.+2      	; 0xf2 <DIO_voidSetPinDirection+0x60>
      f0:	43 c0       	rjmp	.+134    	; 0x178 <DIO_voidSetPinDirection+0xe6>
      f2:	db c0       	rjmp	.+438    	; 0x2aa <DIO_voidSetPinDirection+0x218>
		{
			case PORTA:SET_BIT(DDRA, configurations->pin_no); break;
      f4:	aa e3       	ldi	r26, 0x3A	; 58
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	ea e3       	ldi	r30, 0x3A	; 58
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	48 2f       	mov	r20, r24
     100:	e9 81       	ldd	r30, Y+1	; 0x01
     102:	fa 81       	ldd	r31, Y+2	; 0x02
     104:	81 81       	ldd	r24, Z+1	; 0x01
     106:	28 2f       	mov	r18, r24
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	02 2e       	mov	r0, r18
     110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_voidSetPinDirection+0x84>
     112:	88 0f       	add	r24, r24
     114:	99 1f       	adc	r25, r25
     116:	0a 94       	dec	r0
     118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_voidSetPinDirection+0x80>
     11a:	84 2b       	or	r24, r20
     11c:	8c 93       	st	X, r24
     11e:	c5 c0       	rjmp	.+394    	; 0x2aa <DIO_voidSetPinDirection+0x218>
			case PORTB:SET_BIT(DDRB,  configurations->pin_no); break;
     120:	a7 e3       	ldi	r26, 0x37	; 55
     122:	b0 e0       	ldi	r27, 0x00	; 0
     124:	e7 e3       	ldi	r30, 0x37	; 55
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	48 2f       	mov	r20, r24
     12c:	e9 81       	ldd	r30, Y+1	; 0x01
     12e:	fa 81       	ldd	r31, Y+2	; 0x02
     130:	81 81       	ldd	r24, Z+1	; 0x01
     132:	28 2f       	mov	r18, r24
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	02 2e       	mov	r0, r18
     13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_voidSetPinDirection+0xb0>
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	0a 94       	dec	r0
     144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_voidSetPinDirection+0xac>
     146:	84 2b       	or	r24, r20
     148:	8c 93       	st	X, r24
     14a:	af c0       	rjmp	.+350    	; 0x2aa <DIO_voidSetPinDirection+0x218>
			case PORTC:SET_BIT(DDRC,  configurations->pin_no); break;
     14c:	a4 e3       	ldi	r26, 0x34	; 52
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	e4 e3       	ldi	r30, 0x34	; 52
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	48 2f       	mov	r20, r24
     158:	e9 81       	ldd	r30, Y+1	; 0x01
     15a:	fa 81       	ldd	r31, Y+2	; 0x02
     15c:	81 81       	ldd	r24, Z+1	; 0x01
     15e:	28 2f       	mov	r18, r24
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	02 2e       	mov	r0, r18
     168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_voidSetPinDirection+0xdc>
     16a:	88 0f       	add	r24, r24
     16c:	99 1f       	adc	r25, r25
     16e:	0a 94       	dec	r0
     170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_voidSetPinDirection+0xd8>
     172:	84 2b       	or	r24, r20
     174:	8c 93       	st	X, r24
     176:	99 c0       	rjmp	.+306    	; 0x2aa <DIO_voidSetPinDirection+0x218>
			case PORTD:SET_BIT(DDRD,  configurations->pin_no); break;
     178:	a1 e3       	ldi	r26, 0x31	; 49
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e1 e3       	ldi	r30, 0x31	; 49
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	48 2f       	mov	r20, r24
     184:	e9 81       	ldd	r30, Y+1	; 0x01
     186:	fa 81       	ldd	r31, Y+2	; 0x02
     188:	81 81       	ldd	r24, Z+1	; 0x01
     18a:	28 2f       	mov	r18, r24
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 2e       	mov	r0, r18
     194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_voidSetPinDirection+0x108>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	0a 94       	dec	r0
     19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_voidSetPinDirection+0x104>
     19e:	84 2b       	or	r24, r20
     1a0:	8c 93       	st	X, r24
     1a2:	83 c0       	rjmp	.+262    	; 0x2aa <DIO_voidSetPinDirection+0x218>
	
		}	
	}
	else if(INPUT==configurations->state)
     1a4:	e9 81       	ldd	r30, Y+1	; 0x01
     1a6:	fa 81       	ldd	r31, Y+2	; 0x02
     1a8:	82 81       	ldd	r24, Z+2	; 0x02
     1aa:	88 23       	and	r24, r24
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <DIO_voidSetPinDirection+0x11e>
     1ae:	7d c0       	rjmp	.+250    	; 0x2aa <DIO_voidSetPinDirection+0x218>
	{
		switch(configurations->port_no)
     1b0:	e9 81       	ldd	r30, Y+1	; 0x01
     1b2:	fa 81       	ldd	r31, Y+2	; 0x02
     1b4:	80 81       	ld	r24, Z
     1b6:	28 2f       	mov	r18, r24
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	3c 83       	std	Y+4, r19	; 0x04
     1bc:	2b 83       	std	Y+3, r18	; 0x03
     1be:	8b 81       	ldd	r24, Y+3	; 0x03
     1c0:	9c 81       	ldd	r25, Y+4	; 0x04
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	91 05       	cpc	r25, r1
     1c6:	69 f1       	breq	.+90     	; 0x222 <DIO_voidSetPinDirection+0x190>
     1c8:	2b 81       	ldd	r18, Y+3	; 0x03
     1ca:	3c 81       	ldd	r19, Y+4	; 0x04
     1cc:	22 30       	cpi	r18, 0x02	; 2
     1ce:	31 05       	cpc	r19, r1
     1d0:	2c f4       	brge	.+10     	; 0x1dc <DIO_voidSetPinDirection+0x14a>
     1d2:	8b 81       	ldd	r24, Y+3	; 0x03
     1d4:	9c 81       	ldd	r25, Y+4	; 0x04
     1d6:	00 97       	sbiw	r24, 0x00	; 0
     1d8:	69 f0       	breq	.+26     	; 0x1f4 <DIO_voidSetPinDirection+0x162>
     1da:	67 c0       	rjmp	.+206    	; 0x2aa <DIO_voidSetPinDirection+0x218>
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
     1e0:	22 30       	cpi	r18, 0x02	; 2
     1e2:	31 05       	cpc	r19, r1
     1e4:	a9 f1       	breq	.+106    	; 0x250 <DIO_voidSetPinDirection+0x1be>
     1e6:	8b 81       	ldd	r24, Y+3	; 0x03
     1e8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ea:	83 30       	cpi	r24, 0x03	; 3
     1ec:	91 05       	cpc	r25, r1
     1ee:	09 f4       	brne	.+2      	; 0x1f2 <DIO_voidSetPinDirection+0x160>
     1f0:	46 c0       	rjmp	.+140    	; 0x27e <DIO_voidSetPinDirection+0x1ec>
     1f2:	5b c0       	rjmp	.+182    	; 0x2aa <DIO_voidSetPinDirection+0x218>
		{
			case PORTA:CLR_BIT(DDRA,  configurations->pin_no); break;
     1f4:	aa e3       	ldi	r26, 0x3A	; 58
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	ea e3       	ldi	r30, 0x3A	; 58
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	48 2f       	mov	r20, r24
     200:	e9 81       	ldd	r30, Y+1	; 0x01
     202:	fa 81       	ldd	r31, Y+2	; 0x02
     204:	81 81       	ldd	r24, Z+1	; 0x01
     206:	28 2f       	mov	r18, r24
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	02 2e       	mov	r0, r18
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinDirection+0x184>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	0a 94       	dec	r0
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinDirection+0x180>
     21a:	80 95       	com	r24
     21c:	84 23       	and	r24, r20
     21e:	8c 93       	st	X, r24
     220:	44 c0       	rjmp	.+136    	; 0x2aa <DIO_voidSetPinDirection+0x218>
			case PORTB:CLR_BIT(DDRB,  configurations->pin_no); break;
     222:	a7 e3       	ldi	r26, 0x37	; 55
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	e7 e3       	ldi	r30, 0x37	; 55
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	48 2f       	mov	r20, r24
     22e:	e9 81       	ldd	r30, Y+1	; 0x01
     230:	fa 81       	ldd	r31, Y+2	; 0x02
     232:	81 81       	ldd	r24, Z+1	; 0x01
     234:	28 2f       	mov	r18, r24
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	02 2e       	mov	r0, r18
     23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_voidSetPinDirection+0x1b2>
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_voidSetPinDirection+0x1ae>
     248:	80 95       	com	r24
     24a:	84 23       	and	r24, r20
     24c:	8c 93       	st	X, r24
     24e:	2d c0       	rjmp	.+90     	; 0x2aa <DIO_voidSetPinDirection+0x218>
		    case PORTC:CLR_BIT(DDRC,  configurations->pin_no); break;
     250:	a4 e3       	ldi	r26, 0x34	; 52
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e4 e3       	ldi	r30, 0x34	; 52
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	48 2f       	mov	r20, r24
     25c:	e9 81       	ldd	r30, Y+1	; 0x01
     25e:	fa 81       	ldd	r31, Y+2	; 0x02
     260:	81 81       	ldd	r24, Z+1	; 0x01
     262:	28 2f       	mov	r18, r24
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 2e       	mov	r0, r18
     26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_voidSetPinDirection+0x1e0>
     26e:	88 0f       	add	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	0a 94       	dec	r0
     274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_voidSetPinDirection+0x1dc>
     276:	80 95       	com	r24
     278:	84 23       	and	r24, r20
     27a:	8c 93       	st	X, r24
     27c:	16 c0       	rjmp	.+44     	; 0x2aa <DIO_voidSetPinDirection+0x218>
		    case PORTD:CLR_BIT(DDRD,  configurations->pin_no); break;
     27e:	a1 e3       	ldi	r26, 0x31	; 49
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	e1 e3       	ldi	r30, 0x31	; 49
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	48 2f       	mov	r20, r24
     28a:	e9 81       	ldd	r30, Y+1	; 0x01
     28c:	fa 81       	ldd	r31, Y+2	; 0x02
     28e:	81 81       	ldd	r24, Z+1	; 0x01
     290:	28 2f       	mov	r18, r24
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 2e       	mov	r0, r18
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_voidSetPinDirection+0x20e>
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	0a 94       	dec	r0
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_voidSetPinDirection+0x20a>
     2a4:	80 95       	com	r24
     2a6:	84 23       	and	r24, r20
     2a8:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
     2aa:	26 96       	adiw	r28, 0x06	; 6
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	cf 91       	pop	r28
     2b8:	df 91       	pop	r29
     2ba:	08 95       	ret

000002bc <DIO_voidSetPinValue>:
void DIO_voidSetPinValue			(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8value)
{
     2bc:	df 93       	push	r29
     2be:	cf 93       	push	r28
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	27 97       	sbiw	r28, 0x07	; 7
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	89 83       	std	Y+1, r24	; 0x01
     2d2:	6a 83       	std	Y+2, r22	; 0x02
     2d4:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_u8value)
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	09 f0       	breq	.+2      	; 0x2de <DIO_voidSetPinValue+0x22>
     2dc:	6f c0       	rjmp	.+222    	; 0x3bc <DIO_voidSetPinValue+0x100>
	{
		switch (copy_u8port)
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	28 2f       	mov	r18, r24
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	3f 83       	std	Y+7, r19	; 0x07
     2e6:	2e 83       	std	Y+6, r18	; 0x06
     2e8:	8e 81       	ldd	r24, Y+6	; 0x06
     2ea:	9f 81       	ldd	r25, Y+7	; 0x07
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	91 05       	cpc	r25, r1
     2f0:	49 f1       	breq	.+82     	; 0x344 <DIO_voidSetPinValue+0x88>
     2f2:	2e 81       	ldd	r18, Y+6	; 0x06
     2f4:	3f 81       	ldd	r19, Y+7	; 0x07
     2f6:	22 30       	cpi	r18, 0x02	; 2
     2f8:	31 05       	cpc	r19, r1
     2fa:	2c f4       	brge	.+10     	; 0x306 <DIO_voidSetPinValue+0x4a>
     2fc:	8e 81       	ldd	r24, Y+6	; 0x06
     2fe:	9f 81       	ldd	r25, Y+7	; 0x07
     300:	00 97       	sbiw	r24, 0x00	; 0
     302:	61 f0       	breq	.+24     	; 0x31c <DIO_voidSetPinValue+0x60>
     304:	d2 c0       	rjmp	.+420    	; 0x4aa <DIO_voidSetPinValue+0x1ee>
     306:	2e 81       	ldd	r18, Y+6	; 0x06
     308:	3f 81       	ldd	r19, Y+7	; 0x07
     30a:	22 30       	cpi	r18, 0x02	; 2
     30c:	31 05       	cpc	r19, r1
     30e:	71 f1       	breq	.+92     	; 0x36c <DIO_voidSetPinValue+0xb0>
     310:	8e 81       	ldd	r24, Y+6	; 0x06
     312:	9f 81       	ldd	r25, Y+7	; 0x07
     314:	83 30       	cpi	r24, 0x03	; 3
     316:	91 05       	cpc	r25, r1
     318:	e9 f1       	breq	.+122    	; 0x394 <DIO_voidSetPinValue+0xd8>
     31a:	c7 c0       	rjmp	.+398    	; 0x4aa <DIO_voidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_u8pin); break;
     31c:	ab e3       	ldi	r26, 0x3B	; 59
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	eb e3       	ldi	r30, 0x3B	; 59
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	48 2f       	mov	r20, r24
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	28 2f       	mov	r18, r24
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	02 2e       	mov	r0, r18
     334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_voidSetPinValue+0x7e>
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	0a 94       	dec	r0
     33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_voidSetPinValue+0x7a>
     33e:	84 2b       	or	r24, r20
     340:	8c 93       	st	X, r24
     342:	b3 c0       	rjmp	.+358    	; 0x4aa <DIO_voidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_u8pin); break;
     344:	a8 e3       	ldi	r26, 0x38	; 56
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	e8 e3       	ldi	r30, 0x38	; 56
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	48 2f       	mov	r20, r24
     350:	8a 81       	ldd	r24, Y+2	; 0x02
     352:	28 2f       	mov	r18, r24
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	02 2e       	mov	r0, r18
     35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_voidSetPinValue+0xa6>
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	0a 94       	dec	r0
     364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_voidSetPinValue+0xa2>
     366:	84 2b       	or	r24, r20
     368:	8c 93       	st	X, r24
     36a:	9f c0       	rjmp	.+318    	; 0x4aa <DIO_voidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_u8pin); break;
     36c:	a5 e3       	ldi	r26, 0x35	; 53
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	e5 e3       	ldi	r30, 0x35	; 53
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	48 2f       	mov	r20, r24
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	28 2f       	mov	r18, r24
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	02 2e       	mov	r0, r18
     384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_voidSetPinValue+0xce>
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	0a 94       	dec	r0
     38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_voidSetPinValue+0xca>
     38e:	84 2b       	or	r24, r20
     390:	8c 93       	st	X, r24
     392:	8b c0       	rjmp	.+278    	; 0x4aa <DIO_voidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_u8pin); break;
     394:	a2 e3       	ldi	r26, 0x32	; 50
     396:	b0 e0       	ldi	r27, 0x00	; 0
     398:	e2 e3       	ldi	r30, 0x32	; 50
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	48 2f       	mov	r20, r24
     3a0:	8a 81       	ldd	r24, Y+2	; 0x02
     3a2:	28 2f       	mov	r18, r24
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	02 2e       	mov	r0, r18
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_voidSetPinValue+0xf6>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	0a 94       	dec	r0
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_voidSetPinValue+0xf2>
     3b6:	84 2b       	or	r24, r20
     3b8:	8c 93       	st	X, r24
     3ba:	77 c0       	rjmp	.+238    	; 0x4aa <DIO_voidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_u8value)
     3bc:	8b 81       	ldd	r24, Y+3	; 0x03
     3be:	88 23       	and	r24, r24
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <DIO_voidSetPinValue+0x108>
     3c2:	73 c0       	rjmp	.+230    	; 0x4aa <DIO_voidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	28 2f       	mov	r18, r24
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	3d 83       	std	Y+5, r19	; 0x05
     3cc:	2c 83       	std	Y+4, r18	; 0x04
     3ce:	8c 81       	ldd	r24, Y+4	; 0x04
     3d0:	9d 81       	ldd	r25, Y+5	; 0x05
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	91 05       	cpc	r25, r1
     3d6:	59 f1       	breq	.+86     	; 0x42e <DIO_voidSetPinValue+0x172>
     3d8:	2c 81       	ldd	r18, Y+4	; 0x04
     3da:	3d 81       	ldd	r19, Y+5	; 0x05
     3dc:	22 30       	cpi	r18, 0x02	; 2
     3de:	31 05       	cpc	r19, r1
     3e0:	2c f4       	brge	.+10     	; 0x3ec <DIO_voidSetPinValue+0x130>
     3e2:	8c 81       	ldd	r24, Y+4	; 0x04
     3e4:	9d 81       	ldd	r25, Y+5	; 0x05
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	69 f0       	breq	.+26     	; 0x404 <DIO_voidSetPinValue+0x148>
     3ea:	5f c0       	rjmp	.+190    	; 0x4aa <DIO_voidSetPinValue+0x1ee>
     3ec:	2c 81       	ldd	r18, Y+4	; 0x04
     3ee:	3d 81       	ldd	r19, Y+5	; 0x05
     3f0:	22 30       	cpi	r18, 0x02	; 2
     3f2:	31 05       	cpc	r19, r1
     3f4:	89 f1       	breq	.+98     	; 0x458 <DIO_voidSetPinValue+0x19c>
     3f6:	8c 81       	ldd	r24, Y+4	; 0x04
     3f8:	9d 81       	ldd	r25, Y+5	; 0x05
     3fa:	83 30       	cpi	r24, 0x03	; 3
     3fc:	91 05       	cpc	r25, r1
     3fe:	09 f4       	brne	.+2      	; 0x402 <DIO_voidSetPinValue+0x146>
     400:	40 c0       	rjmp	.+128    	; 0x482 <DIO_voidSetPinValue+0x1c6>
     402:	53 c0       	rjmp	.+166    	; 0x4aa <DIO_voidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_u8pin); break;
     404:	ab e3       	ldi	r26, 0x3B	; 59
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	eb e3       	ldi	r30, 0x3B	; 59
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	48 2f       	mov	r20, r24
     410:	8a 81       	ldd	r24, Y+2	; 0x02
     412:	28 2f       	mov	r18, r24
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	02 2e       	mov	r0, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_voidSetPinValue+0x166>
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_voidSetPinValue+0x162>
     426:	80 95       	com	r24
     428:	84 23       	and	r24, r20
     42a:	8c 93       	st	X, r24
     42c:	3e c0       	rjmp	.+124    	; 0x4aa <DIO_voidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_u8pin); break;
     42e:	a8 e3       	ldi	r26, 0x38	; 56
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	e8 e3       	ldi	r30, 0x38	; 56
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	48 2f       	mov	r20, r24
     43a:	8a 81       	ldd	r24, Y+2	; 0x02
     43c:	28 2f       	mov	r18, r24
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	02 2e       	mov	r0, r18
     446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_voidSetPinValue+0x190>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	0a 94       	dec	r0
     44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_voidSetPinValue+0x18c>
     450:	80 95       	com	r24
     452:	84 23       	and	r24, r20
     454:	8c 93       	st	X, r24
     456:	29 c0       	rjmp	.+82     	; 0x4aa <DIO_voidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_u8pin); break;
     458:	a5 e3       	ldi	r26, 0x35	; 53
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e5 e3       	ldi	r30, 0x35	; 53
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	48 2f       	mov	r20, r24
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	28 2f       	mov	r18, r24
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	02 2e       	mov	r0, r18
     470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_voidSetPinValue+0x1ba>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_voidSetPinValue+0x1b6>
     47a:	80 95       	com	r24
     47c:	84 23       	and	r24, r20
     47e:	8c 93       	st	X, r24
     480:	14 c0       	rjmp	.+40     	; 0x4aa <DIO_voidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_u8pin); break;
     482:	a2 e3       	ldi	r26, 0x32	; 50
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e2 e3       	ldi	r30, 0x32	; 50
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	48 2f       	mov	r20, r24
     48e:	8a 81       	ldd	r24, Y+2	; 0x02
     490:	28 2f       	mov	r18, r24
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	02 2e       	mov	r0, r18
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_voidSetPinValue+0x1e4>
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	0a 94       	dec	r0
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_voidSetPinValue+0x1e0>
     4a4:	80 95       	com	r24
     4a6:	84 23       	and	r24, r20
     4a8:	8c 93       	st	X, r24
		
	}	
	
	
	
}
     4aa:	27 96       	adiw	r28, 0x07	; 7
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	cf 91       	pop	r28
     4b8:	df 91       	pop	r29
     4ba:	08 95       	ret

000004bc <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue			(u8 copy_u8port, u8 Copy_U8Pin)
{
     4bc:	df 93       	push	r29
     4be:	cf 93       	push	r28
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <DIO_u8GetPinValue+0x6>
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <DIO_u8GetPinValue+0x8>
     4c4:	0f 92       	push	r0
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	8a 83       	std	Y+2, r24	; 0x02
     4cc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcal_U8PinResult=0;
     4ce:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
     4d0:	8a 81       	ldd	r24, Y+2	; 0x02
     4d2:	28 2f       	mov	r18, r24
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	3d 83       	std	Y+5, r19	; 0x05
     4d8:	2c 83       	std	Y+4, r18	; 0x04
     4da:	4c 81       	ldd	r20, Y+4	; 0x04
     4dc:	5d 81       	ldd	r21, Y+5	; 0x05
     4de:	41 30       	cpi	r20, 0x01	; 1
     4e0:	51 05       	cpc	r21, r1
     4e2:	41 f1       	breq	.+80     	; 0x534 <DIO_u8GetPinValue+0x78>
     4e4:	8c 81       	ldd	r24, Y+4	; 0x04
     4e6:	9d 81       	ldd	r25, Y+5	; 0x05
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	91 05       	cpc	r25, r1
     4ec:	34 f4       	brge	.+12     	; 0x4fa <DIO_u8GetPinValue+0x3e>
     4ee:	2c 81       	ldd	r18, Y+4	; 0x04
     4f0:	3d 81       	ldd	r19, Y+5	; 0x05
     4f2:	21 15       	cp	r18, r1
     4f4:	31 05       	cpc	r19, r1
     4f6:	61 f0       	breq	.+24     	; 0x510 <DIO_u8GetPinValue+0x54>
     4f8:	52 c0       	rjmp	.+164    	; 0x59e <DIO_u8GetPinValue+0xe2>
     4fa:	4c 81       	ldd	r20, Y+4	; 0x04
     4fc:	5d 81       	ldd	r21, Y+5	; 0x05
     4fe:	42 30       	cpi	r20, 0x02	; 2
     500:	51 05       	cpc	r21, r1
     502:	51 f1       	breq	.+84     	; 0x558 <DIO_u8GetPinValue+0x9c>
     504:	8c 81       	ldd	r24, Y+4	; 0x04
     506:	9d 81       	ldd	r25, Y+5	; 0x05
     508:	83 30       	cpi	r24, 0x03	; 3
     50a:	91 05       	cpc	r25, r1
     50c:	b9 f1       	breq	.+110    	; 0x57c <DIO_u8GetPinValue+0xc0>
     50e:	47 c0       	rjmp	.+142    	; 0x59e <DIO_u8GetPinValue+0xe2>

			case PORTA :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
     510:	e9 e3       	ldi	r30, 0x39	; 57
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	28 2f       	mov	r18, r24
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	88 2f       	mov	r24, r24
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	a9 01       	movw	r20, r18
     522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_u8GetPinValue+0x6c>
     524:	55 95       	asr	r21
     526:	47 95       	ror	r20
     528:	8a 95       	dec	r24
     52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_u8GetPinValue+0x68>
     52c:	ca 01       	movw	r24, r20
     52e:	81 70       	andi	r24, 0x01	; 1
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	35 c0       	rjmp	.+106    	; 0x59e <DIO_u8GetPinValue+0xe2>
			case PORTB :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
     534:	e6 e3       	ldi	r30, 0x36	; 54
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	28 2f       	mov	r18, r24
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	8b 81       	ldd	r24, Y+3	; 0x03
     540:	88 2f       	mov	r24, r24
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	a9 01       	movw	r20, r18
     546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_u8GetPinValue+0x90>
     548:	55 95       	asr	r21
     54a:	47 95       	ror	r20
     54c:	8a 95       	dec	r24
     54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_u8GetPinValue+0x8c>
     550:	ca 01       	movw	r24, r20
     552:	81 70       	andi	r24, 0x01	; 1
     554:	89 83       	std	Y+1, r24	; 0x01
     556:	23 c0       	rjmp	.+70     	; 0x59e <DIO_u8GetPinValue+0xe2>
			case PORTC :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
     558:	e3 e3       	ldi	r30, 0x33	; 51
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	80 81       	ld	r24, Z
     55e:	28 2f       	mov	r18, r24
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	88 2f       	mov	r24, r24
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	a9 01       	movw	r20, r18
     56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_u8GetPinValue+0xb4>
     56c:	55 95       	asr	r21
     56e:	47 95       	ror	r20
     570:	8a 95       	dec	r24
     572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_u8GetPinValue+0xb0>
     574:	ca 01       	movw	r24, r20
     576:	81 70       	andi	r24, 0x01	; 1
     578:	89 83       	std	Y+1, r24	; 0x01
     57a:	11 c0       	rjmp	.+34     	; 0x59e <DIO_u8GetPinValue+0xe2>
			case PORTD :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
     57c:	e0 e3       	ldi	r30, 0x30	; 48
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	28 2f       	mov	r18, r24
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	8b 81       	ldd	r24, Y+3	; 0x03
     588:	88 2f       	mov	r24, r24
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a9 01       	movw	r20, r18
     58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_u8GetPinValue+0xd8>
     590:	55 95       	asr	r21
     592:	47 95       	ror	r20
     594:	8a 95       	dec	r24
     596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_u8GetPinValue+0xd4>
     598:	ca 01       	movw	r24, r20
     59a:	81 70       	andi	r24, 0x01	; 1
     59c:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
     59e:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	cf 91       	pop	r28
     5ac:	df 91       	pop	r29
     5ae:	08 95       	ret

000005b0 <DIO_voidTogglePin>:

void DIO_voidTogglePin			(u8 copy_u8port, u8 copy_U8pin)
{
     5b0:	df 93       	push	r29
     5b2:	cf 93       	push	r28
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <DIO_voidTogglePin+0x6>
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <DIO_voidTogglePin+0x8>
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_u8port)
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	28 2f       	mov	r18, r24
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	3c 83       	std	Y+4, r19	; 0x04
     5c8:	2b 83       	std	Y+3, r18	; 0x03
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	9c 81       	ldd	r25, Y+4	; 0x04
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	91 05       	cpc	r25, r1
     5d2:	49 f1       	breq	.+82     	; 0x626 <DIO_voidTogglePin+0x76>
     5d4:	2b 81       	ldd	r18, Y+3	; 0x03
     5d6:	3c 81       	ldd	r19, Y+4	; 0x04
     5d8:	22 30       	cpi	r18, 0x02	; 2
     5da:	31 05       	cpc	r19, r1
     5dc:	2c f4       	brge	.+10     	; 0x5e8 <DIO_voidTogglePin+0x38>
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
     5e0:	9c 81       	ldd	r25, Y+4	; 0x04
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	61 f0       	breq	.+24     	; 0x5fe <DIO_voidTogglePin+0x4e>
     5e6:	5a c0       	rjmp	.+180    	; 0x69c <DIO_voidTogglePin+0xec>
     5e8:	2b 81       	ldd	r18, Y+3	; 0x03
     5ea:	3c 81       	ldd	r19, Y+4	; 0x04
     5ec:	22 30       	cpi	r18, 0x02	; 2
     5ee:	31 05       	cpc	r19, r1
     5f0:	71 f1       	breq	.+92     	; 0x64e <DIO_voidTogglePin+0x9e>
     5f2:	8b 81       	ldd	r24, Y+3	; 0x03
     5f4:	9c 81       	ldd	r25, Y+4	; 0x04
     5f6:	83 30       	cpi	r24, 0x03	; 3
     5f8:	91 05       	cpc	r25, r1
     5fa:	e9 f1       	breq	.+122    	; 0x676 <DIO_voidTogglePin+0xc6>
     5fc:	4f c0       	rjmp	.+158    	; 0x69c <DIO_voidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_U8pin); break;
     5fe:	ab e3       	ldi	r26, 0x3B	; 59
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	eb e3       	ldi	r30, 0x3B	; 59
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	48 2f       	mov	r20, r24
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	28 2f       	mov	r18, r24
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	02 2e       	mov	r0, r18
     616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_voidTogglePin+0x6c>
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	0a 94       	dec	r0
     61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_voidTogglePin+0x68>
     620:	84 27       	eor	r24, r20
     622:	8c 93       	st	X, r24
     624:	3b c0       	rjmp	.+118    	; 0x69c <DIO_voidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_U8pin); break;
     626:	a8 e3       	ldi	r26, 0x38	; 56
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	e8 e3       	ldi	r30, 0x38	; 56
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	48 2f       	mov	r20, r24
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	28 2f       	mov	r18, r24
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	02 2e       	mov	r0, r18
     63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_voidTogglePin+0x94>
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	0a 94       	dec	r0
     646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_voidTogglePin+0x90>
     648:	84 27       	eor	r24, r20
     64a:	8c 93       	st	X, r24
     64c:	27 c0       	rjmp	.+78     	; 0x69c <DIO_voidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_U8pin); break;
     64e:	a5 e3       	ldi	r26, 0x35	; 53
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	e5 e3       	ldi	r30, 0x35	; 53
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	80 81       	ld	r24, Z
     658:	48 2f       	mov	r20, r24
     65a:	8a 81       	ldd	r24, Y+2	; 0x02
     65c:	28 2f       	mov	r18, r24
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	02 2e       	mov	r0, r18
     666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_voidTogglePin+0xbc>
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	0a 94       	dec	r0
     66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_voidTogglePin+0xb8>
     670:	84 27       	eor	r24, r20
     672:	8c 93       	st	X, r24
     674:	13 c0       	rjmp	.+38     	; 0x69c <DIO_voidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_U8pin); break;
     676:	a2 e3       	ldi	r26, 0x32	; 50
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e2 e3       	ldi	r30, 0x32	; 50
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	48 2f       	mov	r20, r24
     682:	8a 81       	ldd	r24, Y+2	; 0x02
     684:	28 2f       	mov	r18, r24
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	02 2e       	mov	r0, r18
     68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_voidTogglePin+0xe4>
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	0a 94       	dec	r0
     696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_voidTogglePin+0xe0>
     698:	84 27       	eor	r24, r20
     69a:	8c 93       	st	X, r24
		}

}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	cf 91       	pop	r28
     6a6:	df 91       	pop	r29
     6a8:	08 95       	ret

000006aa <TM_voidTimerInit>:

static u8 TM2OV_INTRRUPT_FLAG  =  INTERRUPT_ENABLE;
static u8 TM2CTC_INTRRUPT_FLAG  = INTERRUPT_ENABLE;

void TM_voidTimerInit(ST_TIMER_config_t * configurations)
{
     6aa:	df 93       	push	r29
     6ac:	cf 93       	push	r28
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <TM_voidTimerInit+0x6>
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	9a 83       	std	Y+2, r25	; 0x02
     6b6:	89 83       	std	Y+1, r24	; 0x01
    if( configurations->timer_no== TIMER0)
     6b8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ba:	fa 81       	ldd	r31, Y+2	; 0x02
     6bc:	80 81       	ld	r24, Z
     6be:	88 23       	and	r24, r24
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <TM_voidTimerInit+0x1a>
     6c2:	a8 c1       	rjmp	.+848    	; 0xa14 <__stack+0x1b5>
    {
        if( configurations->timer_mode==NORMAL)
     6c4:	e9 81       	ldd	r30, Y+1	; 0x01
     6c6:	fa 81       	ldd	r31, Y+2	; 0x02
     6c8:	81 81       	ldd	r24, Z+1	; 0x01
     6ca:	88 23       	and	r24, r24
     6cc:	79 f4       	brne	.+30     	; 0x6ec <TM_voidTimerInit+0x42>
        {

            CLR_BIT(TCCR0,WGM00);
     6ce:	a3 e5       	ldi	r26, 0x53	; 83
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	e3 e5       	ldi	r30, 0x53	; 83
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	8f 7b       	andi	r24, 0xBF	; 191
     6da:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,WGM01);
     6dc:	a3 e5       	ldi	r26, 0x53	; 83
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	e3 e5       	ldi	r30, 0x53	; 83
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	87 7f       	andi	r24, 0xF7	; 247
     6e8:	8c 93       	st	X, r24
     6ea:	ac c0       	rjmp	.+344    	; 0x844 <TM_voidTimerInit+0x19a>

        }
        else if( configurations->timer_mode==CTC)
     6ec:	e9 81       	ldd	r30, Y+1	; 0x01
     6ee:	fa 81       	ldd	r31, Y+2	; 0x02
     6f0:	81 81       	ldd	r24, Z+1	; 0x01
     6f2:	81 30       	cpi	r24, 0x01	; 1
     6f4:	89 f5       	brne	.+98     	; 0x758 <TM_voidTimerInit+0xae>
        {

            CLR_BIT(TCCR0,WGM00);
     6f6:	a3 e5       	ldi	r26, 0x53	; 83
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e3 e5       	ldi	r30, 0x53	; 83
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	8f 7b       	andi	r24, 0xBF	; 191
     702:	8c 93       	st	X, r24
            SET_BIT(TCCR0,WGM01);
     704:	a3 e5       	ldi	r26, 0x53	; 83
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	e3 e5       	ldi	r30, 0x53	; 83
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	88 60       	ori	r24, 0x08	; 8
     710:	8c 93       	st	X, r24
            OCR0= OCR_VALUE_CTCMode;
     712:	ec e5       	ldi	r30, 0x5C	; 92
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	8c ed       	ldi	r24, 0xDC	; 220
     718:	80 83       	st	Z, r24
            if(configurations->interrupt_mode == INTERRUPT_ENABLE)
     71a:	e9 81       	ldd	r30, Y+1	; 0x01
     71c:	fa 81       	ldd	r31, Y+2	; 0x02
     71e:	84 81       	ldd	r24, Z+4	; 0x04
     720:	88 23       	and	r24, r24
     722:	41 f4       	brne	.+16     	; 0x734 <TM_voidTimerInit+0x8a>
                SET_BIT(TIMSK, OCIE0);
     724:	a9 e5       	ldi	r26, 0x59	; 89
     726:	b0 e0       	ldi	r27, 0x00	; 0
     728:	e9 e5       	ldi	r30, 0x59	; 89
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
     72e:	82 60       	ori	r24, 0x02	; 2
     730:	8c 93       	st	X, r24
     732:	03 c0       	rjmp	.+6      	; 0x73a <TM_voidTimerInit+0x90>
            else
                TM0CTC_INTRRUPT_FLAG=INTERRUPT_DISABLE;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 75 00 	sts	0x0075, r24
        // WAVE GENERATOR ON PINB.3
            CLR_BIT(TCCR0,COM01);
     73a:	a3 e5       	ldi	r26, 0x53	; 83
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e3 e5       	ldi	r30, 0x53	; 83
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	80 81       	ld	r24, Z
     744:	8f 7d       	andi	r24, 0xDF	; 223
     746:	8c 93       	st	X, r24
            SET_BIT(TCCR0,COM00);
     748:	a3 e5       	ldi	r26, 0x53	; 83
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e3 e5       	ldi	r30, 0x53	; 83
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	80 61       	ori	r24, 0x10	; 16
     754:	8c 93       	st	X, r24
     756:	76 c0       	rjmp	.+236    	; 0x844 <TM_voidTimerInit+0x19a>
        }
        else if( configurations->timer_mode==PWM)
     758:	e9 81       	ldd	r30, Y+1	; 0x01
     75a:	fa 81       	ldd	r31, Y+2	; 0x02
     75c:	81 81       	ldd	r24, Z+1	; 0x01
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	b9 f5       	brne	.+110    	; 0x7d0 <TM_voidTimerInit+0x126>
        {
            SET_BIT(TCCR0,WGM00);
     762:	a3 e5       	ldi	r26, 0x53	; 83
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	e3 e5       	ldi	r30, 0x53	; 83
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	80 64       	ori	r24, 0x40	; 64
     76e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,WGM01);
     770:	a3 e5       	ldi	r26, 0x53	; 83
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	e3 e5       	ldi	r30, 0x53	; 83
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	87 7f       	andi	r24, 0xF7	; 247
     77c:	8c 93       	st	X, r24
            if( configurations->pwm_mode == NON_INVERTED)
     77e:	e9 81       	ldd	r30, Y+1	; 0x01
     780:	fa 81       	ldd	r31, Y+2	; 0x02
     782:	83 81       	ldd	r24, Z+3	; 0x03
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	79 f4       	brne	.+30     	; 0x7a6 <TM_voidTimerInit+0xfc>
            {
                SET_BIT(TCCR0, COM01);
     788:	a3 e5       	ldi	r26, 0x53	; 83
     78a:	b0 e0       	ldi	r27, 0x00	; 0
     78c:	e3 e5       	ldi	r30, 0x53	; 83
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	80 62       	ori	r24, 0x20	; 32
     794:	8c 93       	st	X, r24
                CLR_BIT(TCCR0, COM00);                
     796:	a3 e5       	ldi	r26, 0x53	; 83
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	e3 e5       	ldi	r30, 0x53	; 83
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	8f 7e       	andi	r24, 0xEF	; 239
     7a2:	8c 93       	st	X, r24
     7a4:	4f c0       	rjmp	.+158    	; 0x844 <TM_voidTimerInit+0x19a>
            }
            else if( configurations->pwm_mode==INVERTED)
     7a6:	e9 81       	ldd	r30, Y+1	; 0x01
     7a8:	fa 81       	ldd	r31, Y+2	; 0x02
     7aa:	83 81       	ldd	r24, Z+3	; 0x03
     7ac:	88 23       	and	r24, r24
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <TM_voidTimerInit+0x108>
     7b0:	49 c0       	rjmp	.+146    	; 0x844 <TM_voidTimerInit+0x19a>
            {
                SET_BIT(TCCR0, COM01);
     7b2:	a3 e5       	ldi	r26, 0x53	; 83
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	e3 e5       	ldi	r30, 0x53	; 83
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	80 62       	ori	r24, 0x20	; 32
     7be:	8c 93       	st	X, r24
                SET_BIT(TCCR0, COM00);
     7c0:	a3 e5       	ldi	r26, 0x53	; 83
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e3 e5       	ldi	r30, 0x53	; 83
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	80 61       	ori	r24, 0x10	; 16
     7cc:	8c 93       	st	X, r24
     7ce:	3a c0       	rjmp	.+116    	; 0x844 <TM_voidTimerInit+0x19a>
            }
        }
        else if( configurations->timer_mode==FAST_PWM)
     7d0:	e9 81       	ldd	r30, Y+1	; 0x01
     7d2:	fa 81       	ldd	r31, Y+2	; 0x02
     7d4:	81 81       	ldd	r24, Z+1	; 0x01
     7d6:	83 30       	cpi	r24, 0x03	; 3
     7d8:	a9 f5       	brne	.+106    	; 0x844 <TM_voidTimerInit+0x19a>
        {
            SET_BIT(TCCR0,WGM00);
     7da:	a3 e5       	ldi	r26, 0x53	; 83
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 e5       	ldi	r30, 0x53	; 83
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	80 64       	ori	r24, 0x40	; 64
     7e6:	8c 93       	st	X, r24
            SET_BIT(TCCR0,WGM01);
     7e8:	a3 e5       	ldi	r26, 0x53	; 83
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	e3 e5       	ldi	r30, 0x53	; 83
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	88 60       	ori	r24, 0x08	; 8
     7f4:	8c 93       	st	X, r24
            if( configurations->pwm_mode == NON_INVERTED)
     7f6:	e9 81       	ldd	r30, Y+1	; 0x01
     7f8:	fa 81       	ldd	r31, Y+2	; 0x02
     7fa:	83 81       	ldd	r24, Z+3	; 0x03
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	79 f4       	brne	.+30     	; 0x81e <TM_voidTimerInit+0x174>
            {
                SET_BIT(TCCR0, COM01);
     800:	a3 e5       	ldi	r26, 0x53	; 83
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	e3 e5       	ldi	r30, 0x53	; 83
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	80 62       	ori	r24, 0x20	; 32
     80c:	8c 93       	st	X, r24
                CLR_BIT(TCCR0, COM00);                
     80e:	a3 e5       	ldi	r26, 0x53	; 83
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	e3 e5       	ldi	r30, 0x53	; 83
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	8f 7e       	andi	r24, 0xEF	; 239
     81a:	8c 93       	st	X, r24
     81c:	13 c0       	rjmp	.+38     	; 0x844 <TM_voidTimerInit+0x19a>
            }
            else if( configurations->pwm_mode==INVERTED)
     81e:	e9 81       	ldd	r30, Y+1	; 0x01
     820:	fa 81       	ldd	r31, Y+2	; 0x02
     822:	83 81       	ldd	r24, Z+3	; 0x03
     824:	88 23       	and	r24, r24
     826:	71 f4       	brne	.+28     	; 0x844 <TM_voidTimerInit+0x19a>
            {
                SET_BIT(TCCR0, COM01);
     828:	a3 e5       	ldi	r26, 0x53	; 83
     82a:	b0 e0       	ldi	r27, 0x00	; 0
     82c:	e3 e5       	ldi	r30, 0x53	; 83
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	80 62       	ori	r24, 0x20	; 32
     834:	8c 93       	st	X, r24
                SET_BIT(TCCR0, COM00);
     836:	a3 e5       	ldi	r26, 0x53	; 83
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	e3 e5       	ldi	r30, 0x53	; 83
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	80 61       	ori	r24, 0x10	; 16
     842:	8c 93       	st	X, r24
        else
        {

        }

        if( configurations->timer_clk == NO_CLOCK)
     844:	e9 81       	ldd	r30, Y+1	; 0x01
     846:	fa 81       	ldd	r31, Y+2	; 0x02
     848:	82 81       	ldd	r24, Z+2	; 0x02
     84a:	88 23       	and	r24, r24
     84c:	b1 f4       	brne	.+44     	; 0x87a <__stack+0x1b>
        {
            CLR_BIT(TCCR0,CS00);
     84e:	a3 e5       	ldi	r26, 0x53	; 83
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e3 e5       	ldi	r30, 0x53	; 83
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	8e 7f       	andi	r24, 0xFE	; 254
     85a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,CS01);
     85c:	a3 e5       	ldi	r26, 0x53	; 83
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	e3 e5       	ldi	r30, 0x53	; 83
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	8d 7f       	andi	r24, 0xFD	; 253
     868:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,CS02);
     86a:	a3 e5       	ldi	r26, 0x53	; 83
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	e3 e5       	ldi	r30, 0x53	; 83
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	8b 7f       	andi	r24, 0xFB	; 251
     876:	8c 93       	st	X, r24
     878:	bc c0       	rjmp	.+376    	; 0x9f2 <__stack+0x193>
        }
        else if( configurations->timer_clk == CLK)
     87a:	e9 81       	ldd	r30, Y+1	; 0x01
     87c:	fa 81       	ldd	r31, Y+2	; 0x02
     87e:	82 81       	ldd	r24, Z+2	; 0x02
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	b1 f4       	brne	.+44     	; 0x8b0 <__stack+0x51>
        {
            SET_BIT(TCCR0,CS00);
     884:	a3 e5       	ldi	r26, 0x53	; 83
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e3 e5       	ldi	r30, 0x53	; 83
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	81 60       	ori	r24, 0x01	; 1
     890:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,CS01);
     892:	a3 e5       	ldi	r26, 0x53	; 83
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	e3 e5       	ldi	r30, 0x53	; 83
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	8d 7f       	andi	r24, 0xFD	; 253
     89e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,CS02);
     8a0:	a3 e5       	ldi	r26, 0x53	; 83
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	e3 e5       	ldi	r30, 0x53	; 83
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	8b 7f       	andi	r24, 0xFB	; 251
     8ac:	8c 93       	st	X, r24
     8ae:	a1 c0       	rjmp	.+322    	; 0x9f2 <__stack+0x193>
        }
        else if( configurations->timer_clk == CLK_8)
     8b0:	e9 81       	ldd	r30, Y+1	; 0x01
     8b2:	fa 81       	ldd	r31, Y+2	; 0x02
     8b4:	82 81       	ldd	r24, Z+2	; 0x02
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	b1 f4       	brne	.+44     	; 0x8e6 <__stack+0x87>
        {
            CLR_BIT(TCCR0,CS00);
     8ba:	a3 e5       	ldi	r26, 0x53	; 83
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e3 e5       	ldi	r30, 0x53	; 83
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	8e 7f       	andi	r24, 0xFE	; 254
     8c6:	8c 93       	st	X, r24
            SET_BIT(TCCR0,CS01);
     8c8:	a3 e5       	ldi	r26, 0x53	; 83
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	e3 e5       	ldi	r30, 0x53	; 83
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	82 60       	ori	r24, 0x02	; 2
     8d4:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,CS02);
     8d6:	a3 e5       	ldi	r26, 0x53	; 83
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	e3 e5       	ldi	r30, 0x53	; 83
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	8b 7f       	andi	r24, 0xFB	; 251
     8e2:	8c 93       	st	X, r24
     8e4:	86 c0       	rjmp	.+268    	; 0x9f2 <__stack+0x193>
        }
        else if( configurations->timer_clk == CLK_64)
     8e6:	e9 81       	ldd	r30, Y+1	; 0x01
     8e8:	fa 81       	ldd	r31, Y+2	; 0x02
     8ea:	82 81       	ldd	r24, Z+2	; 0x02
     8ec:	83 30       	cpi	r24, 0x03	; 3
     8ee:	b1 f4       	brne	.+44     	; 0x91c <__stack+0xbd>
        {
            SET_BIT(TCCR0,CS00);
     8f0:	a3 e5       	ldi	r26, 0x53	; 83
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	e3 e5       	ldi	r30, 0x53	; 83
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	81 60       	ori	r24, 0x01	; 1
     8fc:	8c 93       	st	X, r24
            SET_BIT(TCCR0,CS01);
     8fe:	a3 e5       	ldi	r26, 0x53	; 83
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	e3 e5       	ldi	r30, 0x53	; 83
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	82 60       	ori	r24, 0x02	; 2
     90a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,CS02);            
     90c:	a3 e5       	ldi	r26, 0x53	; 83
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	e3 e5       	ldi	r30, 0x53	; 83
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	8b 7f       	andi	r24, 0xFB	; 251
     918:	8c 93       	st	X, r24
     91a:	6b c0       	rjmp	.+214    	; 0x9f2 <__stack+0x193>
        }

        else if( configurations->timer_clk  == CLK_256)
     91c:	e9 81       	ldd	r30, Y+1	; 0x01
     91e:	fa 81       	ldd	r31, Y+2	; 0x02
     920:	82 81       	ldd	r24, Z+2	; 0x02
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	b1 f4       	brne	.+44     	; 0x952 <__stack+0xf3>
        {

            CLR_BIT(TCCR0,CS00);
     926:	a3 e5       	ldi	r26, 0x53	; 83
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	e3 e5       	ldi	r30, 0x53	; 83
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	8e 7f       	andi	r24, 0xFE	; 254
     932:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,CS01);
     934:	a3 e5       	ldi	r26, 0x53	; 83
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e3 e5       	ldi	r30, 0x53	; 83
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	8d 7f       	andi	r24, 0xFD	; 253
     940:	8c 93       	st	X, r24
            SET_BIT(TCCR0,CS02);
     942:	a3 e5       	ldi	r26, 0x53	; 83
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e3 e5       	ldi	r30, 0x53	; 83
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	84 60       	ori	r24, 0x04	; 4
     94e:	8c 93       	st	X, r24
     950:	50 c0       	rjmp	.+160    	; 0x9f2 <__stack+0x193>
        }
        else if( configurations->timer_clk == CLK_1024)
     952:	e9 81       	ldd	r30, Y+1	; 0x01
     954:	fa 81       	ldd	r31, Y+2	; 0x02
     956:	82 81       	ldd	r24, Z+2	; 0x02
     958:	85 30       	cpi	r24, 0x05	; 5
     95a:	b1 f4       	brne	.+44     	; 0x988 <__stack+0x129>
        {
            SET_BIT(TCCR0,CS00);
     95c:	a3 e5       	ldi	r26, 0x53	; 83
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	e3 e5       	ldi	r30, 0x53	; 83
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	81 60       	ori	r24, 0x01	; 1
     968:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,CS01);
     96a:	a3 e5       	ldi	r26, 0x53	; 83
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	e3 e5       	ldi	r30, 0x53	; 83
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	8d 7f       	andi	r24, 0xFD	; 253
     976:	8c 93       	st	X, r24
            SET_BIT(TCCR0,CS02);
     978:	a3 e5       	ldi	r26, 0x53	; 83
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	e3 e5       	ldi	r30, 0x53	; 83
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	84 60       	ori	r24, 0x04	; 4
     984:	8c 93       	st	X, r24
     986:	35 c0       	rjmp	.+106    	; 0x9f2 <__stack+0x193>
        }

        else if( configurations->timer_clk  == EXTERNAL_CLK_FALLING)
     988:	e9 81       	ldd	r30, Y+1	; 0x01
     98a:	fa 81       	ldd	r31, Y+2	; 0x02
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	86 30       	cpi	r24, 0x06	; 6
     990:	b1 f4       	brne	.+44     	; 0x9be <__stack+0x15f>
        {
            CLR_BIT(TCCR0,CS00);
     992:	a3 e5       	ldi	r26, 0x53	; 83
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e3 e5       	ldi	r30, 0x53	; 83
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	8e 7f       	andi	r24, 0xFE	; 254
     99e:	8c 93       	st	X, r24
            SET_BIT(TCCR0,CS01);
     9a0:	a3 e5       	ldi	r26, 0x53	; 83
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	e3 e5       	ldi	r30, 0x53	; 83
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	82 60       	ori	r24, 0x02	; 2
     9ac:	8c 93       	st	X, r24
            SET_BIT(TCCR0,CS02);
     9ae:	a3 e5       	ldi	r26, 0x53	; 83
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	e3 e5       	ldi	r30, 0x53	; 83
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	84 60       	ori	r24, 0x04	; 4
     9ba:	8c 93       	st	X, r24
     9bc:	1a c0       	rjmp	.+52     	; 0x9f2 <__stack+0x193>
        }

        else if( configurations->timer_clk  == EXTERNAL_CLK_RISING)
     9be:	e9 81       	ldd	r30, Y+1	; 0x01
     9c0:	fa 81       	ldd	r31, Y+2	; 0x02
     9c2:	82 81       	ldd	r24, Z+2	; 0x02
     9c4:	87 30       	cpi	r24, 0x07	; 7
     9c6:	a9 f4       	brne	.+42     	; 0x9f2 <__stack+0x193>
        {
            SET_BIT(TCCR0,CS00);
     9c8:	a3 e5       	ldi	r26, 0x53	; 83
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	e3 e5       	ldi	r30, 0x53	; 83
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	81 60       	ori	r24, 0x01	; 1
     9d4:	8c 93       	st	X, r24
            SET_BIT(TCCR0,CS01);
     9d6:	a3 e5       	ldi	r26, 0x53	; 83
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e3 e5       	ldi	r30, 0x53	; 83
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	82 60       	ori	r24, 0x02	; 2
     9e2:	8c 93       	st	X, r24
            SET_BIT(TCCR0,CS02);            
     9e4:	a3 e5       	ldi	r26, 0x53	; 83
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	e3 e5       	ldi	r30, 0x53	; 83
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	84 60       	ori	r24, 0x04	; 4
     9f0:	8c 93       	st	X, r24
        }

        if(configurations->interrupt_mode == INTERRUPT_ENABLE)
     9f2:	e9 81       	ldd	r30, Y+1	; 0x01
     9f4:	fa 81       	ldd	r31, Y+2	; 0x02
     9f6:	84 81       	ldd	r24, Z+4	; 0x04
     9f8:	88 23       	and	r24, r24
     9fa:	41 f4       	brne	.+16     	; 0xa0c <__stack+0x1ad>
        {
            SET_BIT(TIMSK, TOIE0);
     9fc:	a9 e5       	ldi	r26, 0x59	; 89
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	e9 e5       	ldi	r30, 0x59	; 89
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	8c 93       	st	X, r24
     a0a:	d2 c5       	rjmp	.+2980   	; 0x15b0 <__stack+0xd51>
        }
        else
        {
            TM0OV_INTRRUPT_FLAG=INTERRUPT_DISABLE;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 74 00 	sts	0x0074, r24
     a12:	ce c5       	rjmp	.+2972   	; 0x15b0 <__stack+0xd51>
    }
        



    else if( configurations->timer_no== TIMER1)
     a14:	e9 81       	ldd	r30, Y+1	; 0x01
     a16:	fa 81       	ldd	r31, Y+2	; 0x02
     a18:	80 81       	ld	r24, Z
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__stack+0x1c1>
     a1e:	1f c4       	rjmp	.+2110   	; 0x125e <__stack+0x9ff>
    {

        if( configurations->timer_mode==T1_NORMAL)
     a20:	e9 81       	ldd	r30, Y+1	; 0x01
     a22:	fa 81       	ldd	r31, Y+2	; 0x02
     a24:	81 81       	ldd	r24, Z+1	; 0x01
     a26:	88 23       	and	r24, r24
     a28:	49 f5       	brne	.+82     	; 0xa7c <__stack+0x21d>
        {
            CLR_BIT(TCCR1,WGM10);
     a2a:	ae e4       	ldi	r26, 0x4E	; 78
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	ee e4       	ldi	r30, 0x4E	; 78
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	91 81       	ldd	r25, Z+1	; 0x01
     a36:	9e 7f       	andi	r25, 0xFE	; 254
     a38:	11 96       	adiw	r26, 0x01	; 1
     a3a:	9c 93       	st	X, r25
     a3c:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM11);
     a3e:	ae e4       	ldi	r26, 0x4E	; 78
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	ee e4       	ldi	r30, 0x4E	; 78
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	9d 7f       	andi	r25, 0xFD	; 253
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	9c 93       	st	X, r25
     a50:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM12);
     a52:	ae e4       	ldi	r26, 0x4E	; 78
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	ee e4       	ldi	r30, 0x4E	; 78
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 81       	ld	r24, Z
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	11 96       	adiw	r26, 0x01	; 1
     a62:	9c 93       	st	X, r25
     a64:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM13);
     a66:	ae e4       	ldi	r26, 0x4E	; 78
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	ee e4       	ldi	r30, 0x4E	; 78
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	8f 7e       	andi	r24, 0xEF	; 239
     a74:	11 96       	adiw	r26, 0x01	; 1
     a76:	9c 93       	st	X, r25
     a78:	8e 93       	st	-X, r24
     a7a:	c1 c2       	rjmp	.+1410   	; 0xffe <__stack+0x79f>
        }    
        else if( configurations->timer_mode==PWM_8BIT)
     a7c:	e9 81       	ldd	r30, Y+1	; 0x01
     a7e:	fa 81       	ldd	r31, Y+2	; 0x02
     a80:	81 81       	ldd	r24, Z+1	; 0x01
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	49 f5       	brne	.+82     	; 0xad8 <__stack+0x279>
        {
            SET_BIT(TCCR1,WGM10);
     a86:	ae e4       	ldi	r26, 0x4E	; 78
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	ee e4       	ldi	r30, 0x4E	; 78
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	91 60       	ori	r25, 0x01	; 1
     a94:	11 96       	adiw	r26, 0x01	; 1
     a96:	9c 93       	st	X, r25
     a98:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM11);
     a9a:	ae e4       	ldi	r26, 0x4E	; 78
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	ee e4       	ldi	r30, 0x4E	; 78
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	9d 7f       	andi	r25, 0xFD	; 253
     aa8:	11 96       	adiw	r26, 0x01	; 1
     aaa:	9c 93       	st	X, r25
     aac:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM12);
     aae:	ae e4       	ldi	r26, 0x4E	; 78
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	ee e4       	ldi	r30, 0x4E	; 78
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
     aba:	87 7f       	andi	r24, 0xF7	; 247
     abc:	11 96       	adiw	r26, 0x01	; 1
     abe:	9c 93       	st	X, r25
     ac0:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM13);            
     ac2:	ae e4       	ldi	r26, 0x4E	; 78
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	ee e4       	ldi	r30, 0x4E	; 78
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	8f 7e       	andi	r24, 0xEF	; 239
     ad0:	11 96       	adiw	r26, 0x01	; 1
     ad2:	9c 93       	st	X, r25
     ad4:	8e 93       	st	-X, r24
     ad6:	93 c2       	rjmp	.+1318   	; 0xffe <__stack+0x79f>
        }      

        else if( configurations->timer_mode==PWM_9BIT  )
     ad8:	e9 81       	ldd	r30, Y+1	; 0x01
     ada:	fa 81       	ldd	r31, Y+2	; 0x02
     adc:	81 81       	ldd	r24, Z+1	; 0x01
     ade:	83 30       	cpi	r24, 0x03	; 3
     ae0:	49 f5       	brne	.+82     	; 0xb34 <__stack+0x2d5>
        {
            CLR_BIT(TCCR1,WGM10);
     ae2:	ae e4       	ldi	r26, 0x4E	; 78
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	ee e4       	ldi	r30, 0x4E	; 78
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	91 81       	ldd	r25, Z+1	; 0x01
     aee:	9e 7f       	andi	r25, 0xFE	; 254
     af0:	11 96       	adiw	r26, 0x01	; 1
     af2:	9c 93       	st	X, r25
     af4:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM11);
     af6:	ae e4       	ldi	r26, 0x4E	; 78
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	ee e4       	ldi	r30, 0x4E	; 78
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	91 81       	ldd	r25, Z+1	; 0x01
     b02:	92 60       	ori	r25, 0x02	; 2
     b04:	11 96       	adiw	r26, 0x01	; 1
     b06:	9c 93       	st	X, r25
     b08:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM12);
     b0a:	ae e4       	ldi	r26, 0x4E	; 78
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	ee e4       	ldi	r30, 0x4E	; 78
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	91 81       	ldd	r25, Z+1	; 0x01
     b16:	87 7f       	andi	r24, 0xF7	; 247
     b18:	11 96       	adiw	r26, 0x01	; 1
     b1a:	9c 93       	st	X, r25
     b1c:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM13);            
     b1e:	ae e4       	ldi	r26, 0x4E	; 78
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	ee e4       	ldi	r30, 0x4E	; 78
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	91 81       	ldd	r25, Z+1	; 0x01
     b2a:	8f 7e       	andi	r24, 0xEF	; 239
     b2c:	11 96       	adiw	r26, 0x01	; 1
     b2e:	9c 93       	st	X, r25
     b30:	8e 93       	st	-X, r24
     b32:	65 c2       	rjmp	.+1226   	; 0xffe <__stack+0x79f>
        }
        else if( configurations->timer_mode==PWM_10BIT )
     b34:	e9 81       	ldd	r30, Y+1	; 0x01
     b36:	fa 81       	ldd	r31, Y+2	; 0x02
     b38:	81 81       	ldd	r24, Z+1	; 0x01
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	49 f5       	brne	.+82     	; 0xb90 <__stack+0x331>
        {
            SET_BIT(TCCR1,WGM10);
     b3e:	ae e4       	ldi	r26, 0x4E	; 78
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	ee e4       	ldi	r30, 0x4E	; 78
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	91 81       	ldd	r25, Z+1	; 0x01
     b4a:	91 60       	ori	r25, 0x01	; 1
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM11);
     b52:	ae e4       	ldi	r26, 0x4E	; 78
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ee e4       	ldi	r30, 0x4E	; 78
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	92 60       	ori	r25, 0x02	; 2
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	9c 93       	st	X, r25
     b64:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM12);
     b66:	ae e4       	ldi	r26, 0x4E	; 78
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	ee e4       	ldi	r30, 0x4E	; 78
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	87 7f       	andi	r24, 0xF7	; 247
     b74:	11 96       	adiw	r26, 0x01	; 1
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM13);            
     b7a:	ae e4       	ldi	r26, 0x4E	; 78
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ee e4       	ldi	r30, 0x4E	; 78
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	91 81       	ldd	r25, Z+1	; 0x01
     b86:	8f 7e       	andi	r24, 0xEF	; 239
     b88:	11 96       	adiw	r26, 0x01	; 1
     b8a:	9c 93       	st	X, r25
     b8c:	8e 93       	st	-X, r24
     b8e:	37 c2       	rjmp	.+1134   	; 0xffe <__stack+0x79f>
        }  
        else if( configurations->timer_mode==T1_CTC )
     b90:	e9 81       	ldd	r30, Y+1	; 0x01
     b92:	fa 81       	ldd	r31, Y+2	; 0x02
     b94:	81 81       	ldd	r24, Z+1	; 0x01
     b96:	85 30       	cpi	r24, 0x05	; 5
     b98:	c9 f5       	brne	.+114    	; 0xc0c <__stack+0x3ad>
        {
            CLR_BIT(TCCR1,WGM10);
     b9a:	ae e4       	ldi	r26, 0x4E	; 78
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ee e4       	ldi	r30, 0x4E	; 78
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	9e 7f       	andi	r25, 0xFE	; 254
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	9c 93       	st	X, r25
     bac:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM11);
     bae:	ae e4       	ldi	r26, 0x4E	; 78
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	ee e4       	ldi	r30, 0x4E	; 78
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	91 81       	ldd	r25, Z+1	; 0x01
     bba:	9d 7f       	andi	r25, 0xFD	; 253
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM12);
     bc2:	ae e4       	ldi	r26, 0x4E	; 78
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	ee e4       	ldi	r30, 0x4E	; 78
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	88 60       	ori	r24, 0x08	; 8
     bd0:	11 96       	adiw	r26, 0x01	; 1
     bd2:	9c 93       	st	X, r25
     bd4:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM13);           
     bd6:	ae e4       	ldi	r26, 0x4E	; 78
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	ee e4       	ldi	r30, 0x4E	; 78
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	91 81       	ldd	r25, Z+1	; 0x01
     be2:	8f 7e       	andi	r24, 0xEF	; 239
     be4:	11 96       	adiw	r26, 0x01	; 1
     be6:	9c 93       	st	X, r25
     be8:	8e 93       	st	-X, r24
            if(configurations->interrupt_mode == INTERRUPT_ENABLE)               
     bea:	e9 81       	ldd	r30, Y+1	; 0x01
     bec:	fa 81       	ldd	r31, Y+2	; 0x02
     bee:	84 81       	ldd	r24, Z+4	; 0x04
     bf0:	88 23       	and	r24, r24
     bf2:	41 f4       	brne	.+16     	; 0xc04 <__stack+0x3a5>
                SET_BIT(TIMSK, OCIE1A);
     bf4:	a9 e5       	ldi	r26, 0x59	; 89
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e9 e5       	ldi	r30, 0x59	; 89
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	80 61       	ori	r24, 0x10	; 16
     c00:	8c 93       	st	X, r24
     c02:	fd c1       	rjmp	.+1018   	; 0xffe <__stack+0x79f>
            else
              TM1CTC_INTRRUPT_FLAG= INTERRUPT_DISABLE;  
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 77 00 	sts	0x0077, r24
     c0a:	f9 c1       	rjmp	.+1010   	; 0xffe <__stack+0x79f>
            /*WE CAN USE OCR1B In Here */                      
        }   
        else if( configurations->timer_mode==FAST_PWM_8BIT )
     c0c:	e9 81       	ldd	r30, Y+1	; 0x01
     c0e:	fa 81       	ldd	r31, Y+2	; 0x02
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	86 30       	cpi	r24, 0x06	; 6
     c14:	49 f5       	brne	.+82     	; 0xc68 <__stack+0x409>
        {
            SET_BIT(TCCR1,WGM10);
     c16:	ae e4       	ldi	r26, 0x4E	; 78
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ee e4       	ldi	r30, 0x4E	; 78
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	91 81       	ldd	r25, Z+1	; 0x01
     c22:	91 60       	ori	r25, 0x01	; 1
     c24:	11 96       	adiw	r26, 0x01	; 1
     c26:	9c 93       	st	X, r25
     c28:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM11);
     c2a:	ae e4       	ldi	r26, 0x4E	; 78
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	ee e4       	ldi	r30, 0x4E	; 78
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	9d 7f       	andi	r25, 0xFD	; 253
     c38:	11 96       	adiw	r26, 0x01	; 1
     c3a:	9c 93       	st	X, r25
     c3c:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM12);
     c3e:	ae e4       	ldi	r26, 0x4E	; 78
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	ee e4       	ldi	r30, 0x4E	; 78
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	88 60       	ori	r24, 0x08	; 8
     c4c:	11 96       	adiw	r26, 0x01	; 1
     c4e:	9c 93       	st	X, r25
     c50:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM13);            
     c52:	ae e4       	ldi	r26, 0x4E	; 78
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ee e4       	ldi	r30, 0x4E	; 78
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	8f 7e       	andi	r24, 0xEF	; 239
     c60:	11 96       	adiw	r26, 0x01	; 1
     c62:	9c 93       	st	X, r25
     c64:	8e 93       	st	-X, r24
     c66:	cb c1       	rjmp	.+918    	; 0xffe <__stack+0x79f>
        } 

        else if( configurations->timer_mode==FAST_PWM_9BIT )
     c68:	e9 81       	ldd	r30, Y+1	; 0x01
     c6a:	fa 81       	ldd	r31, Y+2	; 0x02
     c6c:	81 81       	ldd	r24, Z+1	; 0x01
     c6e:	87 30       	cpi	r24, 0x07	; 7
     c70:	49 f5       	brne	.+82     	; 0xcc4 <__stack+0x465>
        {
            CLR_BIT(TCCR1,WGM10);
     c72:	ae e4       	ldi	r26, 0x4E	; 78
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ee e4       	ldi	r30, 0x4E	; 78
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	9e 7f       	andi	r25, 0xFE	; 254
     c80:	11 96       	adiw	r26, 0x01	; 1
     c82:	9c 93       	st	X, r25
     c84:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM11);
     c86:	ae e4       	ldi	r26, 0x4E	; 78
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ee e4       	ldi	r30, 0x4E	; 78
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	92 60       	ori	r25, 0x02	; 2
     c94:	11 96       	adiw	r26, 0x01	; 1
     c96:	9c 93       	st	X, r25
     c98:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM12);
     c9a:	ae e4       	ldi	r26, 0x4E	; 78
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ee e4       	ldi	r30, 0x4E	; 78
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	88 60       	ori	r24, 0x08	; 8
     ca8:	11 96       	adiw	r26, 0x01	; 1
     caa:	9c 93       	st	X, r25
     cac:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM13);            
     cae:	ae e4       	ldi	r26, 0x4E	; 78
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ee e4       	ldi	r30, 0x4E	; 78
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	8f 7e       	andi	r24, 0xEF	; 239
     cbc:	11 96       	adiw	r26, 0x01	; 1
     cbe:	9c 93       	st	X, r25
     cc0:	8e 93       	st	-X, r24
     cc2:	9d c1       	rjmp	.+826    	; 0xffe <__stack+0x79f>
        }

        else if( configurations->timer_mode==FAST_PWM_10BIT)
     cc4:	e9 81       	ldd	r30, Y+1	; 0x01
     cc6:	fa 81       	ldd	r31, Y+2	; 0x02
     cc8:	81 81       	ldd	r24, Z+1	; 0x01
     cca:	88 30       	cpi	r24, 0x08	; 8
     ccc:	49 f5       	brne	.+82     	; 0xd20 <__stack+0x4c1>
        {
            SET_BIT(TCCR1,WGM10);
     cce:	ae e4       	ldi	r26, 0x4E	; 78
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	ee e4       	ldi	r30, 0x4E	; 78
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	91 60       	ori	r25, 0x01	; 1
     cdc:	11 96       	adiw	r26, 0x01	; 1
     cde:	9c 93       	st	X, r25
     ce0:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM11);
     ce2:	ae e4       	ldi	r26, 0x4E	; 78
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ee e4       	ldi	r30, 0x4E	; 78
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	92 60       	ori	r25, 0x02	; 2
     cf0:	11 96       	adiw	r26, 0x01	; 1
     cf2:	9c 93       	st	X, r25
     cf4:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM12);
     cf6:	ae e4       	ldi	r26, 0x4E	; 78
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ee e4       	ldi	r30, 0x4E	; 78
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	88 60       	ori	r24, 0x08	; 8
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM13);            
     d0a:	ae e4       	ldi	r26, 0x4E	; 78
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ee e4       	ldi	r30, 0x4E	; 78
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	91 81       	ldd	r25, Z+1	; 0x01
     d16:	8f 7e       	andi	r24, 0xEF	; 239
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	9c 93       	st	X, r25
     d1c:	8e 93       	st	-X, r24
     d1e:	6f c1       	rjmp	.+734    	; 0xffe <__stack+0x79f>
        }  
        else if( configurations->timer_mode==PWM_PHASE_FREQ_CORRECT_ICR1)
     d20:	e9 81       	ldd	r30, Y+1	; 0x01
     d22:	fa 81       	ldd	r31, Y+2	; 0x02
     d24:	81 81       	ldd	r24, Z+1	; 0x01
     d26:	89 30       	cpi	r24, 0x09	; 9
     d28:	49 f5       	brne	.+82     	; 0xd7c <__stack+0x51d>
        {
            CLR_BIT(TCCR1,WGM10);
     d2a:	ae e4       	ldi	r26, 0x4E	; 78
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ee e4       	ldi	r30, 0x4E	; 78
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	91 81       	ldd	r25, Z+1	; 0x01
     d36:	9e 7f       	andi	r25, 0xFE	; 254
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	9c 93       	st	X, r25
     d3c:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM11);
     d3e:	ae e4       	ldi	r26, 0x4E	; 78
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	ee e4       	ldi	r30, 0x4E	; 78
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	9d 7f       	andi	r25, 0xFD	; 253
     d4c:	11 96       	adiw	r26, 0x01	; 1
     d4e:	9c 93       	st	X, r25
     d50:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM12);
     d52:	ae e4       	ldi	r26, 0x4E	; 78
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ee e4       	ldi	r30, 0x4E	; 78
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	91 81       	ldd	r25, Z+1	; 0x01
     d5e:	87 7f       	andi	r24, 0xF7	; 247
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM13);            
     d66:	ae e4       	ldi	r26, 0x4E	; 78
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ee e4       	ldi	r30, 0x4E	; 78
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	80 61       	ori	r24, 0x10	; 16
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	8e 93       	st	-X, r24
     d7a:	41 c1       	rjmp	.+642    	; 0xffe <__stack+0x79f>
        }  

        else if( configurations->timer_mode==PWM_PHASE_FREQ_CORRECT_OCR1A )
     d7c:	e9 81       	ldd	r30, Y+1	; 0x01
     d7e:	fa 81       	ldd	r31, Y+2	; 0x02
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	8a 30       	cpi	r24, 0x0A	; 10
     d84:	49 f5       	brne	.+82     	; 0xdd8 <__stack+0x579>
        {
            SET_BIT(TCCR1,WGM10);
     d86:	ae e4       	ldi	r26, 0x4E	; 78
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	ee e4       	ldi	r30, 0x4E	; 78
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	91 60       	ori	r25, 0x01	; 1
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	9c 93       	st	X, r25
     d98:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM11);
     d9a:	ae e4       	ldi	r26, 0x4E	; 78
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ee e4       	ldi	r30, 0x4E	; 78
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
     da6:	9d 7f       	andi	r25, 0xFD	; 253
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	9c 93       	st	X, r25
     dac:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM12);
     dae:	ae e4       	ldi	r26, 0x4E	; 78
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ee e4       	ldi	r30, 0x4E	; 78
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	87 7f       	andi	r24, 0xF7	; 247
     dbc:	11 96       	adiw	r26, 0x01	; 1
     dbe:	9c 93       	st	X, r25
     dc0:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM13);            
     dc2:	ae e4       	ldi	r26, 0x4E	; 78
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	ee e4       	ldi	r30, 0x4E	; 78
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	80 61       	ori	r24, 0x10	; 16
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	8e 93       	st	-X, r24
     dd6:	13 c1       	rjmp	.+550    	; 0xffe <__stack+0x79f>
        }

        else if( configurations->timer_mode==PWM_PHASE__CORRECT_ICR1)
     dd8:	e9 81       	ldd	r30, Y+1	; 0x01
     dda:	fa 81       	ldd	r31, Y+2	; 0x02
     ddc:	81 81       	ldd	r24, Z+1	; 0x01
     dde:	8b 30       	cpi	r24, 0x0B	; 11
     de0:	49 f5       	brne	.+82     	; 0xe34 <__stack+0x5d5>
        {
            CLR_BIT(TCCR1,WGM10);
     de2:	ae e4       	ldi	r26, 0x4E	; 78
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ee e4       	ldi	r30, 0x4E	; 78
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	9e 7f       	andi	r25, 0xFE	; 254
     df0:	11 96       	adiw	r26, 0x01	; 1
     df2:	9c 93       	st	X, r25
     df4:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM11);
     df6:	ae e4       	ldi	r26, 0x4E	; 78
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ee e4       	ldi	r30, 0x4E	; 78
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	92 60       	ori	r25, 0x02	; 2
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	9c 93       	st	X, r25
     e08:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM12);
     e0a:	ae e4       	ldi	r26, 0x4E	; 78
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	ee e4       	ldi	r30, 0x4E	; 78
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	87 7f       	andi	r24, 0xF7	; 247
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	9c 93       	st	X, r25
     e1c:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM13);            
     e1e:	ae e4       	ldi	r26, 0x4E	; 78
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	ee e4       	ldi	r30, 0x4E	; 78
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	80 61       	ori	r24, 0x10	; 16
     e2c:	11 96       	adiw	r26, 0x01	; 1
     e2e:	9c 93       	st	X, r25
     e30:	8e 93       	st	-X, r24
     e32:	e5 c0       	rjmp	.+458    	; 0xffe <__stack+0x79f>
        }      
        else if( configurations->timer_mode==PWM_PHASE__CORRECT_OCR1A )
     e34:	e9 81       	ldd	r30, Y+1	; 0x01
     e36:	fa 81       	ldd	r31, Y+2	; 0x02
     e38:	81 81       	ldd	r24, Z+1	; 0x01
     e3a:	8c 30       	cpi	r24, 0x0C	; 12
     e3c:	49 f5       	brne	.+82     	; 0xe90 <__stack+0x631>
        {
            SET_BIT(TCCR1,WGM10);
     e3e:	ae e4       	ldi	r26, 0x4E	; 78
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	ee e4       	ldi	r30, 0x4E	; 78
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	91 60       	ori	r25, 0x01	; 1
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	9c 93       	st	X, r25
     e50:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM11);
     e52:	ae e4       	ldi	r26, 0x4E	; 78
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ee e4       	ldi	r30, 0x4E	; 78
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	92 60       	ori	r25, 0x02	; 2
     e60:	11 96       	adiw	r26, 0x01	; 1
     e62:	9c 93       	st	X, r25
     e64:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM12);
     e66:	ae e4       	ldi	r26, 0x4E	; 78
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ee e4       	ldi	r30, 0x4E	; 78
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	11 96       	adiw	r26, 0x01	; 1
     e76:	9c 93       	st	X, r25
     e78:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM13);            
     e7a:	ae e4       	ldi	r26, 0x4E	; 78
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ee e4       	ldi	r30, 0x4E	; 78
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	80 61       	ori	r24, 0x10	; 16
     e88:	11 96       	adiw	r26, 0x01	; 1
     e8a:	9c 93       	st	X, r25
     e8c:	8e 93       	st	-X, r24
     e8e:	b7 c0       	rjmp	.+366    	; 0xffe <__stack+0x79f>
        }    
        else if( configurations->timer_mode==CTC_ICR1)
     e90:	e9 81       	ldd	r30, Y+1	; 0x01
     e92:	fa 81       	ldd	r31, Y+2	; 0x02
     e94:	81 81       	ldd	r24, Z+1	; 0x01
     e96:	8d 30       	cpi	r24, 0x0D	; 13
     e98:	49 f5       	brne	.+82     	; 0xeec <__stack+0x68d>
        {
            CLR_BIT(TCCR1,WGM10);
     e9a:	ae e4       	ldi	r26, 0x4E	; 78
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	ee e4       	ldi	r30, 0x4E	; 78
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	9e 7f       	andi	r25, 0xFE	; 254
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	9c 93       	st	X, r25
     eac:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM11);
     eae:	ae e4       	ldi	r26, 0x4E	; 78
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ee e4       	ldi	r30, 0x4E	; 78
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	91 81       	ldd	r25, Z+1	; 0x01
     eba:	9d 7f       	andi	r25, 0xFD	; 253
     ebc:	11 96       	adiw	r26, 0x01	; 1
     ebe:	9c 93       	st	X, r25
     ec0:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM12);
     ec2:	ae e4       	ldi	r26, 0x4E	; 78
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ee e4       	ldi	r30, 0x4E	; 78
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	91 81       	ldd	r25, Z+1	; 0x01
     ece:	88 60       	ori	r24, 0x08	; 8
     ed0:	11 96       	adiw	r26, 0x01	; 1
     ed2:	9c 93       	st	X, r25
     ed4:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM13);            
     ed6:	ae e4       	ldi	r26, 0x4E	; 78
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ee e4       	ldi	r30, 0x4E	; 78
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	80 61       	ori	r24, 0x10	; 16
     ee4:	11 96       	adiw	r26, 0x01	; 1
     ee6:	9c 93       	st	X, r25
     ee8:	8e 93       	st	-X, r24
     eea:	89 c0       	rjmp	.+274    	; 0xffe <__stack+0x79f>
        }      

        else if( configurations->timer_mode==RESERVED )
     eec:	e9 81       	ldd	r30, Y+1	; 0x01
     eee:	fa 81       	ldd	r31, Y+2	; 0x02
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	8e 30       	cpi	r24, 0x0E	; 14
     ef4:	49 f5       	brne	.+82     	; 0xf48 <__stack+0x6e9>
        {
            SET_BIT(TCCR1,WGM10);
     ef6:	ae e4       	ldi	r26, 0x4E	; 78
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ee e4       	ldi	r30, 0x4E	; 78
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	91 60       	ori	r25, 0x01	; 1
     f04:	11 96       	adiw	r26, 0x01	; 1
     f06:	9c 93       	st	X, r25
     f08:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM11);
     f0a:	ae e4       	ldi	r26, 0x4E	; 78
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ee e4       	ldi	r30, 0x4E	; 78
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	9d 7f       	andi	r25, 0xFD	; 253
     f18:	11 96       	adiw	r26, 0x01	; 1
     f1a:	9c 93       	st	X, r25
     f1c:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM12);
     f1e:	ae e4       	ldi	r26, 0x4E	; 78
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ee e4       	ldi	r30, 0x4E	; 78
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	88 60       	ori	r24, 0x08	; 8
     f2c:	11 96       	adiw	r26, 0x01	; 1
     f2e:	9c 93       	st	X, r25
     f30:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM13);            
     f32:	ae e4       	ldi	r26, 0x4E	; 78
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ee e4       	ldi	r30, 0x4E	; 78
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	11 96       	adiw	r26, 0x01	; 1
     f42:	9c 93       	st	X, r25
     f44:	8e 93       	st	-X, r24
     f46:	5b c0       	rjmp	.+182    	; 0xffe <__stack+0x79f>
        }      

        else if( configurations->timer_mode==FAST_PWM_ICR1 )
     f48:	e9 81       	ldd	r30, Y+1	; 0x01
     f4a:	fa 81       	ldd	r31, Y+2	; 0x02
     f4c:	81 81       	ldd	r24, Z+1	; 0x01
     f4e:	8f 30       	cpi	r24, 0x0F	; 15
     f50:	49 f5       	brne	.+82     	; 0xfa4 <__stack+0x745>
        {
            CLR_BIT(TCCR1,WGM10);
     f52:	ae e4       	ldi	r26, 0x4E	; 78
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ee e4       	ldi	r30, 0x4E	; 78
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	9e 7f       	andi	r25, 0xFE	; 254
     f60:	11 96       	adiw	r26, 0x01	; 1
     f62:	9c 93       	st	X, r25
     f64:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM11);
     f66:	ae e4       	ldi	r26, 0x4E	; 78
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ee e4       	ldi	r30, 0x4E	; 78
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	92 60       	ori	r25, 0x02	; 2
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	9c 93       	st	X, r25
     f78:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM12);
     f7a:	ae e4       	ldi	r26, 0x4E	; 78
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	ee e4       	ldi	r30, 0x4E	; 78
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	88 60       	ori	r24, 0x08	; 8
     f88:	11 96       	adiw	r26, 0x01	; 1
     f8a:	9c 93       	st	X, r25
     f8c:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM13);            
     f8e:	ae e4       	ldi	r26, 0x4E	; 78
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ee e4       	ldi	r30, 0x4E	; 78
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	11 96       	adiw	r26, 0x01	; 1
     f9e:	9c 93       	st	X, r25
     fa0:	8e 93       	st	-X, r24
     fa2:	2d c0       	rjmp	.+90     	; 0xffe <__stack+0x79f>
        }   

        else if( configurations->timer_mode==FAST_PWM_OCR1A )
     fa4:	e9 81       	ldd	r30, Y+1	; 0x01
     fa6:	fa 81       	ldd	r31, Y+2	; 0x02
     fa8:	81 81       	ldd	r24, Z+1	; 0x01
     faa:	80 31       	cpi	r24, 0x10	; 16
     fac:	41 f5       	brne	.+80     	; 0xffe <__stack+0x79f>
        {
            SET_BIT(TCCR1,WGM10);
     fae:	ae e4       	ldi	r26, 0x4E	; 78
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ee e4       	ldi	r30, 0x4E	; 78
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	91 60       	ori	r25, 0x01	; 1
     fbc:	11 96       	adiw	r26, 0x01	; 1
     fbe:	9c 93       	st	X, r25
     fc0:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM11);
     fc2:	ae e4       	ldi	r26, 0x4E	; 78
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ee e4       	ldi	r30, 0x4E	; 78
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	92 60       	ori	r25, 0x02	; 2
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	9c 93       	st	X, r25
     fd4:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM12);
     fd6:	ae e4       	ldi	r26, 0x4E	; 78
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ee e4       	ldi	r30, 0x4E	; 78
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	88 60       	ori	r24, 0x08	; 8
     fe4:	11 96       	adiw	r26, 0x01	; 1
     fe6:	9c 93       	st	X, r25
     fe8:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM13);            
     fea:	ae e4       	ldi	r26, 0x4E	; 78
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ee e4       	ldi	r30, 0x4E	; 78
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	80 61       	ori	r24, 0x10	; 16
     ff8:	11 96       	adiw	r26, 0x01	; 1
     ffa:	9c 93       	st	X, r25
     ffc:	8e 93       	st	-X, r24
        }  
        if( configurations->timer_clk  == NO_CLOCK)
     ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    1000:	fa 81       	ldd	r31, Y+2	; 0x02
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	88 23       	and	r24, r24
    1006:	f9 f4       	brne	.+62     	; 0x1046 <__stack+0x7e7>
        {
            CLR_BIT(TCCR1,CS10);
    1008:	ae e4       	ldi	r26, 0x4E	; 78
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ee e4       	ldi	r30, 0x4E	; 78
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	91 81       	ldd	r25, Z+1	; 0x01
    1014:	8e 7f       	andi	r24, 0xFE	; 254
    1016:	11 96       	adiw	r26, 0x01	; 1
    1018:	9c 93       	st	X, r25
    101a:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,CS11);
    101c:	ae e4       	ldi	r26, 0x4E	; 78
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ee e4       	ldi	r30, 0x4E	; 78
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	8d 7f       	andi	r24, 0xFD	; 253
    102a:	11 96       	adiw	r26, 0x01	; 1
    102c:	9c 93       	st	X, r25
    102e:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,CS12);            
    1030:	ae e4       	ldi	r26, 0x4E	; 78
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ee e4       	ldi	r30, 0x4E	; 78
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	8b 7f       	andi	r24, 0xFB	; 251
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	9c 93       	st	X, r25
    1042:	8e 93       	st	-X, r24
    1044:	fb c0       	rjmp	.+502    	; 0x123c <__stack+0x9dd>
        }

        else if( configurations->timer_clk  == CLK)
    1046:	e9 81       	ldd	r30, Y+1	; 0x01
    1048:	fa 81       	ldd	r31, Y+2	; 0x02
    104a:	82 81       	ldd	r24, Z+2	; 0x02
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	f9 f4       	brne	.+62     	; 0x108e <__stack+0x82f>
        {
            SET_BIT(TCCR1,CS10);
    1050:	ae e4       	ldi	r26, 0x4E	; 78
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e4       	ldi	r30, 0x4E	; 78
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	81 60       	ori	r24, 0x01	; 1
    105e:	11 96       	adiw	r26, 0x01	; 1
    1060:	9c 93       	st	X, r25
    1062:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,CS11);
    1064:	ae e4       	ldi	r26, 0x4E	; 78
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ee e4       	ldi	r30, 0x4E	; 78
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	8d 7f       	andi	r24, 0xFD	; 253
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	9c 93       	st	X, r25
    1076:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,CS12);            
    1078:	ae e4       	ldi	r26, 0x4E	; 78
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	ee e4       	ldi	r30, 0x4E	; 78
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	8b 7f       	andi	r24, 0xFB	; 251
    1086:	11 96       	adiw	r26, 0x01	; 1
    1088:	9c 93       	st	X, r25
    108a:	8e 93       	st	-X, r24
    108c:	d7 c0       	rjmp	.+430    	; 0x123c <__stack+0x9dd>
        }

        else if( configurations->timer_clk  == CLK_8)
    108e:	e9 81       	ldd	r30, Y+1	; 0x01
    1090:	fa 81       	ldd	r31, Y+2	; 0x02
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	f9 f4       	brne	.+62     	; 0x10d6 <__stack+0x877>
        {
            CLR_BIT(TCCR1,CS10);
    1098:	ae e4       	ldi	r26, 0x4E	; 78
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ee e4       	ldi	r30, 0x4E	; 78
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	91 81       	ldd	r25, Z+1	; 0x01
    10a4:	8e 7f       	andi	r24, 0xFE	; 254
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,CS11);
    10ac:	ae e4       	ldi	r26, 0x4E	; 78
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ee e4       	ldi	r30, 0x4E	; 78
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	82 60       	ori	r24, 0x02	; 2
    10ba:	11 96       	adiw	r26, 0x01	; 1
    10bc:	9c 93       	st	X, r25
    10be:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,CS12);            
    10c0:	ae e4       	ldi	r26, 0x4E	; 78
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ee e4       	ldi	r30, 0x4E	; 78
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	91 81       	ldd	r25, Z+1	; 0x01
    10cc:	8b 7f       	andi	r24, 0xFB	; 251
    10ce:	11 96       	adiw	r26, 0x01	; 1
    10d0:	9c 93       	st	X, r25
    10d2:	8e 93       	st	-X, r24
    10d4:	b3 c0       	rjmp	.+358    	; 0x123c <__stack+0x9dd>
        }

        else if( configurations->timer_clk  == CLK_64)
    10d6:	e9 81       	ldd	r30, Y+1	; 0x01
    10d8:	fa 81       	ldd	r31, Y+2	; 0x02
    10da:	82 81       	ldd	r24, Z+2	; 0x02
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	f9 f4       	brne	.+62     	; 0x111e <__stack+0x8bf>
        {
            SET_BIT(TCCR1,CS10);
    10e0:	ae e4       	ldi	r26, 0x4E	; 78
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	81 60       	ori	r24, 0x01	; 1
    10ee:	11 96       	adiw	r26, 0x01	; 1
    10f0:	9c 93       	st	X, r25
    10f2:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,CS11);
    10f4:	ae e4       	ldi	r26, 0x4E	; 78
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ee e4       	ldi	r30, 0x4E	; 78
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	82 60       	ori	r24, 0x02	; 2
    1102:	11 96       	adiw	r26, 0x01	; 1
    1104:	9c 93       	st	X, r25
    1106:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,CS12);
    1108:	ae e4       	ldi	r26, 0x4E	; 78
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ee e4       	ldi	r30, 0x4E	; 78
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	8b 7f       	andi	r24, 0xFB	; 251
    1116:	11 96       	adiw	r26, 0x01	; 1
    1118:	9c 93       	st	X, r25
    111a:	8e 93       	st	-X, r24
    111c:	8f c0       	rjmp	.+286    	; 0x123c <__stack+0x9dd>
        }

        else if( configurations->timer_clk  == CLK_256)
    111e:	e9 81       	ldd	r30, Y+1	; 0x01
    1120:	fa 81       	ldd	r31, Y+2	; 0x02
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	f9 f4       	brne	.+62     	; 0x1166 <__stack+0x907>
        {
            CLR_BIT(TCCR1,CS10);
    1128:	ae e4       	ldi	r26, 0x4E	; 78
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ee e4       	ldi	r30, 0x4E	; 78
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	8e 7f       	andi	r24, 0xFE	; 254
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	9c 93       	st	X, r25
    113a:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,CS11);
    113c:	ae e4       	ldi	r26, 0x4E	; 78
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ee e4       	ldi	r30, 0x4E	; 78
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	8d 7f       	andi	r24, 0xFD	; 253
    114a:	11 96       	adiw	r26, 0x01	; 1
    114c:	9c 93       	st	X, r25
    114e:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,CS12);            
    1150:	ae e4       	ldi	r26, 0x4E	; 78
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ee e4       	ldi	r30, 0x4E	; 78
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	91 81       	ldd	r25, Z+1	; 0x01
    115c:	84 60       	ori	r24, 0x04	; 4
    115e:	11 96       	adiw	r26, 0x01	; 1
    1160:	9c 93       	st	X, r25
    1162:	8e 93       	st	-X, r24
    1164:	6b c0       	rjmp	.+214    	; 0x123c <__stack+0x9dd>
        }

        else if( configurations->timer_clk  == CLK_1024)
    1166:	e9 81       	ldd	r30, Y+1	; 0x01
    1168:	fa 81       	ldd	r31, Y+2	; 0x02
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	85 30       	cpi	r24, 0x05	; 5
    116e:	f9 f4       	brne	.+62     	; 0x11ae <__stack+0x94f>
        {
            SET_BIT(TCCR1,CS10);
    1170:	ae e4       	ldi	r26, 0x4E	; 78
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ee e4       	ldi	r30, 0x4E	; 78
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
    117c:	81 60       	ori	r24, 0x01	; 1
    117e:	11 96       	adiw	r26, 0x01	; 1
    1180:	9c 93       	st	X, r25
    1182:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,CS11);
    1184:	ae e4       	ldi	r26, 0x4E	; 78
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	ee e4       	ldi	r30, 0x4E	; 78
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	8d 7f       	andi	r24, 0xFD	; 253
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	9c 93       	st	X, r25
    1196:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,CS12);            
    1198:	ae e4       	ldi	r26, 0x4E	; 78
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	ee e4       	ldi	r30, 0x4E	; 78
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	84 60       	ori	r24, 0x04	; 4
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	9c 93       	st	X, r25
    11aa:	8e 93       	st	-X, r24
    11ac:	47 c0       	rjmp	.+142    	; 0x123c <__stack+0x9dd>
        }
        else if( configurations->timer_clk  == EXTERNAL_CLK_FALLING)
    11ae:	e9 81       	ldd	r30, Y+1	; 0x01
    11b0:	fa 81       	ldd	r31, Y+2	; 0x02
    11b2:	82 81       	ldd	r24, Z+2	; 0x02
    11b4:	86 30       	cpi	r24, 0x06	; 6
    11b6:	f9 f4       	brne	.+62     	; 0x11f6 <__stack+0x997>
        {
            CLR_BIT(TCCR1,CS10);
    11b8:	ae e4       	ldi	r26, 0x4E	; 78
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ee e4       	ldi	r30, 0x4E	; 78
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	8e 7f       	andi	r24, 0xFE	; 254
    11c6:	11 96       	adiw	r26, 0x01	; 1
    11c8:	9c 93       	st	X, r25
    11ca:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,CS11);
    11cc:	ae e4       	ldi	r26, 0x4E	; 78
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ee e4       	ldi	r30, 0x4E	; 78
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	11 96       	adiw	r26, 0x01	; 1
    11dc:	9c 93       	st	X, r25
    11de:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,CS12);            
    11e0:	ae e4       	ldi	r26, 0x4E	; 78
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	ee e4       	ldi	r30, 0x4E	; 78
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	84 60       	ori	r24, 0x04	; 4
    11ee:	11 96       	adiw	r26, 0x01	; 1
    11f0:	9c 93       	st	X, r25
    11f2:	8e 93       	st	-X, r24
    11f4:	23 c0       	rjmp	.+70     	; 0x123c <__stack+0x9dd>
        }
       else if( configurations->timer_clk  == EXTERNAL_CLK_RISING)
    11f6:	e9 81       	ldd	r30, Y+1	; 0x01
    11f8:	fa 81       	ldd	r31, Y+2	; 0x02
    11fa:	82 81       	ldd	r24, Z+2	; 0x02
    11fc:	87 30       	cpi	r24, 0x07	; 7
    11fe:	f1 f4       	brne	.+60     	; 0x123c <__stack+0x9dd>
        {
            SET_BIT(TCCR1,CS10);
    1200:	ae e4       	ldi	r26, 0x4E	; 78
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ee e4       	ldi	r30, 0x4E	; 78
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	91 81       	ldd	r25, Z+1	; 0x01
    120c:	81 60       	ori	r24, 0x01	; 1
    120e:	11 96       	adiw	r26, 0x01	; 1
    1210:	9c 93       	st	X, r25
    1212:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,CS11);
    1214:	ae e4       	ldi	r26, 0x4E	; 78
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	ee e4       	ldi	r30, 0x4E	; 78
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	82 60       	ori	r24, 0x02	; 2
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	9c 93       	st	X, r25
    1226:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,CS12);           
    1228:	ae e4       	ldi	r26, 0x4E	; 78
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ee e4       	ldi	r30, 0x4E	; 78
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	91 81       	ldd	r25, Z+1	; 0x01
    1234:	84 60       	ori	r24, 0x04	; 4
    1236:	11 96       	adiw	r26, 0x01	; 1
    1238:	9c 93       	st	X, r25
    123a:	8e 93       	st	-X, r24
        }
        if(configurations->interrupt_mode == INTERRUPT_ENABLE)
    123c:	e9 81       	ldd	r30, Y+1	; 0x01
    123e:	fa 81       	ldd	r31, Y+2	; 0x02
    1240:	84 81       	ldd	r24, Z+4	; 0x04
    1242:	88 23       	and	r24, r24
    1244:	41 f4       	brne	.+16     	; 0x1256 <__stack+0x9f7>
            SET_BIT(TIMSK, TOIE1);
    1246:	a9 e5       	ldi	r26, 0x59	; 89
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e9 e5       	ldi	r30, 0x59	; 89
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	84 60       	ori	r24, 0x04	; 4
    1252:	8c 93       	st	X, r24
    1254:	ad c1       	rjmp	.+858    	; 0x15b0 <__stack+0xd51>
        else
        {

            TM1OV_INTRRUPT_FLAG = INTERRUPT_DISABLE;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	80 93 76 00 	sts	0x0076, r24
    125c:	a9 c1       	rjmp	.+850    	; 0x15b0 <__stack+0xd51>

        }

    }
    else if( configurations->timer_no== TIMER2)
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	fa 81       	ldd	r31, Y+2	; 0x02
    1262:	80 81       	ld	r24, Z
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	09 f0       	breq	.+2      	; 0x126a <__stack+0xa0b>
    1268:	a3 c1       	rjmp	.+838    	; 0x15b0 <__stack+0xd51>
    {
        if( configurations->timer_mode==NORMAL)
    126a:	e9 81       	ldd	r30, Y+1	; 0x01
    126c:	fa 81       	ldd	r31, Y+2	; 0x02
    126e:	81 81       	ldd	r24, Z+1	; 0x01
    1270:	88 23       	and	r24, r24
    1272:	79 f4       	brne	.+30     	; 0x1292 <__stack+0xa33>
        {
            CLR_BIT(TCCR2,WGM20);
    1274:	a5 e4       	ldi	r26, 0x45	; 69
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e5 e4       	ldi	r30, 0x45	; 69
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8f 7b       	andi	r24, 0xBF	; 191
    1280:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,WGM21);
    1282:	a5 e4       	ldi	r26, 0x45	; 69
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e5 e4       	ldi	r30, 0x45	; 69
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	87 7f       	andi	r24, 0xF7	; 247
    128e:	8c 93       	st	X, r24
    1290:	a8 c0       	rjmp	.+336    	; 0x13e2 <__stack+0xb83>

        }
        else if( configurations->timer_mode==CTC)
    1292:	e9 81       	ldd	r30, Y+1	; 0x01
    1294:	fa 81       	ldd	r31, Y+2	; 0x02
    1296:	81 81       	ldd	r24, Z+1	; 0x01
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	69 f5       	brne	.+90     	; 0x12f6 <__stack+0xa97>
        {
            CLR_BIT(TCCR2,WGM20);
    129c:	a5 e4       	ldi	r26, 0x45	; 69
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e5 e4       	ldi	r30, 0x45	; 69
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7b       	andi	r24, 0xBF	; 191
    12a8:	8c 93       	st	X, r24
            SET_BIT(TCCR2,WGM21);
    12aa:	a5 e4       	ldi	r26, 0x45	; 69
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e4       	ldi	r30, 0x45	; 69
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	88 60       	ori	r24, 0x08	; 8
    12b6:	8c 93       	st	X, r24
            if(configurations->interrupt_mode == INTERRUPT_ENABLE)   
    12b8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ba:	fa 81       	ldd	r31, Y+2	; 0x02
    12bc:	84 81       	ldd	r24, Z+4	; 0x04
    12be:	88 23       	and	r24, r24
    12c0:	41 f4       	brne	.+16     	; 0x12d2 <__stack+0xa73>
                 SET_BIT(TIMSK, OCIE2);
    12c2:	a9 e5       	ldi	r26, 0x59	; 89
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e9 e5       	ldi	r30, 0x59	; 89
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 68       	ori	r24, 0x80	; 128
    12ce:	8c 93       	st	X, r24
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <__stack+0xa79>
            else
               TM2CTC_INTRRUPT_FLAG = INTERRUPT_DISABLE;   
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 93 79 00 	sts	0x0079, r24
        // WAVE GENERATOR ON PINB.3
            CLR_BIT(TCCR2,COM21);
    12d8:	a5 e4       	ldi	r26, 0x45	; 69
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e4       	ldi	r30, 0x45	; 69
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8f 7d       	andi	r24, 0xDF	; 223
    12e4:	8c 93       	st	X, r24
            SET_BIT(TCCR2,COM20);                   
    12e6:	a5 e4       	ldi	r26, 0x45	; 69
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e5 e4       	ldi	r30, 0x45	; 69
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 61       	ori	r24, 0x10	; 16
    12f2:	8c 93       	st	X, r24
    12f4:	76 c0       	rjmp	.+236    	; 0x13e2 <__stack+0xb83>
        }
        else if( configurations->timer_mode==PWM)
    12f6:	e9 81       	ldd	r30, Y+1	; 0x01
    12f8:	fa 81       	ldd	r31, Y+2	; 0x02
    12fa:	81 81       	ldd	r24, Z+1	; 0x01
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	b9 f5       	brne	.+110    	; 0x136e <__stack+0xb0f>
        {
            SET_BIT(TCCR2,WGM20);
    1300:	a5 e4       	ldi	r26, 0x45	; 69
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e4       	ldi	r30, 0x45	; 69
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	80 64       	ori	r24, 0x40	; 64
    130c:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,WGM21);
    130e:	a5 e4       	ldi	r26, 0x45	; 69
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e5 e4       	ldi	r30, 0x45	; 69
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	87 7f       	andi	r24, 0xF7	; 247
    131a:	8c 93       	st	X, r24
            if( configurations->pwm_mode == NON_INVERTED)
    131c:	e9 81       	ldd	r30, Y+1	; 0x01
    131e:	fa 81       	ldd	r31, Y+2	; 0x02
    1320:	83 81       	ldd	r24, Z+3	; 0x03
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	79 f4       	brne	.+30     	; 0x1344 <__stack+0xae5>
            {
                SET_BIT(TCCR2, COM21);
    1326:	a5 e4       	ldi	r26, 0x45	; 69
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e5 e4       	ldi	r30, 0x45	; 69
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 62       	ori	r24, 0x20	; 32
    1332:	8c 93       	st	X, r24
                CLR_BIT(TCCR2, COM20);                
    1334:	a5 e4       	ldi	r26, 0x45	; 69
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e4       	ldi	r30, 0x45	; 69
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8f 7e       	andi	r24, 0xEF	; 239
    1340:	8c 93       	st	X, r24
    1342:	4f c0       	rjmp	.+158    	; 0x13e2 <__stack+0xb83>
            }
            else if( configurations->pwm_mode==INVERTED)
    1344:	e9 81       	ldd	r30, Y+1	; 0x01
    1346:	fa 81       	ldd	r31, Y+2	; 0x02
    1348:	83 81       	ldd	r24, Z+3	; 0x03
    134a:	88 23       	and	r24, r24
    134c:	09 f0       	breq	.+2      	; 0x1350 <__stack+0xaf1>
    134e:	49 c0       	rjmp	.+146    	; 0x13e2 <__stack+0xb83>
            {
                SET_BIT(TCCR2, COM21);
    1350:	a5 e4       	ldi	r26, 0x45	; 69
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e5 e4       	ldi	r30, 0x45	; 69
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	80 62       	ori	r24, 0x20	; 32
    135c:	8c 93       	st	X, r24
                SET_BIT(TCCR2, COM20);
    135e:	a5 e4       	ldi	r26, 0x45	; 69
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 e4       	ldi	r30, 0x45	; 69
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 61       	ori	r24, 0x10	; 16
    136a:	8c 93       	st	X, r24
    136c:	3a c0       	rjmp	.+116    	; 0x13e2 <__stack+0xb83>
            }

        }
        else if( configurations->timer_mode==FAST_PWM)
    136e:	e9 81       	ldd	r30, Y+1	; 0x01
    1370:	fa 81       	ldd	r31, Y+2	; 0x02
    1372:	81 81       	ldd	r24, Z+1	; 0x01
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	a9 f5       	brne	.+106    	; 0x13e2 <__stack+0xb83>
        {
            SET_BIT(TCCR2,WGM20);
    1378:	a5 e4       	ldi	r26, 0x45	; 69
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e4       	ldi	r30, 0x45	; 69
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 64       	ori	r24, 0x40	; 64
    1384:	8c 93       	st	X, r24
            SET_BIT(TCCR2,WGM21);
    1386:	a5 e4       	ldi	r26, 0x45	; 69
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e4       	ldi	r30, 0x45	; 69
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	88 60       	ori	r24, 0x08	; 8
    1392:	8c 93       	st	X, r24

            if( configurations->pwm_mode == NON_INVERTED)
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	83 81       	ldd	r24, Z+3	; 0x03
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	79 f4       	brne	.+30     	; 0x13bc <__stack+0xb5d>
            {
                SET_BIT(TCCR2, COM21);
    139e:	a5 e4       	ldi	r26, 0x45	; 69
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 e4       	ldi	r30, 0x45	; 69
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	80 62       	ori	r24, 0x20	; 32
    13aa:	8c 93       	st	X, r24
                CLR_BIT(TCCR2, COM20);                
    13ac:	a5 e4       	ldi	r26, 0x45	; 69
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e4       	ldi	r30, 0x45	; 69
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8f 7e       	andi	r24, 0xEF	; 239
    13b8:	8c 93       	st	X, r24
    13ba:	13 c0       	rjmp	.+38     	; 0x13e2 <__stack+0xb83>
            }
            else if( configurations->pwm_mode==INVERTED)
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	83 81       	ldd	r24, Z+3	; 0x03
    13c2:	88 23       	and	r24, r24
    13c4:	71 f4       	brne	.+28     	; 0x13e2 <__stack+0xb83>
            {
                SET_BIT(TCCR2, COM21);
    13c6:	a5 e4       	ldi	r26, 0x45	; 69
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e5 e4       	ldi	r30, 0x45	; 69
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	80 62       	ori	r24, 0x20	; 32
    13d2:	8c 93       	st	X, r24
                SET_BIT(TCCR2, COM20);
    13d4:	a5 e4       	ldi	r26, 0x45	; 69
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e5 e4       	ldi	r30, 0x45	; 69
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	80 61       	ori	r24, 0x10	; 16
    13e0:	8c 93       	st	X, r24
            }
           
        }
        if( configurations->timer_clk  == NO_CLOCK)
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	88 23       	and	r24, r24
    13ea:	b1 f4       	brne	.+44     	; 0x1418 <__stack+0xbb9>
        {
            CLR_BIT(TCCR2,CS20);
    13ec:	a5 e4       	ldi	r26, 0x45	; 69
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e4       	ldi	r30, 0x45	; 69
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8e 7f       	andi	r24, 0xFE	; 254
    13f8:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,CS21);
    13fa:	a5 e4       	ldi	r26, 0x45	; 69
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e4       	ldi	r30, 0x45	; 69
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8d 7f       	andi	r24, 0xFD	; 253
    1406:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,CS22);            
    1408:	a5 e4       	ldi	r26, 0x45	; 69
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e4       	ldi	r30, 0x45	; 69
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8b 7f       	andi	r24, 0xFB	; 251
    1414:	8c 93       	st	X, r24
    1416:	bc c0       	rjmp	.+376    	; 0x1590 <__stack+0xd31>
        }
        else if( configurations->timer_clk  == CLK)
    1418:	e9 81       	ldd	r30, Y+1	; 0x01
    141a:	fa 81       	ldd	r31, Y+2	; 0x02
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	b1 f4       	brne	.+44     	; 0x144e <__stack+0xbef>
        {
            SET_BIT(TCCR2,CS20);
    1422:	a5 e4       	ldi	r26, 0x45	; 69
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e5 e4       	ldi	r30, 0x45	; 69
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,CS21);
    1430:	a5 e4       	ldi	r26, 0x45	; 69
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e5 e4       	ldi	r30, 0x45	; 69
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	8d 7f       	andi	r24, 0xFD	; 253
    143c:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,CS22);            
    143e:	a5 e4       	ldi	r26, 0x45	; 69
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e5 e4       	ldi	r30, 0x45	; 69
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8b 7f       	andi	r24, 0xFB	; 251
    144a:	8c 93       	st	X, r24
    144c:	a1 c0       	rjmp	.+322    	; 0x1590 <__stack+0xd31>
        }
        else if( configurations->timer_clk  == CLK_8)
    144e:	e9 81       	ldd	r30, Y+1	; 0x01
    1450:	fa 81       	ldd	r31, Y+2	; 0x02
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	b1 f4       	brne	.+44     	; 0x1484 <__stack+0xc25>
        {
            CLR_BIT(TCCR2,CS20);
    1458:	a5 e4       	ldi	r26, 0x45	; 69
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e5 e4       	ldi	r30, 0x45	; 69
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8e 7f       	andi	r24, 0xFE	; 254
    1464:	8c 93       	st	X, r24
            SET_BIT(TCCR2,CS21);
    1466:	a5 e4       	ldi	r26, 0x45	; 69
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e5 e4       	ldi	r30, 0x45	; 69
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	82 60       	ori	r24, 0x02	; 2
    1472:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,CS22);            
    1474:	a5 e4       	ldi	r26, 0x45	; 69
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e4       	ldi	r30, 0x45	; 69
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8b 7f       	andi	r24, 0xFB	; 251
    1480:	8c 93       	st	X, r24
    1482:	86 c0       	rjmp	.+268    	; 0x1590 <__stack+0xd31>
        }
        else if( configurations->timer_clk  == CLK_32)
    1484:	e9 81       	ldd	r30, Y+1	; 0x01
    1486:	fa 81       	ldd	r31, Y+2	; 0x02
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	89 30       	cpi	r24, 0x09	; 9
    148c:	b1 f4       	brne	.+44     	; 0x14ba <__stack+0xc5b>
        {
            SET_BIT(TCCR2,CS20);
    148e:	a5 e4       	ldi	r26, 0x45	; 69
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e4       	ldi	r30, 0x45	; 69
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	81 60       	ori	r24, 0x01	; 1
    149a:	8c 93       	st	X, r24
            SET_BIT(TCCR2,CS21);
    149c:	a5 e4       	ldi	r26, 0x45	; 69
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e4       	ldi	r30, 0x45	; 69
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	82 60       	ori	r24, 0x02	; 2
    14a8:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,CS22);            
    14aa:	a5 e4       	ldi	r26, 0x45	; 69
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e4       	ldi	r30, 0x45	; 69
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8b 7f       	andi	r24, 0xFB	; 251
    14b6:	8c 93       	st	X, r24
    14b8:	6b c0       	rjmp	.+214    	; 0x1590 <__stack+0xd31>
        }
        else if( configurations->timer_clk  == CLK_64)
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	b1 f4       	brne	.+44     	; 0x14f0 <__stack+0xc91>
        {
            CLR_BIT(TCCR2,CS20);
    14c4:	a5 e4       	ldi	r26, 0x45	; 69
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e5 e4       	ldi	r30, 0x45	; 69
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8e 7f       	andi	r24, 0xFE	; 254
    14d0:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,CS21);
    14d2:	a5 e4       	ldi	r26, 0x45	; 69
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e5 e4       	ldi	r30, 0x45	; 69
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8d 7f       	andi	r24, 0xFD	; 253
    14de:	8c 93       	st	X, r24
            SET_BIT(TCCR2,CS22);            
    14e0:	a5 e4       	ldi	r26, 0x45	; 69
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e4       	ldi	r30, 0x45	; 69
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	84 60       	ori	r24, 0x04	; 4
    14ec:	8c 93       	st	X, r24
    14ee:	50 c0       	rjmp	.+160    	; 0x1590 <__stack+0xd31>
        }

        else if( configurations->timer_clk  == CLK_128)
    14f0:	e9 81       	ldd	r30, Y+1	; 0x01
    14f2:	fa 81       	ldd	r31, Y+2	; 0x02
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	88 30       	cpi	r24, 0x08	; 8
    14f8:	b1 f4       	brne	.+44     	; 0x1526 <__stack+0xcc7>
        {
            SET_BIT(TCCR2,CS20);
    14fa:	a5 e4       	ldi	r26, 0x45	; 69
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e5 e4       	ldi	r30, 0x45	; 69
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	81 60       	ori	r24, 0x01	; 1
    1506:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,CS21);
    1508:	a5 e4       	ldi	r26, 0x45	; 69
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e5 e4       	ldi	r30, 0x45	; 69
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8d 7f       	andi	r24, 0xFD	; 253
    1514:	8c 93       	st	X, r24
            SET_BIT(TCCR2,CS22);            
    1516:	a5 e4       	ldi	r26, 0x45	; 69
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e5 e4       	ldi	r30, 0x45	; 69
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	84 60       	ori	r24, 0x04	; 4
    1522:	8c 93       	st	X, r24
    1524:	35 c0       	rjmp	.+106    	; 0x1590 <__stack+0xd31>
        }

        else if( configurations->timer_clk  == CLK_256)
    1526:	e9 81       	ldd	r30, Y+1	; 0x01
    1528:	fa 81       	ldd	r31, Y+2	; 0x02
    152a:	82 81       	ldd	r24, Z+2	; 0x02
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	b1 f4       	brne	.+44     	; 0x155c <__stack+0xcfd>
        {
            CLR_BIT(TCCR2,CS20);
    1530:	a5 e4       	ldi	r26, 0x45	; 69
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e4       	ldi	r30, 0x45	; 69
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8e 7f       	andi	r24, 0xFE	; 254
    153c:	8c 93       	st	X, r24
            SET_BIT(TCCR2,CS21);
    153e:	a5 e4       	ldi	r26, 0x45	; 69
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e5 e4       	ldi	r30, 0x45	; 69
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	82 60       	ori	r24, 0x02	; 2
    154a:	8c 93       	st	X, r24
            SET_BIT(TCCR2,CS22);            
    154c:	a5 e4       	ldi	r26, 0x45	; 69
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e5 e4       	ldi	r30, 0x45	; 69
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	84 60       	ori	r24, 0x04	; 4
    1558:	8c 93       	st	X, r24
    155a:	1a c0       	rjmp	.+52     	; 0x1590 <__stack+0xd31>
        }

        else if( configurations->timer_clk  == CLK_1024)
    155c:	e9 81       	ldd	r30, Y+1	; 0x01
    155e:	fa 81       	ldd	r31, Y+2	; 0x02
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	85 30       	cpi	r24, 0x05	; 5
    1564:	a9 f4       	brne	.+42     	; 0x1590 <__stack+0xd31>
        {
            SET_BIT(TCCR2,CS20);
    1566:	a5 e4       	ldi	r26, 0x45	; 69
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e4       	ldi	r30, 0x45	; 69
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	81 60       	ori	r24, 0x01	; 1
    1572:	8c 93       	st	X, r24
            SET_BIT(TCCR2,CS21);
    1574:	a5 e4       	ldi	r26, 0x45	; 69
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e4       	ldi	r30, 0x45	; 69
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	82 60       	ori	r24, 0x02	; 2
    1580:	8c 93       	st	X, r24
            SET_BIT(TCCR2,CS22);              
    1582:	a5 e4       	ldi	r26, 0x45	; 69
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e4       	ldi	r30, 0x45	; 69
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	8c 93       	st	X, r24
        }

        if(configurations->interrupt_mode == INTERRUPT_ENABLE)
    1590:	e9 81       	ldd	r30, Y+1	; 0x01
    1592:	fa 81       	ldd	r31, Y+2	; 0x02
    1594:	84 81       	ldd	r24, Z+4	; 0x04
    1596:	88 23       	and	r24, r24
    1598:	41 f4       	brne	.+16     	; 0x15aa <__stack+0xd4b>
        {
             SET_BIT(TIMSK, TOIE2);
    159a:	a9 e5       	ldi	r26, 0x59	; 89
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e9 e5       	ldi	r30, 0x59	; 89
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	80 64       	ori	r24, 0x40	; 64
    15a6:	8c 93       	st	X, r24
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <__stack+0xd51>
        }
        else
        {
            TM2OV_INTRRUPT_FLAG = INTERRUPT_DISABLE;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 78 00 	sts	0x0078, r24
        }
   
    }
    if(configurations->interrupt_mode == INTERRUPT_ENABLE) 
    15b0:	e9 81       	ldd	r30, Y+1	; 0x01
    15b2:	fa 81       	ldd	r31, Y+2	; 0x02
    15b4:	84 81       	ldd	r24, Z+4	; 0x04
    15b6:	88 23       	and	r24, r24
    15b8:	39 f4       	brne	.+14     	; 0x15c8 <__stack+0xd69>
         SET_BIT(SREG, BIT7);
    15ba:	af e5       	ldi	r26, 0x5F	; 95
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	ef e5       	ldi	r30, 0x5F	; 95
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 68       	ori	r24, 0x80	; 128
    15c6:	8c 93       	st	X, r24

}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <TM0_OV_voidSetCallBack>:

void TM0_OV_voidSetCallBack(void(*ptr)(void))
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <TM0_OV_voidSetCallBack+0x6>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
	if(ptr !=NULL)
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	31 f0       	breq	.+12     	; 0x15f4 <TM0_OV_voidSetCallBack+0x22>
	{
	 ptrf=ptr;
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	90 93 71 00 	sts	0x0071, r25
    15f0:	80 93 70 00 	sts	0x0070, r24
	}
	
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <TM2_OV_voidSetCallBack>:

void TM2_OV_voidSetCallBack(void(*ptr)(void))
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <TM2_OV_voidSetCallBack+0x6>
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr !=NULL)
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	31 f0       	breq	.+12     	; 0x1620 <TM2_OV_voidSetCallBack+0x22>
	{
	 ptrftm2=ptr;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	90 93 73 00 	sts	0x0073, r25
    161c:	80 93 72 00 	sts	0x0072, r24
	}

}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <TM_VoidPrealoadOverFlow>:

void TM_VoidPrealoadOverFlow(ST_TIMER_config_t *configurations ,u16 Copy_u16value)
{ 
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	00 d0       	rcall	.+0      	; 0x1630 <TM_VoidPrealoadOverFlow+0x6>
    1630:	00 d0       	rcall	.+0      	; 0x1632 <TM_VoidPrealoadOverFlow+0x8>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	7c 83       	std	Y+4, r23	; 0x04
    163c:	6b 83       	std	Y+3, r22	; 0x03
    if( configurations->timer_no== TIMER0)
    163e:	e9 81       	ldd	r30, Y+1	; 0x01
    1640:	fa 81       	ldd	r31, Y+2	; 0x02
    1642:	80 81       	ld	r24, Z
    1644:	88 23       	and	r24, r24
    1646:	29 f4       	brne	.+10     	; 0x1652 <TM_VoidPrealoadOverFlow+0x28>
        TCNT0= (u8)Copy_u16value;
    1648:	e2 e5       	ldi	r30, 0x52	; 82
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	80 83       	st	Z, r24
    1650:	15 c0       	rjmp	.+42     	; 0x167c <TM_VoidPrealoadOverFlow+0x52>
    else if( configurations->timer_no== TIMER1)
    1652:	e9 81       	ldd	r30, Y+1	; 0x01
    1654:	fa 81       	ldd	r31, Y+2	; 0x02
    1656:	80 81       	ld	r24, Z
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	39 f4       	brne	.+14     	; 0x166a <TM_VoidPrealoadOverFlow+0x40>
        TCNT1= Copy_u16value;      
    165c:	ec e4       	ldi	r30, 0x4C	; 76
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
    1668:	09 c0       	rjmp	.+18     	; 0x167c <TM_VoidPrealoadOverFlow+0x52>
    else if( configurations->timer_no== TIMER2)
    166a:	e9 81       	ldd	r30, Y+1	; 0x01
    166c:	fa 81       	ldd	r31, Y+2	; 0x02
    166e:	80 81       	ld	r24, Z
    1670:	82 30       	cpi	r24, 0x02	; 2
    1672:	21 f4       	brne	.+8      	; 0x167c <TM_VoidPrealoadOverFlow+0x52>
        TCNT2= (u8)Copy_u16value;  
    1674:	e4 e4       	ldi	r30, 0x44	; 68
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	80 83       	st	Z, r24
   
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <TM_VoidSetDuty>:


void TM_VoidSetDuty (ST_TIMER_config_t *configurations ,u16 Copy_U8Duty)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <TM_VoidSetDuty+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <TM_VoidSetDuty+0x8>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	7c 83       	std	Y+4, r23	; 0x04
    169c:	6b 83       	std	Y+3, r22	; 0x03
    if( configurations->timer_no== TIMER0)
    169e:	e9 81       	ldd	r30, Y+1	; 0x01
    16a0:	fa 81       	ldd	r31, Y+2	; 0x02
    16a2:	80 81       	ld	r24, Z
    16a4:	88 23       	and	r24, r24
    16a6:	29 f4       	brne	.+10     	; 0x16b2 <TM_VoidSetDuty+0x28>
        OCR0= Copy_U8Duty;
    16a8:	ec e5       	ldi	r30, 0x5C	; 92
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	80 83       	st	Z, r24
    16b0:	15 c0       	rjmp	.+42     	; 0x16dc <TM_VoidSetDuty+0x52>
    else if( configurations->timer_no== TIMER1)
    16b2:	e9 81       	ldd	r30, Y+1	; 0x01
    16b4:	fa 81       	ldd	r31, Y+2	; 0x02
    16b6:	80 81       	ld	r24, Z
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	39 f4       	brne	.+14     	; 0x16ca <TM_VoidSetDuty+0x40>
        OCR1A= Copy_U8Duty;
    16bc:	ea e4       	ldi	r30, 0x4A	; 74
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	80 83       	st	Z, r24
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <TM_VoidSetDuty+0x52>
    else if( configurations->timer_no== TIMER2)
    16ca:	e9 81       	ldd	r30, Y+1	; 0x01
    16cc:	fa 81       	ldd	r31, Y+2	; 0x02
    16ce:	80 81       	ld	r24, Z
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	21 f4       	brne	.+8      	; 0x16dc <TM_VoidSetDuty+0x52>
        OCR2 =Copy_U8Duty;
    16d4:	e3 e4       	ldi	r30, 0x43	; 67
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	80 83       	st	Z, r24
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <TM0_voidStop>:


void TM0_voidStop()
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = STOP_TIMER;
    16f2:	e3 e5       	ldi	r30, 0x53	; 83
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	10 82       	st	Z, r1
}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <TM0_OV_NOINTERRUPT>:

void TM0_OV_NOINTERRUPT(void)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62

    if(TM0OV_INTRRUPT_FLAG == INTERRUPT_DISABLE)
    1706:	80 91 74 00 	lds	r24, 0x0074
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	61 f5       	brne	.+88     	; 0x1766 <TM0_OV_NOINTERRUPT+0x68>
    {
        static u16 counter=0;
        if(counter == 245)
    170e:	80 91 7a 00 	lds	r24, 0x007A
    1712:	90 91 7b 00 	lds	r25, 0x007B
    1716:	85 3f       	cpi	r24, 0xF5	; 245
    1718:	91 05       	cpc	r25, r1
    171a:	61 f4       	brne	.+24     	; 0x1734 <TM0_OV_NOINTERRUPT+0x36>
        {
        	TCNT0=0;
    171c:	e2 e5       	ldi	r30, 0x52	; 82
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	10 82       	st	Z, r1
            ptrf();
    1722:	e0 91 70 00 	lds	r30, 0x0070
    1726:	f0 91 71 00 	lds	r31, 0x0071
    172a:	09 95       	icall
            counter=0;
    172c:	10 92 7b 00 	sts	0x007B, r1
    1730:	10 92 7a 00 	sts	0x007A, r1
        }
        while (GET_BIT(TIFR, TOV0) == 0);
    1734:	e8 e5       	ldi	r30, 0x58	; 88
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	81 70       	andi	r24, 0x01	; 1
    1740:	90 70       	andi	r25, 0x00	; 0
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	b9 f3       	breq	.-18     	; 0x1734 <TM0_OV_NOINTERRUPT+0x36>
        counter++;
    1746:	80 91 7a 00 	lds	r24, 0x007A
    174a:	90 91 7b 00 	lds	r25, 0x007B
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	90 93 7b 00 	sts	0x007B, r25
    1754:	80 93 7a 00 	sts	0x007A, r24
        SET_BIT(TIFR, TOV0);
    1758:	a8 e5       	ldi	r26, 0x58	; 88
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e8 e5       	ldi	r30, 0x58	; 88
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	81 60       	ori	r24, 0x01	; 1
    1764:	8c 93       	st	X, r24
    }

}
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <TM2_OV_NOINTERRUPT>:


void TM2_OV_NOINTERRUPT(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62

    if(TM2OV_INTRRUPT_FLAG == INTERRUPT_DISABLE)
    1774:	80 91 78 00 	lds	r24, 0x0078
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	09 f0       	breq	.+2      	; 0x177e <TM2_OV_NOINTERRUPT+0x12>
    177c:	44 c0       	rjmp	.+136    	; 0x1806 <TM2_OV_NOINTERRUPT+0x9a>
    {
        static volatile u32 counter=0;

        if(counter==245)
    177e:	80 91 7c 00 	lds	r24, 0x007C
    1782:	90 91 7d 00 	lds	r25, 0x007D
    1786:	a0 91 7e 00 	lds	r26, 0x007E
    178a:	b0 91 7f 00 	lds	r27, 0x007F
    178e:	85 3f       	cpi	r24, 0xF5	; 245
    1790:	91 05       	cpc	r25, r1
    1792:	a1 05       	cpc	r26, r1
    1794:	b1 05       	cpc	r27, r1
    1796:	81 f4       	brne	.+32     	; 0x17b8 <TM2_OV_NOINTERRUPT+0x4c>
        {
            TCNT2=0;
    1798:	e4 e4       	ldi	r30, 0x44	; 68
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	10 82       	st	Z, r1
            ptrftm2();
    179e:	e0 91 72 00 	lds	r30, 0x0072
    17a2:	f0 91 73 00 	lds	r31, 0x0073
    17a6:	09 95       	icall
            counter=0;
    17a8:	10 92 7c 00 	sts	0x007C, r1
    17ac:	10 92 7d 00 	sts	0x007D, r1
    17b0:	10 92 7e 00 	sts	0x007E, r1
    17b4:	10 92 7f 00 	sts	0x007F, r1
        }
        while (GET_BIT(TIFR, TOV2) == 0);
    17b8:	e8 e5       	ldi	r30, 0x58	; 88
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	82 95       	swap	r24
    17c0:	86 95       	lsr	r24
    17c2:	86 95       	lsr	r24
    17c4:	83 70       	andi	r24, 0x03	; 3
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	81 70       	andi	r24, 0x01	; 1
    17cc:	90 70       	andi	r25, 0x00	; 0
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	99 f3       	breq	.-26     	; 0x17b8 <TM2_OV_NOINTERRUPT+0x4c>
        counter++;
    17d2:	80 91 7c 00 	lds	r24, 0x007C
    17d6:	90 91 7d 00 	lds	r25, 0x007D
    17da:	a0 91 7e 00 	lds	r26, 0x007E
    17de:	b0 91 7f 00 	lds	r27, 0x007F
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	a1 1d       	adc	r26, r1
    17e6:	b1 1d       	adc	r27, r1
    17e8:	80 93 7c 00 	sts	0x007C, r24
    17ec:	90 93 7d 00 	sts	0x007D, r25
    17f0:	a0 93 7e 00 	sts	0x007E, r26
    17f4:	b0 93 7f 00 	sts	0x007F, r27
        SET_BIT(TIFR, TOV2);
    17f8:	a8 e5       	ldi	r26, 0x58	; 88
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e8 e5       	ldi	r30, 0x58	; 88
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 64       	ori	r24, 0x40	; 64
    1804:	8c 93       	st	X, r24

    }
}
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <__vector_11>:
void __vector_11(void)
{
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	11 24       	eor	r1, r1
    1816:	2f 93       	push	r18
    1818:	3f 93       	push	r19
    181a:	4f 93       	push	r20
    181c:	5f 93       	push	r21
    181e:	6f 93       	push	r22
    1820:	7f 93       	push	r23
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    static u16 counter=0;
	counter++;
    1836:	80 91 80 00 	lds	r24, 0x0080
    183a:	90 91 81 00 	lds	r25, 0x0081
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	90 93 81 00 	sts	0x0081, r25
    1844:	80 93 80 00 	sts	0x0080, r24
	if(counter==245)
    1848:	80 91 80 00 	lds	r24, 0x0080
    184c:	90 91 81 00 	lds	r25, 0x0081
    1850:	85 3f       	cpi	r24, 0xF5	; 245
    1852:	91 05       	cpc	r25, r1
    1854:	61 f4       	brne	.+24     	; 0x186e <__vector_11+0x62>
	{
		TCNT0=0;
    1856:	e2 e5       	ldi	r30, 0x52	; 82
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	10 82       	st	Z, r1
		ptrf();
    185c:	e0 91 70 00 	lds	r30, 0x0070
    1860:	f0 91 71 00 	lds	r31, 0x0071
    1864:	09 95       	icall
		counter=0;
    1866:	10 92 81 00 	sts	0x0081, r1
    186a:	10 92 80 00 	sts	0x0080, r1
	}

}
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	ff 91       	pop	r31
    1874:	ef 91       	pop	r30
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	7f 91       	pop	r23
    1880:	6f 91       	pop	r22
    1882:	5f 91       	pop	r21
    1884:	4f 91       	pop	r20
    1886:	3f 91       	pop	r19
    1888:	2f 91       	pop	r18
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <__vector_5>:

void __vector_5(void)
{
    1894:	1f 92       	push	r1
    1896:	0f 92       	push	r0
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	0f 92       	push	r0
    189c:	11 24       	eor	r1, r1
    189e:	2f 93       	push	r18
    18a0:	3f 93       	push	r19
    18a2:	4f 93       	push	r20
    18a4:	5f 93       	push	r21
    18a6:	6f 93       	push	r22
    18a8:	7f 93       	push	r23
    18aa:	8f 93       	push	r24
    18ac:	9f 93       	push	r25
    18ae:	af 93       	push	r26
    18b0:	bf 93       	push	r27
    18b2:	ef 93       	push	r30
    18b4:	ff 93       	push	r31
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    static u16 counter=0;
	counter++;
    18be:	80 91 82 00 	lds	r24, 0x0082
    18c2:	90 91 83 00 	lds	r25, 0x0083
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	90 93 83 00 	sts	0x0083, r25
    18cc:	80 93 82 00 	sts	0x0082, r24
	if(counter==245)
    18d0:	80 91 82 00 	lds	r24, 0x0082
    18d4:	90 91 83 00 	lds	r25, 0x0083
    18d8:	85 3f       	cpi	r24, 0xF5	; 245
    18da:	91 05       	cpc	r25, r1
    18dc:	61 f4       	brne	.+24     	; 0x18f6 <__vector_5+0x62>
	{
		TCNT0=0;
    18de:	e2 e5       	ldi	r30, 0x52	; 82
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	10 82       	st	Z, r1
		ptrftm2();
    18e4:	e0 91 72 00 	lds	r30, 0x0072
    18e8:	f0 91 73 00 	lds	r31, 0x0073
    18ec:	09 95       	icall
		counter=0;
    18ee:	10 92 83 00 	sts	0x0083, r1
    18f2:	10 92 82 00 	sts	0x0082, r1
	}

}
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	bf 91       	pop	r27
    1900:	af 91       	pop	r26
    1902:	9f 91       	pop	r25
    1904:	8f 91       	pop	r24
    1906:	7f 91       	pop	r23
    1908:	6f 91       	pop	r22
    190a:	5f 91       	pop	r21
    190c:	4f 91       	pop	r20
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	0f 90       	pop	r0
    1918:	1f 90       	pop	r1
    191a:	18 95       	reti

0000191c <Toggle>:
#include"BIT_MATH.h"
#include"DIO_interface.h"
#include "TIMER_Interface.h"

void Toggle(void)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
	DIO_voidTogglePin(PORTA,PIN0);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <DIO_voidTogglePin>
}
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <Toggle1>:
void Toggle1(void)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
	DIO_voidTogglePin(PORTB,PIN0);
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <DIO_voidTogglePin>
}
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <main>:

void main(void)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	a4 97       	sbiw	r28, 0x24	; 36
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
	ST_TIMER_config_t TM0 = {TIMER0, NORMAL,CLK_256, 0,INTERRUPT_DISABLE};
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	9a 8b       	std	Y+18, r25	; 0x12
    1962:	89 8b       	std	Y+17, r24	; 0x11
    1964:	eb e6       	ldi	r30, 0x6B	; 107
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	fc 8b       	std	Y+20, r31	; 0x14
    196a:	eb 8b       	std	Y+19, r30	; 0x13
    196c:	f5 e0       	ldi	r31, 0x05	; 5
    196e:	fd 8b       	std	Y+21, r31	; 0x15
    1970:	eb 89       	ldd	r30, Y+19	; 0x13
    1972:	fc 89       	ldd	r31, Y+20	; 0x14
    1974:	00 80       	ld	r0, Z
    1976:	8b 89       	ldd	r24, Y+19	; 0x13
    1978:	9c 89       	ldd	r25, Y+20	; 0x14
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	9c 8b       	std	Y+20, r25	; 0x14
    197e:	8b 8b       	std	Y+19, r24	; 0x13
    1980:	e9 89       	ldd	r30, Y+17	; 0x11
    1982:	fa 89       	ldd	r31, Y+18	; 0x12
    1984:	00 82       	st	Z, r0
    1986:	89 89       	ldd	r24, Y+17	; 0x11
    1988:	9a 89       	ldd	r25, Y+18	; 0x12
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	9a 8b       	std	Y+18, r25	; 0x12
    198e:	89 8b       	std	Y+17, r24	; 0x11
    1990:	9d 89       	ldd	r25, Y+21	; 0x15
    1992:	91 50       	subi	r25, 0x01	; 1
    1994:	9d 8b       	std	Y+21, r25	; 0x15
    1996:	ed 89       	ldd	r30, Y+21	; 0x15
    1998:	ee 23       	and	r30, r30
    199a:	51 f7       	brne	.-44     	; 0x1970 <main+0x28>
	ST_TIMER_config_t TM1 = {TIMER2, NORMAL,CLK_256, 0,INTERRUPT_DISABLE};
    199c:	ce 01       	movw	r24, r28
    199e:	06 96       	adiw	r24, 0x06	; 6
    19a0:	9f 8b       	std	Y+23, r25	; 0x17
    19a2:	8e 8b       	std	Y+22, r24	; 0x16
    19a4:	e6 e6       	ldi	r30, 0x66	; 102
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	f9 8f       	std	Y+25, r31	; 0x19
    19aa:	e8 8f       	std	Y+24, r30	; 0x18
    19ac:	f5 e0       	ldi	r31, 0x05	; 5
    19ae:	fa 8f       	std	Y+26, r31	; 0x1a
    19b0:	e8 8d       	ldd	r30, Y+24	; 0x18
    19b2:	f9 8d       	ldd	r31, Y+25	; 0x19
    19b4:	00 80       	ld	r0, Z
    19b6:	88 8d       	ldd	r24, Y+24	; 0x18
    19b8:	99 8d       	ldd	r25, Y+25	; 0x19
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	99 8f       	std	Y+25, r25	; 0x19
    19be:	88 8f       	std	Y+24, r24	; 0x18
    19c0:	ee 89       	ldd	r30, Y+22	; 0x16
    19c2:	ff 89       	ldd	r31, Y+23	; 0x17
    19c4:	00 82       	st	Z, r0
    19c6:	8e 89       	ldd	r24, Y+22	; 0x16
    19c8:	9f 89       	ldd	r25, Y+23	; 0x17
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	9f 8b       	std	Y+23, r25	; 0x17
    19ce:	8e 8b       	std	Y+22, r24	; 0x16
    19d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19d2:	91 50       	subi	r25, 0x01	; 1
    19d4:	9a 8f       	std	Y+26, r25	; 0x1a
    19d6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    19d8:	ee 23       	and	r30, r30
    19da:	51 f7       	brne	.-44     	; 0x19b0 <main+0x68>


    ST_DIO_config_t Led ={PORTA,PIN0,OUTPUT};
    19dc:	ce 01       	movw	r24, r28
    19de:	0b 96       	adiw	r24, 0x0b	; 11
    19e0:	9c 8f       	std	Y+28, r25	; 0x1c
    19e2:	8b 8f       	std	Y+27, r24	; 0x1b
    19e4:	e3 e6       	ldi	r30, 0x63	; 99
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	fe 8f       	std	Y+30, r31	; 0x1e
    19ea:	ed 8f       	std	Y+29, r30	; 0x1d
    19ec:	f3 e0       	ldi	r31, 0x03	; 3
    19ee:	ff 8f       	std	Y+31, r31	; 0x1f
    19f0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    19f2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    19f4:	00 80       	ld	r0, Z
    19f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	9e 8f       	std	Y+30, r25	; 0x1e
    19fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1a00:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1a02:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1a04:	00 82       	st	Z, r0
    1a06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	9c 8f       	std	Y+28, r25	; 0x1c
    1a0e:	8b 8f       	std	Y+27, r24	; 0x1b
    1a10:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a12:	91 50       	subi	r25, 0x01	; 1
    1a14:	9f 8f       	std	Y+31, r25	; 0x1f
    1a16:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1a18:	ee 23       	and	r30, r30
    1a1a:	51 f7       	brne	.-44     	; 0x19f0 <main+0xa8>
    ST_DIO_config_t Led1 ={PORTB,PIN0,OUTPUT};
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	0e 96       	adiw	r24, 0x0e	; 14
    1a20:	99 a3       	std	Y+33, r25	; 0x21
    1a22:	88 a3       	std	Y+32, r24	; 0x20
    1a24:	e0 e6       	ldi	r30, 0x60	; 96
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	fb a3       	std	Y+35, r31	; 0x23
    1a2a:	ea a3       	std	Y+34, r30	; 0x22
    1a2c:	f3 e0       	ldi	r31, 0x03	; 3
    1a2e:	fc a3       	std	Y+36, r31	; 0x24
    1a30:	ea a1       	ldd	r30, Y+34	; 0x22
    1a32:	fb a1       	ldd	r31, Y+35	; 0x23
    1a34:	00 80       	ld	r0, Z
    1a36:	8a a1       	ldd	r24, Y+34	; 0x22
    1a38:	9b a1       	ldd	r25, Y+35	; 0x23
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	9b a3       	std	Y+35, r25	; 0x23
    1a3e:	8a a3       	std	Y+34, r24	; 0x22
    1a40:	e8 a1       	ldd	r30, Y+32	; 0x20
    1a42:	f9 a1       	ldd	r31, Y+33	; 0x21
    1a44:	00 82       	st	Z, r0
    1a46:	88 a1       	ldd	r24, Y+32	; 0x20
    1a48:	99 a1       	ldd	r25, Y+33	; 0x21
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	99 a3       	std	Y+33, r25	; 0x21
    1a4e:	88 a3       	std	Y+32, r24	; 0x20
    1a50:	9c a1       	ldd	r25, Y+36	; 0x24
    1a52:	91 50       	subi	r25, 0x01	; 1
    1a54:	9c a3       	std	Y+36, r25	; 0x24
    1a56:	ec a1       	ldd	r30, Y+36	; 0x24
    1a58:	ee 23       	and	r30, r30
    1a5a:	51 f7       	brne	.-44     	; 0x1a30 <main+0xe8>

    DIO_voidSetPinDirection(&Led);
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	0b 96       	adiw	r24, 0x0b	; 11
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(&Led1);
    1a64:	ce 01       	movw	r24, r28
    1a66:	0e 96       	adiw	r24, 0x0e	; 14
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>

    TM_voidTimerInit(&TM0);
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	0e 94 55 03 	call	0x6aa	; 0x6aa <TM_voidTimerInit>
    TM_voidTimerInit(&TM1);
    1a74:	ce 01       	movw	r24, r28
    1a76:	06 96       	adiw	r24, 0x06	; 6
    1a78:	0e 94 55 03 	call	0x6aa	; 0x6aa <TM_voidTimerInit>


    TM0_OV_voidSetCallBack(Toggle);
    1a7c:	8e e8       	ldi	r24, 0x8E	; 142
    1a7e:	9c e0       	ldi	r25, 0x0C	; 12
    1a80:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TM0_OV_voidSetCallBack>
    TM2_OV_voidSetCallBack(Toggle1);
    1a84:	89 e9       	ldi	r24, 0x99	; 153
    1a86:	9c e0       	ldi	r25, 0x0C	; 12
    1a88:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <TM2_OV_voidSetCallBack>


    while (1)
    {
    	TM0_OV_NOINTERRUPT();
    1a8c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <TM0_OV_NOINTERRUPT>
    	TM2_OV_NOINTERRUPT();
    1a90:	0e 94 b6 0b 	call	0x176c	; 0x176c <TM2_OV_NOINTERRUPT>
    1a94:	fb cf       	rjmp	.-10     	; 0x1a8c <main+0x144>

00001a96 <_exit>:
    1a96:	f8 94       	cli

00001a98 <__stop_program>:
    1a98:	ff cf       	rjmp	.-2      	; 0x1a98 <__stop_program>
