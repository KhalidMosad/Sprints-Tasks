
AVR_RTOSSCHODULAR3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001086  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002b  00800060  00800060  000010fa  2**0
                  ALLOC
  2 .stab         0000111c  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000801  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__vector_5>
      18:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__vector_6>
      1c:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__vector_7>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__vector_9>
      28:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__vector_10>
      2c:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 38       	cpi	r26, 0x8B	; 139
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 fd 07 	call	0xffa	; 0xffa <main>
      74:	0c 94 41 08 	jmp	0x1082	; 0x1082 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_VidSetPinDirection>:
#include"DIO_register.h"
#include"DIO_config.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection		(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8state)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
      84:	27 97       	sbiw	r28, 0x07	; 7
      86:	0f b6       	in	r0, 0x3f	; 63
      88:	f8 94       	cli
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	0f be       	out	0x3f, r0	; 63
      8e:	cd bf       	out	0x3d, r28	; 61
      90:	89 83       	std	Y+1, r24	; 0x01
      92:	6a 83       	std	Y+2, r22	; 0x02
      94:	4b 83       	std	Y+3, r20	; 0x03
	if(OUTPUT==copy_U8state)
      96:	8b 81       	ldd	r24, Y+3	; 0x03
      98:	81 30       	cpi	r24, 0x01	; 1
      9a:	09 f0       	breq	.+2      	; 0x9e <DIO_VidSetPinDirection+0x22>
      9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_VidSetPinDirection+0x100>
	{
		switch (copy_u8port)
      9e:	89 81       	ldd	r24, Y+1	; 0x01
      a0:	28 2f       	mov	r18, r24
      a2:	30 e0       	ldi	r19, 0x00	; 0
      a4:	3f 83       	std	Y+7, r19	; 0x07
      a6:	2e 83       	std	Y+6, r18	; 0x06
      a8:	8e 81       	ldd	r24, Y+6	; 0x06
      aa:	9f 81       	ldd	r25, Y+7	; 0x07
      ac:	81 30       	cpi	r24, 0x01	; 1
      ae:	91 05       	cpc	r25, r1
      b0:	49 f1       	breq	.+82     	; 0x104 <DIO_VidSetPinDirection+0x88>
      b2:	2e 81       	ldd	r18, Y+6	; 0x06
      b4:	3f 81       	ldd	r19, Y+7	; 0x07
      b6:	22 30       	cpi	r18, 0x02	; 2
      b8:	31 05       	cpc	r19, r1
      ba:	2c f4       	brge	.+10     	; 0xc6 <DIO_VidSetPinDirection+0x4a>
      bc:	8e 81       	ldd	r24, Y+6	; 0x06
      be:	9f 81       	ldd	r25, Y+7	; 0x07
      c0:	00 97       	sbiw	r24, 0x00	; 0
      c2:	61 f0       	breq	.+24     	; 0xdc <DIO_VidSetPinDirection+0x60>
      c4:	d2 c0       	rjmp	.+420    	; 0x26a <DIO_VidSetPinDirection+0x1ee>
      c6:	2e 81       	ldd	r18, Y+6	; 0x06
      c8:	3f 81       	ldd	r19, Y+7	; 0x07
      ca:	22 30       	cpi	r18, 0x02	; 2
      cc:	31 05       	cpc	r19, r1
      ce:	71 f1       	breq	.+92     	; 0x12c <DIO_VidSetPinDirection+0xb0>
      d0:	8e 81       	ldd	r24, Y+6	; 0x06
      d2:	9f 81       	ldd	r25, Y+7	; 0x07
      d4:	83 30       	cpi	r24, 0x03	; 3
      d6:	91 05       	cpc	r25, r1
      d8:	e9 f1       	breq	.+122    	; 0x154 <DIO_VidSetPinDirection+0xd8>
      da:	c7 c0       	rjmp	.+398    	; 0x26a <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:SET_BIT(DDRA, copy_U8pin); break;
      dc:	aa e3       	ldi	r26, 0x3A	; 58
      de:	b0 e0       	ldi	r27, 0x00	; 0
      e0:	ea e3       	ldi	r30, 0x3A	; 58
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	48 2f       	mov	r20, r24
      e8:	8a 81       	ldd	r24, Y+2	; 0x02
      ea:	28 2f       	mov	r18, r24
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	02 2e       	mov	r0, r18
      f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_VidSetPinDirection+0x7e>
      f6:	88 0f       	add	r24, r24
      f8:	99 1f       	adc	r25, r25
      fa:	0a 94       	dec	r0
      fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_VidSetPinDirection+0x7a>
      fe:	84 2b       	or	r24, r20
     100:	8c 93       	st	X, r24
     102:	b3 c0       	rjmp	.+358    	; 0x26a <DIO_VidSetPinDirection+0x1ee>
			case PORTB:SET_BIT(DDRB, copy_U8pin); break;
     104:	a7 e3       	ldi	r26, 0x37	; 55
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e7 e3       	ldi	r30, 0x37	; 55
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 81       	ld	r24, Z
     10e:	48 2f       	mov	r20, r24
     110:	8a 81       	ldd	r24, Y+2	; 0x02
     112:	28 2f       	mov	r18, r24
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	02 2e       	mov	r0, r18
     11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_VidSetPinDirection+0xa6>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	0a 94       	dec	r0
     124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_VidSetPinDirection+0xa2>
     126:	84 2b       	or	r24, r20
     128:	8c 93       	st	X, r24
     12a:	9f c0       	rjmp	.+318    	; 0x26a <DIO_VidSetPinDirection+0x1ee>
			case PORTC:SET_BIT(DDRC, copy_U8pin); break;
     12c:	a4 e3       	ldi	r26, 0x34	; 52
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	e4 e3       	ldi	r30, 0x34	; 52
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	48 2f       	mov	r20, r24
     138:	8a 81       	ldd	r24, Y+2	; 0x02
     13a:	28 2f       	mov	r18, r24
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	02 2e       	mov	r0, r18
     144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_VidSetPinDirection+0xce>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	0a 94       	dec	r0
     14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_VidSetPinDirection+0xca>
     14e:	84 2b       	or	r24, r20
     150:	8c 93       	st	X, r24
     152:	8b c0       	rjmp	.+278    	; 0x26a <DIO_VidSetPinDirection+0x1ee>
			case PORTD:SET_BIT(DDRD, copy_U8pin); break;
     154:	a1 e3       	ldi	r26, 0x31	; 49
     156:	b0 e0       	ldi	r27, 0x00	; 0
     158:	e1 e3       	ldi	r30, 0x31	; 49
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	48 2f       	mov	r20, r24
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	28 2f       	mov	r18, r24
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	02 2e       	mov	r0, r18
     16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_VidSetPinDirection+0xf6>
     16e:	88 0f       	add	r24, r24
     170:	99 1f       	adc	r25, r25
     172:	0a 94       	dec	r0
     174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_VidSetPinDirection+0xf2>
     176:	84 2b       	or	r24, r20
     178:	8c 93       	st	X, r24
     17a:	77 c0       	rjmp	.+238    	; 0x26a <DIO_VidSetPinDirection+0x1ee>
	
		}	
	}
	else if(INPUT==copy_U8state)
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	88 23       	and	r24, r24
     180:	09 f0       	breq	.+2      	; 0x184 <DIO_VidSetPinDirection+0x108>
     182:	73 c0       	rjmp	.+230    	; 0x26a <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	28 2f       	mov	r18, r24
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	3d 83       	std	Y+5, r19	; 0x05
     18c:	2c 83       	std	Y+4, r18	; 0x04
     18e:	8c 81       	ldd	r24, Y+4	; 0x04
     190:	9d 81       	ldd	r25, Y+5	; 0x05
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	91 05       	cpc	r25, r1
     196:	59 f1       	breq	.+86     	; 0x1ee <DIO_VidSetPinDirection+0x172>
     198:	2c 81       	ldd	r18, Y+4	; 0x04
     19a:	3d 81       	ldd	r19, Y+5	; 0x05
     19c:	22 30       	cpi	r18, 0x02	; 2
     19e:	31 05       	cpc	r19, r1
     1a0:	2c f4       	brge	.+10     	; 0x1ac <DIO_VidSetPinDirection+0x130>
     1a2:	8c 81       	ldd	r24, Y+4	; 0x04
     1a4:	9d 81       	ldd	r25, Y+5	; 0x05
     1a6:	00 97       	sbiw	r24, 0x00	; 0
     1a8:	69 f0       	breq	.+26     	; 0x1c4 <DIO_VidSetPinDirection+0x148>
     1aa:	5f c0       	rjmp	.+190    	; 0x26a <DIO_VidSetPinDirection+0x1ee>
     1ac:	2c 81       	ldd	r18, Y+4	; 0x04
     1ae:	3d 81       	ldd	r19, Y+5	; 0x05
     1b0:	22 30       	cpi	r18, 0x02	; 2
     1b2:	31 05       	cpc	r19, r1
     1b4:	89 f1       	breq	.+98     	; 0x218 <DIO_VidSetPinDirection+0x19c>
     1b6:	8c 81       	ldd	r24, Y+4	; 0x04
     1b8:	9d 81       	ldd	r25, Y+5	; 0x05
     1ba:	83 30       	cpi	r24, 0x03	; 3
     1bc:	91 05       	cpc	r25, r1
     1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_VidSetPinDirection+0x146>
     1c0:	40 c0       	rjmp	.+128    	; 0x242 <DIO_VidSetPinDirection+0x1c6>
     1c2:	53 c0       	rjmp	.+166    	; 0x26a <DIO_VidSetPinDirection+0x1ee>
		{
			case PORTA:CLR_BIT(DDRA, copy_U8pin); break;
     1c4:	aa e3       	ldi	r26, 0x3A	; 58
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	ea e3       	ldi	r30, 0x3A	; 58
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	48 2f       	mov	r20, r24
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	28 2f       	mov	r18, r24
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	02 2e       	mov	r0, r18
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_VidSetPinDirection+0x166>
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	0a 94       	dec	r0
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_VidSetPinDirection+0x162>
     1e6:	80 95       	com	r24
     1e8:	84 23       	and	r24, r20
     1ea:	8c 93       	st	X, r24
     1ec:	3e c0       	rjmp	.+124    	; 0x26a <DIO_VidSetPinDirection+0x1ee>
			case PORTB:CLR_BIT(DDRB, copy_U8pin); break;
     1ee:	a7 e3       	ldi	r26, 0x37	; 55
     1f0:	b0 e0       	ldi	r27, 0x00	; 0
     1f2:	e7 e3       	ldi	r30, 0x37	; 55
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	48 2f       	mov	r20, r24
     1fa:	8a 81       	ldd	r24, Y+2	; 0x02
     1fc:	28 2f       	mov	r18, r24
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 2e       	mov	r0, r18
     206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_VidSetPinDirection+0x190>
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	0a 94       	dec	r0
     20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_VidSetPinDirection+0x18c>
     210:	80 95       	com	r24
     212:	84 23       	and	r24, r20
     214:	8c 93       	st	X, r24
     216:	29 c0       	rjmp	.+82     	; 0x26a <DIO_VidSetPinDirection+0x1ee>
		    case PORTC:CLR_BIT(DDRC, copy_U8pin); break;
     218:	a4 e3       	ldi	r26, 0x34	; 52
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e4 e3       	ldi	r30, 0x34	; 52
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	48 2f       	mov	r20, r24
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	28 2f       	mov	r18, r24
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 2e       	mov	r0, r18
     230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_VidSetPinDirection+0x1ba>
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	0a 94       	dec	r0
     238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_VidSetPinDirection+0x1b6>
     23a:	80 95       	com	r24
     23c:	84 23       	and	r24, r20
     23e:	8c 93       	st	X, r24
     240:	14 c0       	rjmp	.+40     	; 0x26a <DIO_VidSetPinDirection+0x1ee>
		    case PORTD:CLR_BIT(DDRD, copy_U8pin); break;
     242:	a1 e3       	ldi	r26, 0x31	; 49
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e1 e3       	ldi	r30, 0x31	; 49
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	48 2f       	mov	r20, r24
     24e:	8a 81       	ldd	r24, Y+2	; 0x02
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	02 2e       	mov	r0, r18
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_VidSetPinDirection+0x1e4>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	0a 94       	dec	r0
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_VidSetPinDirection+0x1e0>
     264:	80 95       	com	r24
     266:	84 23       	and	r24, r20
     268:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
     26a:	27 96       	adiw	r28, 0x07	; 7
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret

0000027c <DIO_VidSetPinValue>:
void DIO_VidSetPinValue			(u8 copy_u8port, u8 copy_U8pin, u8 copy_U8value)
{
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	27 97       	sbiw	r28, 0x07	; 7
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	cd bf       	out	0x3d, r28	; 61
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	6a 83       	std	Y+2, r22	; 0x02
     294:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_U8value)
     296:	8b 81       	ldd	r24, Y+3	; 0x03
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	09 f0       	breq	.+2      	; 0x29e <DIO_VidSetPinValue+0x22>
     29c:	6f c0       	rjmp	.+222    	; 0x37c <DIO_VidSetPinValue+0x100>
	{
		switch (copy_u8port)
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	28 2f       	mov	r18, r24
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	3f 83       	std	Y+7, r19	; 0x07
     2a6:	2e 83       	std	Y+6, r18	; 0x06
     2a8:	8e 81       	ldd	r24, Y+6	; 0x06
     2aa:	9f 81       	ldd	r25, Y+7	; 0x07
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	91 05       	cpc	r25, r1
     2b0:	49 f1       	breq	.+82     	; 0x304 <DIO_VidSetPinValue+0x88>
     2b2:	2e 81       	ldd	r18, Y+6	; 0x06
     2b4:	3f 81       	ldd	r19, Y+7	; 0x07
     2b6:	22 30       	cpi	r18, 0x02	; 2
     2b8:	31 05       	cpc	r19, r1
     2ba:	2c f4       	brge	.+10     	; 0x2c6 <DIO_VidSetPinValue+0x4a>
     2bc:	8e 81       	ldd	r24, Y+6	; 0x06
     2be:	9f 81       	ldd	r25, Y+7	; 0x07
     2c0:	00 97       	sbiw	r24, 0x00	; 0
     2c2:	61 f0       	breq	.+24     	; 0x2dc <DIO_VidSetPinValue+0x60>
     2c4:	d2 c0       	rjmp	.+420    	; 0x46a <DIO_VidSetPinValue+0x1ee>
     2c6:	2e 81       	ldd	r18, Y+6	; 0x06
     2c8:	3f 81       	ldd	r19, Y+7	; 0x07
     2ca:	22 30       	cpi	r18, 0x02	; 2
     2cc:	31 05       	cpc	r19, r1
     2ce:	71 f1       	breq	.+92     	; 0x32c <DIO_VidSetPinValue+0xb0>
     2d0:	8e 81       	ldd	r24, Y+6	; 0x06
     2d2:	9f 81       	ldd	r25, Y+7	; 0x07
     2d4:	83 30       	cpi	r24, 0x03	; 3
     2d6:	91 05       	cpc	r25, r1
     2d8:	e9 f1       	breq	.+122    	; 0x354 <DIO_VidSetPinValue+0xd8>
     2da:	c7 c0       	rjmp	.+398    	; 0x46a <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_U8pin); break;
     2dc:	ab e3       	ldi	r26, 0x3B	; 59
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	eb e3       	ldi	r30, 0x3B	; 59
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	48 2f       	mov	r20, r24
     2e8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ea:	28 2f       	mov	r18, r24
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	02 2e       	mov	r0, r18
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_VidSetPinValue+0x7e>
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	0a 94       	dec	r0
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_VidSetPinValue+0x7a>
     2fe:	84 2b       	or	r24, r20
     300:	8c 93       	st	X, r24
     302:	b3 c0       	rjmp	.+358    	; 0x46a <DIO_VidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_U8pin); break;
     304:	a8 e3       	ldi	r26, 0x38	; 56
     306:	b0 e0       	ldi	r27, 0x00	; 0
     308:	e8 e3       	ldi	r30, 0x38	; 56
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	48 2f       	mov	r20, r24
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	28 2f       	mov	r18, r24
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	02 2e       	mov	r0, r18
     31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_VidSetPinValue+0xa6>
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	0a 94       	dec	r0
     324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_VidSetPinValue+0xa2>
     326:	84 2b       	or	r24, r20
     328:	8c 93       	st	X, r24
     32a:	9f c0       	rjmp	.+318    	; 0x46a <DIO_VidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_U8pin); break;
     32c:	a5 e3       	ldi	r26, 0x35	; 53
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e5 e3       	ldi	r30, 0x35	; 53
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	48 2f       	mov	r20, r24
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	28 2f       	mov	r18, r24
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	02 2e       	mov	r0, r18
     344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_VidSetPinValue+0xce>
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	0a 94       	dec	r0
     34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_VidSetPinValue+0xca>
     34e:	84 2b       	or	r24, r20
     350:	8c 93       	st	X, r24
     352:	8b c0       	rjmp	.+278    	; 0x46a <DIO_VidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_U8pin); break;
     354:	a2 e3       	ldi	r26, 0x32	; 50
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	e2 e3       	ldi	r30, 0x32	; 50
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	48 2f       	mov	r20, r24
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	28 2f       	mov	r18, r24
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	02 2e       	mov	r0, r18
     36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_VidSetPinValue+0xf6>
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	0a 94       	dec	r0
     374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_VidSetPinValue+0xf2>
     376:	84 2b       	or	r24, r20
     378:	8c 93       	st	X, r24
     37a:	77 c0       	rjmp	.+238    	; 0x46a <DIO_VidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_U8value)
     37c:	8b 81       	ldd	r24, Y+3	; 0x03
     37e:	88 23       	and	r24, r24
     380:	09 f0       	breq	.+2      	; 0x384 <DIO_VidSetPinValue+0x108>
     382:	73 c0       	rjmp	.+230    	; 0x46a <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	28 2f       	mov	r18, r24
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	3d 83       	std	Y+5, r19	; 0x05
     38c:	2c 83       	std	Y+4, r18	; 0x04
     38e:	8c 81       	ldd	r24, Y+4	; 0x04
     390:	9d 81       	ldd	r25, Y+5	; 0x05
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	91 05       	cpc	r25, r1
     396:	59 f1       	breq	.+86     	; 0x3ee <DIO_VidSetPinValue+0x172>
     398:	2c 81       	ldd	r18, Y+4	; 0x04
     39a:	3d 81       	ldd	r19, Y+5	; 0x05
     39c:	22 30       	cpi	r18, 0x02	; 2
     39e:	31 05       	cpc	r19, r1
     3a0:	2c f4       	brge	.+10     	; 0x3ac <DIO_VidSetPinValue+0x130>
     3a2:	8c 81       	ldd	r24, Y+4	; 0x04
     3a4:	9d 81       	ldd	r25, Y+5	; 0x05
     3a6:	00 97       	sbiw	r24, 0x00	; 0
     3a8:	69 f0       	breq	.+26     	; 0x3c4 <DIO_VidSetPinValue+0x148>
     3aa:	5f c0       	rjmp	.+190    	; 0x46a <DIO_VidSetPinValue+0x1ee>
     3ac:	2c 81       	ldd	r18, Y+4	; 0x04
     3ae:	3d 81       	ldd	r19, Y+5	; 0x05
     3b0:	22 30       	cpi	r18, 0x02	; 2
     3b2:	31 05       	cpc	r19, r1
     3b4:	89 f1       	breq	.+98     	; 0x418 <DIO_VidSetPinValue+0x19c>
     3b6:	8c 81       	ldd	r24, Y+4	; 0x04
     3b8:	9d 81       	ldd	r25, Y+5	; 0x05
     3ba:	83 30       	cpi	r24, 0x03	; 3
     3bc:	91 05       	cpc	r25, r1
     3be:	09 f4       	brne	.+2      	; 0x3c2 <DIO_VidSetPinValue+0x146>
     3c0:	40 c0       	rjmp	.+128    	; 0x442 <DIO_VidSetPinValue+0x1c6>
     3c2:	53 c0       	rjmp	.+166    	; 0x46a <DIO_VidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_U8pin); break;
     3c4:	ab e3       	ldi	r26, 0x3B	; 59
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	eb e3       	ldi	r30, 0x3B	; 59
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	48 2f       	mov	r20, r24
     3d0:	8a 81       	ldd	r24, Y+2	; 0x02
     3d2:	28 2f       	mov	r18, r24
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	02 2e       	mov	r0, r18
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_VidSetPinValue+0x166>
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	0a 94       	dec	r0
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_VidSetPinValue+0x162>
     3e6:	80 95       	com	r24
     3e8:	84 23       	and	r24, r20
     3ea:	8c 93       	st	X, r24
     3ec:	3e c0       	rjmp	.+124    	; 0x46a <DIO_VidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_U8pin); break;
     3ee:	a8 e3       	ldi	r26, 0x38	; 56
     3f0:	b0 e0       	ldi	r27, 0x00	; 0
     3f2:	e8 e3       	ldi	r30, 0x38	; 56
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	48 2f       	mov	r20, r24
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	28 2f       	mov	r18, r24
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	02 2e       	mov	r0, r18
     406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_VidSetPinValue+0x190>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_VidSetPinValue+0x18c>
     410:	80 95       	com	r24
     412:	84 23       	and	r24, r20
     414:	8c 93       	st	X, r24
     416:	29 c0       	rjmp	.+82     	; 0x46a <DIO_VidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_U8pin); break;
     418:	a5 e3       	ldi	r26, 0x35	; 53
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	e5 e3       	ldi	r30, 0x35	; 53
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	48 2f       	mov	r20, r24
     424:	8a 81       	ldd	r24, Y+2	; 0x02
     426:	28 2f       	mov	r18, r24
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	02 2e       	mov	r0, r18
     430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_VidSetPinValue+0x1ba>
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	0a 94       	dec	r0
     438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_VidSetPinValue+0x1b6>
     43a:	80 95       	com	r24
     43c:	84 23       	and	r24, r20
     43e:	8c 93       	st	X, r24
     440:	14 c0       	rjmp	.+40     	; 0x46a <DIO_VidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_U8pin); break;
     442:	a2 e3       	ldi	r26, 0x32	; 50
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e2 e3       	ldi	r30, 0x32	; 50
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	48 2f       	mov	r20, r24
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	28 2f       	mov	r18, r24
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	02 2e       	mov	r0, r18
     45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_VidSetPinValue+0x1e4>
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	0a 94       	dec	r0
     462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_VidSetPinValue+0x1e0>
     464:	80 95       	com	r24
     466:	84 23       	and	r24, r20
     468:	8c 93       	st	X, r24
		
	}	
	
	
	
}
     46a:	27 96       	adiw	r28, 0x07	; 7
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	cf 91       	pop	r28
     478:	df 91       	pop	r29
     47a:	08 95       	ret

0000047c <DIO_VidGetPinValue>:


u8 DIO_VidGetPinValue			(u8 copy_u8port, u8 Copy_U8Pin)
{
     47c:	df 93       	push	r29
     47e:	cf 93       	push	r28
     480:	00 d0       	rcall	.+0      	; 0x482 <DIO_VidGetPinValue+0x6>
     482:	00 d0       	rcall	.+0      	; 0x484 <DIO_VidGetPinValue+0x8>
     484:	0f 92       	push	r0
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	8a 83       	std	Y+2, r24	; 0x02
     48c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcal_U8PinResult=0;
     48e:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
     490:	8a 81       	ldd	r24, Y+2	; 0x02
     492:	28 2f       	mov	r18, r24
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	3d 83       	std	Y+5, r19	; 0x05
     498:	2c 83       	std	Y+4, r18	; 0x04
     49a:	4c 81       	ldd	r20, Y+4	; 0x04
     49c:	5d 81       	ldd	r21, Y+5	; 0x05
     49e:	41 30       	cpi	r20, 0x01	; 1
     4a0:	51 05       	cpc	r21, r1
     4a2:	41 f1       	breq	.+80     	; 0x4f4 <DIO_VidGetPinValue+0x78>
     4a4:	8c 81       	ldd	r24, Y+4	; 0x04
     4a6:	9d 81       	ldd	r25, Y+5	; 0x05
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	91 05       	cpc	r25, r1
     4ac:	34 f4       	brge	.+12     	; 0x4ba <DIO_VidGetPinValue+0x3e>
     4ae:	2c 81       	ldd	r18, Y+4	; 0x04
     4b0:	3d 81       	ldd	r19, Y+5	; 0x05
     4b2:	21 15       	cp	r18, r1
     4b4:	31 05       	cpc	r19, r1
     4b6:	61 f0       	breq	.+24     	; 0x4d0 <DIO_VidGetPinValue+0x54>
     4b8:	52 c0       	rjmp	.+164    	; 0x55e <DIO_VidGetPinValue+0xe2>
     4ba:	4c 81       	ldd	r20, Y+4	; 0x04
     4bc:	5d 81       	ldd	r21, Y+5	; 0x05
     4be:	42 30       	cpi	r20, 0x02	; 2
     4c0:	51 05       	cpc	r21, r1
     4c2:	51 f1       	breq	.+84     	; 0x518 <DIO_VidGetPinValue+0x9c>
     4c4:	8c 81       	ldd	r24, Y+4	; 0x04
     4c6:	9d 81       	ldd	r25, Y+5	; 0x05
     4c8:	83 30       	cpi	r24, 0x03	; 3
     4ca:	91 05       	cpc	r25, r1
     4cc:	b9 f1       	breq	.+110    	; 0x53c <DIO_VidGetPinValue+0xc0>
     4ce:	47 c0       	rjmp	.+142    	; 0x55e <DIO_VidGetPinValue+0xe2>

			case PORTA :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
     4d0:	e9 e3       	ldi	r30, 0x39	; 57
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	28 2f       	mov	r18, r24
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	8b 81       	ldd	r24, Y+3	; 0x03
     4dc:	88 2f       	mov	r24, r24
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	a9 01       	movw	r20, r18
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_VidGetPinValue+0x6c>
     4e4:	55 95       	asr	r21
     4e6:	47 95       	ror	r20
     4e8:	8a 95       	dec	r24
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_VidGetPinValue+0x68>
     4ec:	ca 01       	movw	r24, r20
     4ee:	81 70       	andi	r24, 0x01	; 1
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	35 c0       	rjmp	.+106    	; 0x55e <DIO_VidGetPinValue+0xe2>
			case PORTB :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
     4f4:	e6 e3       	ldi	r30, 0x36	; 54
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	28 2f       	mov	r18, r24
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	88 2f       	mov	r24, r24
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_VidGetPinValue+0x90>
     508:	55 95       	asr	r21
     50a:	47 95       	ror	r20
     50c:	8a 95       	dec	r24
     50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_VidGetPinValue+0x8c>
     510:	ca 01       	movw	r24, r20
     512:	81 70       	andi	r24, 0x01	; 1
     514:	89 83       	std	Y+1, r24	; 0x01
     516:	23 c0       	rjmp	.+70     	; 0x55e <DIO_VidGetPinValue+0xe2>
			case PORTC :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
     518:	e3 e3       	ldi	r30, 0x33	; 51
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	28 2f       	mov	r18, r24
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	88 2f       	mov	r24, r24
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	a9 01       	movw	r20, r18
     52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_VidGetPinValue+0xb4>
     52c:	55 95       	asr	r21
     52e:	47 95       	ror	r20
     530:	8a 95       	dec	r24
     532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_VidGetPinValue+0xb0>
     534:	ca 01       	movw	r24, r20
     536:	81 70       	andi	r24, 0x01	; 1
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	11 c0       	rjmp	.+34     	; 0x55e <DIO_VidGetPinValue+0xe2>
			case PORTD :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
     53c:	e0 e3       	ldi	r30, 0x30	; 48
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a9 01       	movw	r20, r18
     54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_VidGetPinValue+0xd8>
     550:	55 95       	asr	r21
     552:	47 95       	ror	r20
     554:	8a 95       	dec	r24
     556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_VidGetPinValue+0xd4>
     558:	ca 01       	movw	r24, r20
     55a:	81 70       	andi	r24, 0x01	; 1
     55c:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
     55e:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	cf 91       	pop	r28
     56c:	df 91       	pop	r29
     56e:	08 95       	ret

00000570 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	(u8 copy_u8port, u8 copy_U8state)
{
     570:	df 93       	push	r29
     572:	cf 93       	push	r28
     574:	00 d0       	rcall	.+0      	; 0x576 <DIO_VidSetPortDirection+0x6>
     576:	00 d0       	rcall	.+0      	; 0x578 <DIO_VidSetPortDirection+0x8>
     578:	00 d0       	rcall	.+0      	; 0x57a <DIO_VidSetPortDirection+0xa>
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	89 83       	std	Y+1, r24	; 0x01
     580:	6a 83       	std	Y+2, r22	; 0x02
	
	if(OUTPUT==copy_U8state)
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	99 f5       	brne	.+102    	; 0x5ee <DIO_VidSetPortDirection+0x7e>
	{
		switch (copy_u8port)
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	28 2f       	mov	r18, r24
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	3e 83       	std	Y+6, r19	; 0x06
     590:	2d 83       	std	Y+5, r18	; 0x05
     592:	8d 81       	ldd	r24, Y+5	; 0x05
     594:	9e 81       	ldd	r25, Y+6	; 0x06
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	91 05       	cpc	r25, r1
     59a:	d1 f0       	breq	.+52     	; 0x5d0 <DIO_VidSetPortDirection+0x60>
     59c:	2d 81       	ldd	r18, Y+5	; 0x05
     59e:	3e 81       	ldd	r19, Y+6	; 0x06
     5a0:	22 30       	cpi	r18, 0x02	; 2
     5a2:	31 05       	cpc	r19, r1
     5a4:	2c f4       	brge	.+10     	; 0x5b0 <DIO_VidSetPortDirection+0x40>
     5a6:	8d 81       	ldd	r24, Y+5	; 0x05
     5a8:	9e 81       	ldd	r25, Y+6	; 0x06
     5aa:	00 97       	sbiw	r24, 0x00	; 0
     5ac:	61 f0       	breq	.+24     	; 0x5c6 <DIO_VidSetPortDirection+0x56>
     5ae:	50 c0       	rjmp	.+160    	; 0x650 <DIO_VidSetPortDirection+0xe0>
     5b0:	2d 81       	ldd	r18, Y+5	; 0x05
     5b2:	3e 81       	ldd	r19, Y+6	; 0x06
     5b4:	22 30       	cpi	r18, 0x02	; 2
     5b6:	31 05       	cpc	r19, r1
     5b8:	81 f0       	breq	.+32     	; 0x5da <DIO_VidSetPortDirection+0x6a>
     5ba:	8d 81       	ldd	r24, Y+5	; 0x05
     5bc:	9e 81       	ldd	r25, Y+6	; 0x06
     5be:	83 30       	cpi	r24, 0x03	; 3
     5c0:	91 05       	cpc	r25, r1
     5c2:	81 f0       	breq	.+32     	; 0x5e4 <DIO_VidSetPortDirection+0x74>
     5c4:	45 c0       	rjmp	.+138    	; 0x650 <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_OUTPUT		; break;
     5c6:	ea e3       	ldi	r30, 0x3A	; 58
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	80 83       	st	Z, r24
     5ce:	40 c0       	rjmp	.+128    	; 0x650 <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_OUTPUT		; break;
     5d0:	e7 e3       	ldi	r30, 0x37	; 55
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	80 83       	st	Z, r24
     5d8:	3b c0       	rjmp	.+118    	; 0x650 <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_OUTPUT		; break;
     5da:	e4 e3       	ldi	r30, 0x34	; 52
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	80 83       	st	Z, r24
     5e2:	36 c0       	rjmp	.+108    	; 0x650 <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_OUTPUT		; break;
     5e4:	e1 e3       	ldi	r30, 0x31	; 49
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	80 83       	st	Z, r24
     5ec:	31 c0       	rjmp	.+98     	; 0x650 <DIO_VidSetPortDirection+0xe0>
	
		}	
	}
	else if(INPUT==copy_U8state)
     5ee:	8a 81       	ldd	r24, Y+2	; 0x02
     5f0:	88 23       	and	r24, r24
     5f2:	71 f5       	brne	.+92     	; 0x650 <DIO_VidSetPortDirection+0xe0>
	{
		switch(copy_u8port)
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	28 2f       	mov	r18, r24
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	3c 83       	std	Y+4, r19	; 0x04
     5fc:	2b 83       	std	Y+3, r18	; 0x03
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	9c 81       	ldd	r25, Y+4	; 0x04
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	91 05       	cpc	r25, r1
     606:	c9 f0       	breq	.+50     	; 0x63a <DIO_VidSetPortDirection+0xca>
     608:	2b 81       	ldd	r18, Y+3	; 0x03
     60a:	3c 81       	ldd	r19, Y+4	; 0x04
     60c:	22 30       	cpi	r18, 0x02	; 2
     60e:	31 05       	cpc	r19, r1
     610:	2c f4       	brge	.+10     	; 0x61c <DIO_VidSetPortDirection+0xac>
     612:	8b 81       	ldd	r24, Y+3	; 0x03
     614:	9c 81       	ldd	r25, Y+4	; 0x04
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	61 f0       	breq	.+24     	; 0x632 <DIO_VidSetPortDirection+0xc2>
     61a:	1a c0       	rjmp	.+52     	; 0x650 <DIO_VidSetPortDirection+0xe0>
     61c:	2b 81       	ldd	r18, Y+3	; 0x03
     61e:	3c 81       	ldd	r19, Y+4	; 0x04
     620:	22 30       	cpi	r18, 0x02	; 2
     622:	31 05       	cpc	r19, r1
     624:	71 f0       	breq	.+28     	; 0x642 <DIO_VidSetPortDirection+0xd2>
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	9c 81       	ldd	r25, Y+4	; 0x04
     62a:	83 30       	cpi	r24, 0x03	; 3
     62c:	91 05       	cpc	r25, r1
     62e:	69 f0       	breq	.+26     	; 0x64a <DIO_VidSetPortDirection+0xda>
     630:	0f c0       	rjmp	.+30     	; 0x650 <DIO_VidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_INPUT		; break;
     632:	ea e3       	ldi	r30, 0x3A	; 58
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	10 82       	st	Z, r1
     638:	0b c0       	rjmp	.+22     	; 0x650 <DIO_VidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_INPUT		; break;
     63a:	e7 e3       	ldi	r30, 0x37	; 55
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	10 82       	st	Z, r1
     640:	07 c0       	rjmp	.+14     	; 0x650 <DIO_VidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_INPUT		; break;
     642:	e4 e3       	ldi	r30, 0x34	; 52
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	10 82       	st	Z, r1
     648:	03 c0       	rjmp	.+6      	; 0x650 <DIO_VidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_INPUT		; break;
     64a:	e1 e3       	ldi	r30, 0x31	; 49
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	10 82       	st	Z, r1
	{
		
	}
	
	
}
     650:	26 96       	adiw	r28, 0x06	; 6
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	cf 91       	pop	r28
     65e:	df 91       	pop	r29
     660:	08 95       	ret

00000662 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue		(u8 copy_u8port, u8 copy_U8value)
{
     662:	df 93       	push	r29
     664:	cf 93       	push	r28
     666:	00 d0       	rcall	.+0      	; 0x668 <DIO_VidSetPortValue+0x6>
     668:	00 d0       	rcall	.+0      	; 0x66a <DIO_VidSetPortValue+0x8>
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	89 83       	std	Y+1, r24	; 0x01
     670:	6a 83       	std	Y+2, r22	; 0x02
		
		switch (copy_u8port)
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	28 2f       	mov	r18, r24
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	3c 83       	std	Y+4, r19	; 0x04
     67a:	2b 83       	std	Y+3, r18	; 0x03
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	9c 81       	ldd	r25, Y+4	; 0x04
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	91 05       	cpc	r25, r1
     684:	d1 f0       	breq	.+52     	; 0x6ba <DIO_VidSetPortValue+0x58>
     686:	2b 81       	ldd	r18, Y+3	; 0x03
     688:	3c 81       	ldd	r19, Y+4	; 0x04
     68a:	22 30       	cpi	r18, 0x02	; 2
     68c:	31 05       	cpc	r19, r1
     68e:	2c f4       	brge	.+10     	; 0x69a <DIO_VidSetPortValue+0x38>
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	9c 81       	ldd	r25, Y+4	; 0x04
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	61 f0       	breq	.+24     	; 0x6b0 <DIO_VidSetPortValue+0x4e>
     698:	1e c0       	rjmp	.+60     	; 0x6d6 <DIO_VidSetPortValue+0x74>
     69a:	2b 81       	ldd	r18, Y+3	; 0x03
     69c:	3c 81       	ldd	r19, Y+4	; 0x04
     69e:	22 30       	cpi	r18, 0x02	; 2
     6a0:	31 05       	cpc	r19, r1
     6a2:	81 f0       	breq	.+32     	; 0x6c4 <DIO_VidSetPortValue+0x62>
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	9c 81       	ldd	r25, Y+4	; 0x04
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	91 05       	cpc	r25, r1
     6ac:	81 f0       	breq	.+32     	; 0x6ce <DIO_VidSetPortValue+0x6c>
     6ae:	13 c0       	rjmp	.+38     	; 0x6d6 <DIO_VidSetPortValue+0x74>
		{
			case PORTA:PORT_A=copy_U8value		; break;
     6b0:	eb e3       	ldi	r30, 0x3B	; 59
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	8a 81       	ldd	r24, Y+2	; 0x02
     6b6:	80 83       	st	Z, r24
     6b8:	0e c0       	rjmp	.+28     	; 0x6d6 <DIO_VidSetPortValue+0x74>
			case PORTB:PORT_B=copy_U8value		; break;
     6ba:	e8 e3       	ldi	r30, 0x38	; 56
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	8a 81       	ldd	r24, Y+2	; 0x02
     6c0:	80 83       	st	Z, r24
     6c2:	09 c0       	rjmp	.+18     	; 0x6d6 <DIO_VidSetPortValue+0x74>
			case PORTC:PORT_C=copy_U8value		; break;
     6c4:	e5 e3       	ldi	r30, 0x35	; 53
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	80 83       	st	Z, r24
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <DIO_VidSetPortValue+0x74>
			case PORTD:PORT_D=copy_U8value		; break;
     6ce:	e2 e3       	ldi	r30, 0x32	; 50
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	80 83       	st	Z, r24
		}	
	
	
	
	
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	cf 91       	pop	r28
     6e0:	df 91       	pop	r29
     6e2:	08 95       	ret

000006e4 <DIO_VidTogglePin>:

void DIO_VidTogglePin			(u8 copy_u8port, u8 copy_U8pin)
{
     6e4:	df 93       	push	r29
     6e6:	cf 93       	push	r28
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <DIO_VidTogglePin+0x6>
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <DIO_VidTogglePin+0x8>
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	89 83       	std	Y+1, r24	; 0x01
     6f2:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_u8port)
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	28 2f       	mov	r18, r24
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	3c 83       	std	Y+4, r19	; 0x04
     6fc:	2b 83       	std	Y+3, r18	; 0x03
     6fe:	8b 81       	ldd	r24, Y+3	; 0x03
     700:	9c 81       	ldd	r25, Y+4	; 0x04
     702:	81 30       	cpi	r24, 0x01	; 1
     704:	91 05       	cpc	r25, r1
     706:	49 f1       	breq	.+82     	; 0x75a <DIO_VidTogglePin+0x76>
     708:	2b 81       	ldd	r18, Y+3	; 0x03
     70a:	3c 81       	ldd	r19, Y+4	; 0x04
     70c:	22 30       	cpi	r18, 0x02	; 2
     70e:	31 05       	cpc	r19, r1
     710:	2c f4       	brge	.+10     	; 0x71c <DIO_VidTogglePin+0x38>
     712:	8b 81       	ldd	r24, Y+3	; 0x03
     714:	9c 81       	ldd	r25, Y+4	; 0x04
     716:	00 97       	sbiw	r24, 0x00	; 0
     718:	61 f0       	breq	.+24     	; 0x732 <DIO_VidTogglePin+0x4e>
     71a:	5a c0       	rjmp	.+180    	; 0x7d0 <DIO_VidTogglePin+0xec>
     71c:	2b 81       	ldd	r18, Y+3	; 0x03
     71e:	3c 81       	ldd	r19, Y+4	; 0x04
     720:	22 30       	cpi	r18, 0x02	; 2
     722:	31 05       	cpc	r19, r1
     724:	71 f1       	breq	.+92     	; 0x782 <DIO_VidTogglePin+0x9e>
     726:	8b 81       	ldd	r24, Y+3	; 0x03
     728:	9c 81       	ldd	r25, Y+4	; 0x04
     72a:	83 30       	cpi	r24, 0x03	; 3
     72c:	91 05       	cpc	r25, r1
     72e:	e9 f1       	breq	.+122    	; 0x7aa <DIO_VidTogglePin+0xc6>
     730:	4f c0       	rjmp	.+158    	; 0x7d0 <DIO_VidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_U8pin); break;
     732:	ab e3       	ldi	r26, 0x3B	; 59
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	eb e3       	ldi	r30, 0x3B	; 59
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	48 2f       	mov	r20, r24
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	28 2f       	mov	r18, r24
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	02 2e       	mov	r0, r18
     74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_VidTogglePin+0x6c>
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	0a 94       	dec	r0
     752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_VidTogglePin+0x68>
     754:	84 27       	eor	r24, r20
     756:	8c 93       	st	X, r24
     758:	3b c0       	rjmp	.+118    	; 0x7d0 <DIO_VidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_U8pin); break;
     75a:	a8 e3       	ldi	r26, 0x38	; 56
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	e8 e3       	ldi	r30, 0x38	; 56
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	48 2f       	mov	r20, r24
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	28 2f       	mov	r18, r24
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	02 2e       	mov	r0, r18
     772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_VidTogglePin+0x94>
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	0a 94       	dec	r0
     77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_VidTogglePin+0x90>
     77c:	84 27       	eor	r24, r20
     77e:	8c 93       	st	X, r24
     780:	27 c0       	rjmp	.+78     	; 0x7d0 <DIO_VidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_U8pin); break;
     782:	a5 e3       	ldi	r26, 0x35	; 53
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	e5 e3       	ldi	r30, 0x35	; 53
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	48 2f       	mov	r20, r24
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	28 2f       	mov	r18, r24
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	02 2e       	mov	r0, r18
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_VidTogglePin+0xbc>
     79c:	88 0f       	add	r24, r24
     79e:	99 1f       	adc	r25, r25
     7a0:	0a 94       	dec	r0
     7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_VidTogglePin+0xb8>
     7a4:	84 27       	eor	r24, r20
     7a6:	8c 93       	st	X, r24
     7a8:	13 c0       	rjmp	.+38     	; 0x7d0 <DIO_VidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_U8pin); break;
     7aa:	a2 e3       	ldi	r26, 0x32	; 50
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	e2 e3       	ldi	r30, 0x32	; 50
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	80 81       	ld	r24, Z
     7b4:	48 2f       	mov	r20, r24
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	28 2f       	mov	r18, r24
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	02 2e       	mov	r0, r18
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_VidTogglePin+0xe4>
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	0a 94       	dec	r0
     7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_VidTogglePin+0xe0>
     7cc:	84 27       	eor	r24, r20
     7ce:	8c 93       	st	X, r24
		}

}
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	cf 91       	pop	r28
     7da:	df 91       	pop	r29
     7dc:	08 95       	ret

000007de <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8port)
{
     7de:	df 93       	push	r29
     7e0:	cf 93       	push	r28
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <DIO_u8GetPortValue+0x6>
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <DIO_u8GetPortValue+0x8>
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	8a 83       	std	Y+2, r24	; 0x02
		u8 Lcal_U8PortResult=0;
     7ec:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
     7ee:	8a 81       	ldd	r24, Y+2	; 0x02
     7f0:	28 2f       	mov	r18, r24
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	3c 83       	std	Y+4, r19	; 0x04
     7f6:	2b 83       	std	Y+3, r18	; 0x03
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	9c 81       	ldd	r25, Y+4	; 0x04
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	91 05       	cpc	r25, r1
     800:	d1 f0       	breq	.+52     	; 0x836 <DIO_u8GetPortValue+0x58>
     802:	2b 81       	ldd	r18, Y+3	; 0x03
     804:	3c 81       	ldd	r19, Y+4	; 0x04
     806:	22 30       	cpi	r18, 0x02	; 2
     808:	31 05       	cpc	r19, r1
     80a:	2c f4       	brge	.+10     	; 0x816 <DIO_u8GetPortValue+0x38>
     80c:	8b 81       	ldd	r24, Y+3	; 0x03
     80e:	9c 81       	ldd	r25, Y+4	; 0x04
     810:	00 97       	sbiw	r24, 0x00	; 0
     812:	61 f0       	breq	.+24     	; 0x82c <DIO_u8GetPortValue+0x4e>
     814:	1e c0       	rjmp	.+60     	; 0x852 <DIO_u8GetPortValue+0x74>
     816:	2b 81       	ldd	r18, Y+3	; 0x03
     818:	3c 81       	ldd	r19, Y+4	; 0x04
     81a:	22 30       	cpi	r18, 0x02	; 2
     81c:	31 05       	cpc	r19, r1
     81e:	81 f0       	breq	.+32     	; 0x840 <DIO_u8GetPortValue+0x62>
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	9c 81       	ldd	r25, Y+4	; 0x04
     824:	83 30       	cpi	r24, 0x03	; 3
     826:	91 05       	cpc	r25, r1
     828:	81 f0       	breq	.+32     	; 0x84a <DIO_u8GetPortValue+0x6c>
     82a:	13 c0       	rjmp	.+38     	; 0x852 <DIO_u8GetPortValue+0x74>

			case PORTA :	Lcal_U8PortResult=PINA;	        break;
     82c:	e9 e3       	ldi	r30, 0x39	; 57
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	89 83       	std	Y+1, r24	; 0x01
     834:	0e c0       	rjmp	.+28     	; 0x852 <DIO_u8GetPortValue+0x74>
			case PORTB :	Lcal_U8PortResult=PINB; 		    break;
     836:	e6 e3       	ldi	r30, 0x36	; 54
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	09 c0       	rjmp	.+18     	; 0x852 <DIO_u8GetPortValue+0x74>
			case PORTC :	Lcal_U8PortResult=PINC;			break;
     840:	e3 e3       	ldi	r30, 0x33	; 51
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	89 83       	std	Y+1, r24	; 0x01
     848:	04 c0       	rjmp	.+8      	; 0x852 <DIO_u8GetPortValue+0x74>
			case PORTD :	Lcal_U8PortResult=PIND;			break;
     84a:	e0 e3       	ldi	r30, 0x30	; 48
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PortResult);
     852:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	08 95       	ret

00000862 <RTOS_VoidStart>:
#include"RTOS_config.h"

task_t SysTask[MAXTASKS] ={0};

void RTOS_VoidStart(void)
{
     862:	df 93       	push	r29
     864:	cf 93       	push	r28
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
	TIMER1_Set_callback(&RTOS_VoidSchaduler);
     86a:	8e ed       	ldi	r24, 0xDE	; 222
     86c:	94 e0       	ldi	r25, 0x04	; 4
     86e:	0e 94 93 05 	call	0xb26	; 0xb26 <TIMER1_Set_callback>
	TM_voidTimerInit();
     872:	0e 94 a5 05 	call	0xb4a	; 0xb4a <TM_voidTimerInit>

}
     876:	cf 91       	pop	r28
     878:	df 91       	pop	r29
     87a:	08 95       	ret

0000087c <RTOS_VoidCreateTask>:


void RTOS_VoidCreateTask(u8 Copy_u8Periodicity, void(*pf)(void),u8 Copy_u8Priority, u8 Copy_u8State, u8 Copy_u8First_delay)
{
     87c:	0f 93       	push	r16
     87e:	df 93       	push	r29
     880:	cf 93       	push	r28
     882:	00 d0       	rcall	.+0      	; 0x884 <RTOS_VoidCreateTask+0x8>
     884:	00 d0       	rcall	.+0      	; 0x886 <RTOS_VoidCreateTask+0xa>
     886:	00 d0       	rcall	.+0      	; 0x888 <RTOS_VoidCreateTask+0xc>
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	89 83       	std	Y+1, r24	; 0x01
     88e:	7b 83       	std	Y+3, r23	; 0x03
     890:	6a 83       	std	Y+2, r22	; 0x02
     892:	4c 83       	std	Y+4, r20	; 0x04
     894:	2d 83       	std	Y+5, r18	; 0x05
     896:	0e 83       	std	Y+6, r16	; 0x06
    SysTask[Copy_u8Priority].periodicity = Copy_u8Periodicity;
     898:	8c 81       	ldd	r24, Y+4	; 0x04
     89a:	28 2f       	mov	r18, r24
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	c9 01       	movw	r24, r18
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	82 0f       	add	r24, r18
     8aa:	93 1f       	adc	r25, r19
     8ac:	fc 01       	movw	r30, r24
     8ae:	ee 59       	subi	r30, 0x9E	; 158
     8b0:	ff 4f       	sbci	r31, 0xFF	; 255
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	80 83       	st	Z, r24
    SysTask[Copy_u8Priority].ptf  = pf;
     8b6:	8c 81       	ldd	r24, Y+4	; 0x04
     8b8:	28 2f       	mov	r18, r24
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	c9 01       	movw	r24, r18
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	82 0f       	add	r24, r18
     8c8:	93 1f       	adc	r25, r19
     8ca:	fc 01       	movw	r30, r24
     8cc:	e0 5a       	subi	r30, 0xA0	; 160
     8ce:	ff 4f       	sbci	r31, 0xFF	; 255
     8d0:	8a 81       	ldd	r24, Y+2	; 0x02
     8d2:	9b 81       	ldd	r25, Y+3	; 0x03
     8d4:	91 83       	std	Z+1, r25	; 0x01
     8d6:	80 83       	st	Z, r24
    SysTask[Copy_u8Priority].state  = Copy_u8State;
     8d8:	8c 81       	ldd	r24, Y+4	; 0x04
     8da:	28 2f       	mov	r18, r24
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	c9 01       	movw	r24, r18
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	82 0f       	add	r24, r18
     8ea:	93 1f       	adc	r25, r19
     8ec:	fc 01       	movw	r30, r24
     8ee:	ed 59       	subi	r30, 0x9D	; 157
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	8d 81       	ldd	r24, Y+5	; 0x05
     8f4:	80 83       	st	Z, r24
    SysTask[Copy_u8Priority].First_delay= Copy_u8First_delay;
     8f6:	8c 81       	ldd	r24, Y+4	; 0x04
     8f8:	28 2f       	mov	r18, r24
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	c9 01       	movw	r24, r18
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	82 0f       	add	r24, r18
     908:	93 1f       	adc	r25, r19
     90a:	fc 01       	movw	r30, r24
     90c:	ec 59       	subi	r30, 0x9C	; 156
     90e:	ff 4f       	sbci	r31, 0xFF	; 255
     910:	8e 81       	ldd	r24, Y+6	; 0x06
     912:	80 83       	st	Z, r24

}
     914:	26 96       	adiw	r28, 0x06	; 6
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	cf 91       	pop	r28
     922:	df 91       	pop	r29
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <RTOS_VoidSuspendTask>:

void RTOS_VoidSuspendTask(u8 Copy_u8Priority)
{
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	0f 92       	push	r0
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	89 83       	std	Y+1, r24	; 0x01
    SysTask[Copy_u8Priority].state  = SUSPEND;
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	28 2f       	mov	r18, r24
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	c9 01       	movw	r24, r18
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	82 0f       	add	r24, r18
     946:	93 1f       	adc	r25, r19
     948:	fc 01       	movw	r30, r24
     94a:	ed 59       	subi	r30, 0x9D	; 157
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	10 82       	st	Z, r1
}
     950:	0f 90       	pop	r0
     952:	cf 91       	pop	r28
     954:	df 91       	pop	r29
     956:	08 95       	ret

00000958 <RTOS_VoidResumeTask>:

void RTOS_VoidResumeTask(u8 Copy_u8Priority)
{
     958:	df 93       	push	r29
     95a:	cf 93       	push	r28
     95c:	0f 92       	push	r0
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	89 83       	std	Y+1, r24	; 0x01
    SysTask[Copy_u8Priority].state  = RESUMED;
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	28 2f       	mov	r18, r24
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	c9 01       	movw	r24, r18
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	82 0f       	add	r24, r18
     976:	93 1f       	adc	r25, r19
     978:	fc 01       	movw	r30, r24
     97a:	ed 59       	subi	r30, 0x9D	; 157
     97c:	ff 4f       	sbci	r31, 0xFF	; 255
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 83       	st	Z, r24
}
     982:	0f 90       	pop	r0
     984:	cf 91       	pop	r28
     986:	df 91       	pop	r29
     988:	08 95       	ret

0000098a <RTOS_VoidKillTask>:

void RTOS_VoidKillTask(u8 Copy_u8Priority)
{
     98a:	df 93       	push	r29
     98c:	cf 93       	push	r28
     98e:	0f 92       	push	r0
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	89 83       	std	Y+1, r24	; 0x01
        SysTask[Copy_u8Priority].ptf  = NULL;
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	28 2f       	mov	r18, r24
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	c9 01       	movw	r24, r18
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	82 0f       	add	r24, r18
     9a8:	93 1f       	adc	r25, r19
     9aa:	fc 01       	movw	r30, r24
     9ac:	e0 5a       	subi	r30, 0xA0	; 160
     9ae:	ff 4f       	sbci	r31, 0xFF	; 255
     9b0:	11 82       	std	Z+1, r1	; 0x01
     9b2:	10 82       	st	Z, r1
}
     9b4:	0f 90       	pop	r0
     9b6:	cf 91       	pop	r28
     9b8:	df 91       	pop	r29
     9ba:	08 95       	ret

000009bc <RTOS_VoidSchaduler>:

void RTOS_VoidSchaduler(void)
{
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	0f 92       	push	r0
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
    static u16 TIMER_TICS = 0;
    TIMER_TICS++;
     9c6:	80 91 74 00 	lds	r24, 0x0074
     9ca:	90 91 75 00 	lds	r25, 0x0075
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	90 93 75 00 	sts	0x0075, r25
     9d4:	80 93 74 00 	sts	0x0074, r24
    for(u8 i=0; i< MAXTASKS; i++)
     9d8:	19 82       	std	Y+1, r1	; 0x01
     9da:	9d c0       	rjmp	.+314    	; 0xb16 <RTOS_VoidSchaduler+0x15a>
    {
        if(SysTask[i].First_delay== 0)
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	28 2f       	mov	r18, r24
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	c9 01       	movw	r24, r18
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	82 0f       	add	r24, r18
     9ee:	93 1f       	adc	r25, r19
     9f0:	fc 01       	movw	r30, r24
     9f2:	ec 59       	subi	r30, 0x9C	; 156
     9f4:	ff 4f       	sbci	r31, 0xFF	; 255
     9f6:	80 81       	ld	r24, Z
     9f8:	88 23       	and	r24, r24
     9fa:	09 f0       	breq	.+2      	; 0x9fe <RTOS_VoidSchaduler+0x42>
     9fc:	6e c0       	rjmp	.+220    	; 0xada <RTOS_VoidSchaduler+0x11e>
        {
            if (SysTask[i].ptf)
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	28 2f       	mov	r18, r24
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	c9 01       	movw	r24, r18
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	82 0f       	add	r24, r18
     a10:	93 1f       	adc	r25, r19
     a12:	fc 01       	movw	r30, r24
     a14:	e0 5a       	subi	r30, 0xA0	; 160
     a16:	ff 4f       	sbci	r31, 0xFF	; 255
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	09 f4       	brne	.+2      	; 0xa22 <RTOS_VoidSchaduler+0x66>
     a20:	77 c0       	rjmp	.+238    	; 0xb10 <RTOS_VoidSchaduler+0x154>
            {
                if (TIMER_TICS%SysTask[i].periodicity   == 0 && SysTask[i].state == RESUMED )
     a22:	40 91 74 00 	lds	r20, 0x0074
     a26:	50 91 75 00 	lds	r21, 0x0075
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	28 2f       	mov	r18, r24
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	c9 01       	movw	r24, r18
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	82 0f       	add	r24, r18
     a3c:	93 1f       	adc	r25, r19
     a3e:	fc 01       	movw	r30, r24
     a40:	ee 59       	subi	r30, 0x9E	; 158
     a42:	ff 4f       	sbci	r31, 0xFF	; 255
     a44:	80 81       	ld	r24, Z
     a46:	28 2f       	mov	r18, r24
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	ca 01       	movw	r24, r20
     a4c:	b9 01       	movw	r22, r18
     a4e:	0e 94 2d 08 	call	0x105a	; 0x105a <__udivmodhi4>
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	09 f0       	breq	.+2      	; 0xa58 <RTOS_VoidSchaduler+0x9c>
     a56:	5c c0       	rjmp	.+184    	; 0xb10 <RTOS_VoidSchaduler+0x154>
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	28 2f       	mov	r18, r24
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	c9 01       	movw	r24, r18
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	82 0f       	add	r24, r18
     a6a:	93 1f       	adc	r25, r19
     a6c:	fc 01       	movw	r30, r24
     a6e:	ed 59       	subi	r30, 0x9D	; 157
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	80 81       	ld	r24, Z
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	09 f0       	breq	.+2      	; 0xa7a <RTOS_VoidSchaduler+0xbe>
     a78:	4b c0       	rjmp	.+150    	; 0xb10 <RTOS_VoidSchaduler+0x154>
                {
                    SysTask[i].ptf(); 
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	c9 01       	movw	r24, r18
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	82 0f       	add	r24, r18
     a8c:	93 1f       	adc	r25, r19
     a8e:	fc 01       	movw	r30, r24
     a90:	e0 5a       	subi	r30, 0xA0	; 160
     a92:	ff 4f       	sbci	r31, 0xFF	; 255
     a94:	01 90       	ld	r0, Z+
     a96:	f0 81       	ld	r31, Z
     a98:	e0 2d       	mov	r30, r0
     a9a:	09 95       	icall
                    SysTask[i].First_delay=SysTask[i].periodicity-1;               
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	48 2f       	mov	r20, r24
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	28 2f       	mov	r18, r24
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	c9 01       	movw	r24, r18
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	82 0f       	add	r24, r18
     ab4:	93 1f       	adc	r25, r19
     ab6:	fc 01       	movw	r30, r24
     ab8:	ee 59       	subi	r30, 0x9E	; 158
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 2f       	mov	r18, r24
     ac0:	21 50       	subi	r18, 0x01	; 1
     ac2:	ca 01       	movw	r24, r20
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	84 0f       	add	r24, r20
     ace:	95 1f       	adc	r25, r21
     ad0:	fc 01       	movw	r30, r24
     ad2:	ec 59       	subi	r30, 0x9C	; 156
     ad4:	ff 4f       	sbci	r31, 0xFF	; 255
     ad6:	20 83       	st	Z, r18
     ad8:	1b c0       	rjmp	.+54     	; 0xb10 <RTOS_VoidSchaduler+0x154>

            }            
        }
        else
        {
            SysTask[i].First_delay--;
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	28 2f       	mov	r18, r24
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	c9 01       	movw	r24, r18
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	82 0f       	add	r24, r18
     aec:	93 1f       	adc	r25, r19
     aee:	fc 01       	movw	r30, r24
     af0:	ec 59       	subi	r30, 0x9C	; 156
     af2:	ff 4f       	sbci	r31, 0xFF	; 255
     af4:	80 81       	ld	r24, Z
     af6:	48 2f       	mov	r20, r24
     af8:	41 50       	subi	r20, 0x01	; 1
     afa:	c9 01       	movw	r24, r18
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	82 0f       	add	r24, r18
     b06:	93 1f       	adc	r25, r19
     b08:	fc 01       	movw	r30, r24
     b0a:	ec 59       	subi	r30, 0x9C	; 156
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	40 83       	st	Z, r20

void RTOS_VoidSchaduler(void)
{
    static u16 TIMER_TICS = 0;
    TIMER_TICS++;
    for(u8 i=0; i< MAXTASKS; i++)
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	8f 5f       	subi	r24, 0xFF	; 255
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	84 30       	cpi	r24, 0x04	; 4
     b1a:	08 f4       	brcc	.+2      	; 0xb1e <RTOS_VoidSchaduler+0x162>
     b1c:	5f cf       	rjmp	.-322    	; 0x9dc <RTOS_VoidSchaduler+0x20>


    }    


     b1e:	0f 90       	pop	r0
     b20:	cf 91       	pop	r28
     b22:	df 91       	pop	r29
     b24:	08 95       	ret

00000b26 <TIMER1_Set_callback>:


void(*callback)(void)=NULL;

void TIMER1_Set_callback(void(*ptr)(void))
{
     b26:	df 93       	push	r29
     b28:	cf 93       	push	r28
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <TIMER1_Set_callback+0x6>
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	9a 83       	std	Y+2, r25	; 0x02
     b32:	89 83       	std	Y+1, r24	; 0x01
	callback=ptr;
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	90 93 7a 00 	sts	0x007A, r25
     b3c:	80 93 79 00 	sts	0x0079, r24

}
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	cf 91       	pop	r28
     b46:	df 91       	pop	r29
     b48:	08 95       	ret

00000b4a <TM_voidTimerInit>:
void TM_voidTimerInit(void)
{
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
            SET_BIT(TCCR1,WGM10);
            SET_BIT(TCCR1,WGM11);
            CLR_BIT(TCCR1,WGM12);
            CLR_BIT(TCCR1,WGM13);
        #elif TIMER1_M==T1_CTC     
            CLR_BIT(TCCR1,WGM10);
     b52:	ae e4       	ldi	r26, 0x4E	; 78
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ee e4       	ldi	r30, 0x4E	; 78
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	9e 7f       	andi	r25, 0xFE	; 254
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	9c 93       	st	X, r25
     b64:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM11);
     b66:	ae e4       	ldi	r26, 0x4E	; 78
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	ee e4       	ldi	r30, 0x4E	; 78
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	9d 7f       	andi	r25, 0xFD	; 253
     b74:	11 96       	adiw	r26, 0x01	; 1
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,WGM12);
     b7a:	ae e4       	ldi	r26, 0x4E	; 78
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ee e4       	ldi	r30, 0x4E	; 78
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	91 81       	ldd	r25, Z+1	; 0x01
     b86:	88 60       	ori	r24, 0x08	; 8
     b88:	11 96       	adiw	r26, 0x01	; 1
     b8a:	9c 93       	st	X, r25
     b8c:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,WGM13);
     b8e:	ae e4       	ldi	r26, 0x4E	; 78
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	ee e4       	ldi	r30, 0x4E	; 78
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	91 81       	ldd	r25, Z+1	; 0x01
     b9a:	8f 7e       	andi	r24, 0xEF	; 239
     b9c:	11 96       	adiw	r26, 0x01	; 1
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
            OCR1A= OCR_VALUE_CTCMode;
     ba2:	ea e4       	ldi	r30, 0x4A	; 74
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	82 e1       	ldi	r24, 0x12	; 18
     ba8:	9a e7       	ldi	r25, 0x7A	; 122
     baa:	91 83       	std	Z+1, r25	; 0x01
     bac:	80 83       	st	Z, r24
            SET_BIT(TIMSK, OCIE1A);
     bae:	a9 e5       	ldi	r26, 0x59	; 89
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e9 e5       	ldi	r30, 0x59	; 89
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	80 61       	ori	r24, 0x10	; 16
     bba:	8c 93       	st	X, r24
        #elif TIMER1_CLK == CLK_64
            SET_BIT(TCCR1,CS10);
            SET_BIT(TCCR1,CS11);
            CLR_BIT(TCCR1,CS12);
        #elif TIMER1_CLK == CLK_256
            CLR_BIT(TCCR1,CS10);
     bbc:	ae e4       	ldi	r26, 0x4E	; 78
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	ee e4       	ldi	r30, 0x4E	; 78
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	91 81       	ldd	r25, Z+1	; 0x01
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	9c 93       	st	X, r25
     bce:	8e 93       	st	-X, r24
            CLR_BIT(TCCR1,CS11);
     bd0:	ae e4       	ldi	r26, 0x4E	; 78
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ee e4       	ldi	r30, 0x4E	; 78
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	91 81       	ldd	r25, Z+1	; 0x01
     bdc:	8d 7f       	andi	r24, 0xFD	; 253
     bde:	11 96       	adiw	r26, 0x01	; 1
     be0:	9c 93       	st	X, r25
     be2:	8e 93       	st	-X, r24
            SET_BIT(TCCR1,CS12);
     be4:	ae e4       	ldi	r26, 0x4E	; 78
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	ee e4       	ldi	r30, 0x4E	; 78
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	91 81       	ldd	r25, Z+1	; 0x01
     bf0:	84 60       	ori	r24, 0x04	; 4
     bf2:	11 96       	adiw	r26, 0x01	; 1
     bf4:	9c 93       	st	X, r25
     bf6:	8e 93       	st	-X, r24
        #endif

    #else
    #endif
   
    SET_BIT(SREG, BIT7);
     bf8:	af e5       	ldi	r26, 0x5F	; 95
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ef e5       	ldi	r30, 0x5F	; 95
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	8c 93       	st	X, r24
    
}
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <TM_VoidPrealoadOverFlow>:


void TM_VoidPrealoadOverFlow(void)
{ 
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
    #if TIMER_S== TIMER0
        TCNT0= PRELOAD_VALUE;
    #elif TIMER_S== TIMER1
        TCNT1= PRELOAD_VALUE;      
     c14:	ec e4       	ldi	r30, 0x4C	; 76
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	8c ed       	ldi	r24, 0xDC	; 220
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	91 83       	std	Z+1, r25	; 0x01
     c1e:	80 83       	st	Z, r24
    #elif TIMER_S== TIMER2
        TCNT2= PRELOAD_VALUE;  
    #endif

    
}
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <TM_VoidSetDuty>:


void TM_VoidSetDuty(u16 Copy_U8Duty)
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <TM_VoidSetDuty+0x6>
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	89 83       	std	Y+1, r24	; 0x01
    #if TIMER_S== TIMER0
        OCR0= Copy_U8Duty;
    #elif TIMER_S== TIMER1
        OCR1A= Copy_U8Duty;
     c34:	ea e4       	ldi	r30, 0x4A	; 74
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	9a 81       	ldd	r25, Y+2	; 0x02
     c3c:	91 83       	std	Z+1, r25	; 0x01
     c3e:	80 83       	st	Z, r24
    #elif TIMER_S== TIMER2
        OCR2 =Copy_U8Duty;
    #endif
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <TM1_VoidInputCapture>:

void TM1_VoidInputCapture(void)
{ 
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
    DIO_VidSetPinDirection(PORTD,PIN6,INPUT);
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	67 e0       	ldi	r22, 0x07	; 7
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_VidSetPinDirection>
    /*IT can be any mode of the Timer except 8,10,12,14*/
    SET_BIT(TIMSK,TICIE1);
     c5c:	a9 e5       	ldi	r26, 0x59	; 89
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e9 e5       	ldi	r30, 0x59	; 89
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	80 62       	ori	r24, 0x20	; 32
     c68:	8c 93       	st	X, r24
    SET_BIT(TCCR1,ICES1);   // Rising Edge
     c6a:	ae e4       	ldi	r26, 0x4E	; 78
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	ee e4       	ldi	r30, 0x4E	; 78
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	91 81       	ldd	r25, Z+1	; 0x01
     c76:	80 64       	ori	r24, 0x40	; 64
     c78:	11 96       	adiw	r26, 0x01	; 1
     c7a:	9c 93       	st	X, r25
     c7c:	8e 93       	st	-X, r24

}
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <__vector_11>:

void __vector_11(void)
{
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	2f 93       	push	r18
     c90:	3f 93       	push	r19
     c92:	4f 93       	push	r20
     c94:	5f 93       	push	r21
     c96:	6f 93       	push	r22
     c98:	7f 93       	push	r23
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	af 93       	push	r26
     ca0:	bf 93       	push	r27
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
    static u16 counter=0;
	counter++;
     cae:	80 91 7b 00 	lds	r24, 0x007B
     cb2:	90 91 7c 00 	lds	r25, 0x007C
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	90 93 7c 00 	sts	0x007C, r25
     cbc:	80 93 7b 00 	sts	0x007B, r24
	if(counter==245)
     cc0:	80 91 7b 00 	lds	r24, 0x007B
     cc4:	90 91 7c 00 	lds	r25, 0x007C
     cc8:	85 3f       	cpi	r24, 0xF5	; 245
     cca:	91 05       	cpc	r25, r1
     ccc:	61 f4       	brne	.+24     	; 0xce6 <__vector_11+0x62>
	{
		TCNT0=PRELOAD_VALUE;
     cce:	e2 e5       	ldi	r30, 0x52	; 82
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	8c ed       	ldi	r24, 0xDC	; 220
     cd4:	80 83       	st	Z, r24
		DIO_VidTogglePin(PORTA,PIN0);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_VidTogglePin>
		counter=0;
     cde:	10 92 7c 00 	sts	0x007C, r1
     ce2:	10 92 7b 00 	sts	0x007B, r1
	}


}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	0f 90       	pop	r0
     d08:	1f 90       	pop	r1
     d0a:	18 95       	reti

00000d0c <__vector_10>:

void __vector_10(void)
{
     d0c:	1f 92       	push	r1
     d0e:	0f 92       	push	r0
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	0f 92       	push	r0
     d14:	11 24       	eor	r1, r1
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
    static u16 Counter=0;
	Counter++;
     d36:	80 91 7d 00 	lds	r24, 0x007D
     d3a:	90 91 7e 00 	lds	r25, 0x007E
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	90 93 7e 00 	sts	0x007E, r25
     d44:	80 93 7d 00 	sts	0x007D, r24
	if(Counter==5000)
     d48:	80 91 7d 00 	lds	r24, 0x007D
     d4c:	90 91 7e 00 	lds	r25, 0x007E
     d50:	23 e1       	ldi	r18, 0x13	; 19
     d52:	88 38       	cpi	r24, 0x88	; 136
     d54:	92 07       	cpc	r25, r18
     d56:	41 f4       	brne	.+16     	; 0xd68 <__vector_10+0x5c>
	{

        DIO_VidTogglePin(PORTA,PIN0);
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_VidTogglePin>
		Counter=0;
     d60:	10 92 7e 00 	sts	0x007E, r1
     d64:	10 92 7d 00 	sts	0x007D, r1

	}

}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <__vector_5>:

void __vector_5(void)
{
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	ef 93       	push	r30
     dae:	ff 93       	push	r31
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
    static u16 counter=0;
	counter++;
     db8:	80 91 7f 00 	lds	r24, 0x007F
     dbc:	90 91 80 00 	lds	r25, 0x0080
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	90 93 80 00 	sts	0x0080, r25
     dc6:	80 93 7f 00 	sts	0x007F, r24
	if(counter==245)
     dca:	80 91 7f 00 	lds	r24, 0x007F
     dce:	90 91 80 00 	lds	r25, 0x0080
     dd2:	85 3f       	cpi	r24, 0xF5	; 245
     dd4:	91 05       	cpc	r25, r1
     dd6:	61 f4       	brne	.+24     	; 0xdf0 <__vector_5+0x62>
	{
		TCNT2=PRELOAD_VALUE;
     dd8:	e4 e4       	ldi	r30, 0x44	; 68
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	8c ed       	ldi	r24, 0xDC	; 220
     dde:	80 83       	st	Z, r24
		DIO_VidTogglePin(PORTA,PIN0);
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_VidTogglePin>
		counter=0;
     de8:	10 92 80 00 	sts	0x0080, r1
     dec:	10 92 7f 00 	sts	0x007F, r1
	}

}
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	7f 91       	pop	r23
     e02:	6f 91       	pop	r22
     e04:	5f 91       	pop	r21
     e06:	4f 91       	pop	r20
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <__vector_6>:


}*/

void __vector_6(void)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	if(0==flag)
     e1e:	80 91 78 00 	lds	r24, 0x0078
     e22:	88 23       	and	r24, r24
     e24:	d1 f4       	brne	.+52     	; 0xe5a <__vector_6+0x44>
	{
		snap1=ICR1;
     e26:	e6 e4       	ldi	r30, 0x46	; 70
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	90 93 82 00 	sts	0x0082, r25
     e32:	80 93 81 00 	sts	0x0081, r24
		ov=0;
     e36:	10 92 77 00 	sts	0x0077, r1
     e3a:	10 92 76 00 	sts	0x0076, r1
		// falling edge
		CLR_BIT(TCCR1,ICES1);
     e3e:	ae e4       	ldi	r26, 0x4E	; 78
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	ee e4       	ldi	r30, 0x4E	; 78
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	8f 7b       	andi	r24, 0xBF	; 191
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	9c 93       	st	X, r25
     e50:	8e 93       	st	-X, r24
		flag=1;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	80 93 78 00 	sts	0x0078, r24
     e58:	53 c0       	rjmp	.+166    	; 0xf00 <__vector_6+0xea>
	}
	else if(1==flag)
     e5a:	80 91 78 00 	lds	r24, 0x0078
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	59 f5       	brne	.+86     	; 0xeb8 <__vector_6+0xa2>
	{
		snap2= ICR1+ (ov*65536);
     e62:	e6 e4       	ldi	r30, 0x46	; 70
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	91 81       	ldd	r25, Z+1	; 0x01
     e6a:	9c 01       	movw	r18, r24
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	80 91 76 00 	lds	r24, 0x0076
     e74:	90 91 77 00 	lds	r25, 0x0077
     e78:	cc 01       	movw	r24, r24
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	dc 01       	movw	r26, r24
     e80:	99 27       	eor	r25, r25
     e82:	88 27       	eor	r24, r24
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	a4 1f       	adc	r26, r20
     e8a:	b5 1f       	adc	r27, r21
     e8c:	80 93 83 00 	sts	0x0083, r24
     e90:	90 93 84 00 	sts	0x0084, r25
     e94:	a0 93 85 00 	sts	0x0085, r26
     e98:	b0 93 86 00 	sts	0x0086, r27
		flag=2;
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	80 93 78 00 	sts	0x0078, r24
		// rising edge
		SET_BIT(TCCR1,ICES1);
     ea2:	ae e4       	ldi	r26, 0x4E	; 78
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ee e4       	ldi	r30, 0x4E	; 78
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	80 64       	ori	r24, 0x40	; 64
     eb0:	11 96       	adiw	r26, 0x01	; 1
     eb2:	9c 93       	st	X, r25
     eb4:	8e 93       	st	-X, r24
     eb6:	24 c0       	rjmp	.+72     	; 0xf00 <__vector_6+0xea>
	}
	else if (2==flag)
     eb8:	80 91 78 00 	lds	r24, 0x0078
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	01 f5       	brne	.+64     	; 0xf00 <__vector_6+0xea>
	{


		snap3= ICR1+ (ov*65536);
     ec0:	e6 e4       	ldi	r30, 0x46	; 70
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	9c 01       	movw	r18, r24
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	80 91 76 00 	lds	r24, 0x0076
     ed2:	90 91 77 00 	lds	r25, 0x0077
     ed6:	cc 01       	movw	r24, r24
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	dc 01       	movw	r26, r24
     ede:	99 27       	eor	r25, r25
     ee0:	88 27       	eor	r24, r24
     ee2:	82 0f       	add	r24, r18
     ee4:	93 1f       	adc	r25, r19
     ee6:	a4 1f       	adc	r26, r20
     ee8:	b5 1f       	adc	r27, r21
     eea:	80 93 87 00 	sts	0x0087, r24
     eee:	90 93 88 00 	sts	0x0088, r25
     ef2:	a0 93 89 00 	sts	0x0089, r26
     ef6:	b0 93 8a 00 	sts	0x008A, r27

		flag=3;
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	80 93 78 00 	sts	0x0078, r24
	}


}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <__vector_9>:

void __vector_9(void)
{
     f06:	1f 92       	push	r1
     f08:	0f 92       	push	r0
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	ov++;
     f1c:	80 91 76 00 	lds	r24, 0x0076
     f20:	90 91 77 00 	lds	r25, 0x0077
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	90 93 77 00 	sts	0x0077, r25
     f2a:	80 93 76 00 	sts	0x0076, r24
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	9f 91       	pop	r25
     f34:	8f 91       	pop	r24
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	0f 90       	pop	r0
     f3c:	1f 90       	pop	r1
     f3e:	18 95       	reti

00000f40 <__vector_7>:

void __vector_7(void)
{
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	0f 92       	push	r0
     f48:	11 24       	eor	r1, r1
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	DIO_VidTogglePin(PORTA,PIN4);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	64 e0       	ldi	r22, 0x04	; 4
     f6e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_VidTogglePin>
	callback();
     f72:	e0 91 79 00 	lds	r30, 0x0079
     f76:	f0 91 7a 00 	lds	r31, 0x007A
     f7a:	09 95       	icall
}
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	ff 91       	pop	r31
     f82:	ef 91       	pop	r30
     f84:	bf 91       	pop	r27
     f86:	af 91       	pop	r26
     f88:	9f 91       	pop	r25
     f8a:	8f 91       	pop	r24
     f8c:	7f 91       	pop	r23
     f8e:	6f 91       	pop	r22
     f90:	5f 91       	pop	r21
     f92:	4f 91       	pop	r20
     f94:	3f 91       	pop	r19
     f96:	2f 91       	pop	r18
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti

00000fa2 <Led1>:
#include"DIO_interface.h"
#include"TIMER_interface.h"
#include"RTOS_interface.h"

void Led1(void)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	DIO_VidTogglePin(PORTA,PIN0);
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_VidTogglePin>
}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <Led2>:
void Led2(void)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
	DIO_VidTogglePin(PORTA,PIN1);
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_VidTogglePin>

}
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <Led3>:
void Led3(void)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	DIO_VidTogglePin(PORTA,PIN2);
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	62 e0       	ldi	r22, 0x02	; 2
     fda:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_VidTogglePin>

}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <Led4>:
void Led4(void)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	DIO_VidTogglePin(PORTA,PIN3);
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	63 e0       	ldi	r22, 0x03	; 3
     ff0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_VidTogglePin>

}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <main>:



void main()
{
     ffa:	0f 93       	push	r16
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    DIO_VidSetPortDirection(PORTA,OUTPUT);
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_VidSetPortDirection>
    RTOS_VoidStart();
    100c:	0e 94 31 04 	call	0x862	; 0x862 <RTOS_VoidStart>
	RTOS_VoidCreateTask(5	,	&Led1	,0, 	RESUMED , 7);
    1010:	21 ed       	ldi	r18, 0xD1	; 209
    1012:	37 e0       	ldi	r19, 0x07	; 7
    1014:	85 e0       	ldi	r24, 0x05	; 5
    1016:	b9 01       	movw	r22, r18
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	07 e0       	ldi	r16, 0x07	; 7
    101e:	0e 94 3e 04 	call	0x87c	; 0x87c <RTOS_VoidCreateTask>
	RTOS_VoidCreateTask(1	,	&Led2	,1, 	RESUMED	, 0);
    1022:	2c ed       	ldi	r18, 0xDC	; 220
    1024:	37 e0       	ldi	r19, 0x07	; 7
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	b9 01       	movw	r22, r18
    102a:	41 e0       	ldi	r20, 0x01	; 1
    102c:	21 e0       	ldi	r18, 0x01	; 1
    102e:	00 e0       	ldi	r16, 0x00	; 0
    1030:	0e 94 3e 04 	call	0x87c	; 0x87c <RTOS_VoidCreateTask>
	RTOS_VoidCreateTask(10	,	&Led3	,2, 	RESUMED , 2);
    1034:	27 ee       	ldi	r18, 0xE7	; 231
    1036:	37 e0       	ldi	r19, 0x07	; 7
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	b9 01       	movw	r22, r18
    103c:	42 e0       	ldi	r20, 0x02	; 2
    103e:	21 e0       	ldi	r18, 0x01	; 1
    1040:	02 e0       	ldi	r16, 0x02	; 2
    1042:	0e 94 3e 04 	call	0x87c	; 0x87c <RTOS_VoidCreateTask>
	RTOS_VoidCreateTask(5	,	&Led4	,3, 	RESUMED , 2);
    1046:	22 ef       	ldi	r18, 0xF2	; 242
    1048:	37 e0       	ldi	r19, 0x07	; 7
    104a:	85 e0       	ldi	r24, 0x05	; 5
    104c:	b9 01       	movw	r22, r18
    104e:	43 e0       	ldi	r20, 0x03	; 3
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	02 e0       	ldi	r16, 0x02	; 2
    1054:	0e 94 3e 04 	call	0x87c	; 0x87c <RTOS_VoidCreateTask>
    1058:	ff cf       	rjmp	.-2      	; 0x1058 <main+0x5e>

0000105a <__udivmodhi4>:
    105a:	aa 1b       	sub	r26, r26
    105c:	bb 1b       	sub	r27, r27
    105e:	51 e1       	ldi	r21, 0x11	; 17
    1060:	07 c0       	rjmp	.+14     	; 0x1070 <__udivmodhi4_ep>

00001062 <__udivmodhi4_loop>:
    1062:	aa 1f       	adc	r26, r26
    1064:	bb 1f       	adc	r27, r27
    1066:	a6 17       	cp	r26, r22
    1068:	b7 07       	cpc	r27, r23
    106a:	10 f0       	brcs	.+4      	; 0x1070 <__udivmodhi4_ep>
    106c:	a6 1b       	sub	r26, r22
    106e:	b7 0b       	sbc	r27, r23

00001070 <__udivmodhi4_ep>:
    1070:	88 1f       	adc	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	5a 95       	dec	r21
    1076:	a9 f7       	brne	.-22     	; 0x1062 <__udivmodhi4_loop>
    1078:	80 95       	com	r24
    107a:	90 95       	com	r25
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	08 95       	ret

00001082 <_exit>:
    1082:	f8 94       	cli

00001084 <__stop_program>:
    1084:	ff cf       	rjmp	.-2      	; 0x1084 <__stop_program>
