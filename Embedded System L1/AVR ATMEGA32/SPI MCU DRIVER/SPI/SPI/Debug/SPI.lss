
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000572  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000572  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  00000612  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c29  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e9  00000000  00000000  00001359  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a4  00000000  00000000  00001b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000021e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053a  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045c  00000000  00000000  000028a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 02 	call	0x534	; 0x534 <main>
  8a:	0c 94 b7 02 	jmp	0x56e	; 0x56e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
#include"../../00-LIB/BIT_MATH.h"
#include"DIO_register.h"
#include"DIO_interface.h"

void DIO_voidSetPinDirection		(ST_DIO_config_t * configurations)
{
  92:	fc 01       	movw	r30, r24
	if(OUTPUT==configurations->state)
  94:	82 81       	ldd	r24, Z+2	; 0x02
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	c9 f5       	brne	.+114    	; 0x10c <DIO_voidSetPinDirection+0x7a>
	{
		switch (configurations->port_no)
  9a:	80 81       	ld	r24, Z
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 f0       	breq	.+36     	; 0xc4 <DIO_voidSetPinDirection+0x32>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_voidSetPinDirection+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	d9 f0       	breq	.+54     	; 0xdc <DIO_voidSetPinDirection+0x4a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	29 f1       	breq	.+74     	; 0xf4 <DIO_voidSetPinDirection+0x62>
  aa:	08 95       	ret
		{
			case PORTA:SET_BIT(DDRA, configurations->pin_no); break;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	01 80       	ldd	r0, Z+1	; 0x01
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinDirection+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinDirection+0x22>
  bc:	9a b3       	in	r25, 0x1a	; 26
  be:	89 2b       	or	r24, r25
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
			case PORTB:SET_BIT(DDRB,  configurations->pin_no); break;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	01 80       	ldd	r0, Z+1	; 0x01
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_voidSetPinDirection+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	0a 94       	dec	r0
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_voidSetPinDirection+0x3a>
  d4:	97 b3       	in	r25, 0x17	; 23
  d6:	89 2b       	or	r24, r25
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
			case PORTC:SET_BIT(DDRC,  configurations->pin_no); break;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 80       	ldd	r0, Z+1	; 0x01
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_voidSetPinDirection+0x56>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_voidSetPinDirection+0x52>
  ec:	94 b3       	in	r25, 0x14	; 20
  ee:	89 2b       	or	r24, r25
  f0:	84 bb       	out	0x14, r24	; 20
  f2:	08 95       	ret
			case PORTD:SET_BIT(DDRD,  configurations->pin_no); break;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 80       	ldd	r0, Z+1	; 0x01
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_voidSetPinDirection+0x6e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_voidSetPinDirection+0x6a>
 104:	91 b3       	in	r25, 0x11	; 17
 106:	89 2b       	or	r24, r25
 108:	81 bb       	out	0x11, r24	; 17
 10a:	08 95       	ret
	
		}	
	}
	else if(INPUT==configurations->state)
 10c:	81 11       	cpse	r24, r1
 10e:	3c c0       	rjmp	.+120    	; 0x188 <DIO_voidSetPinDirection+0xf6>
	{
		switch(configurations->port_no)
 110:	80 81       	ld	r24, Z
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	99 f0       	breq	.+38     	; 0x13c <DIO_voidSetPinDirection+0xaa>
 116:	28 f0       	brcs	.+10     	; 0x122 <DIO_voidSetPinDirection+0x90>
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	e9 f0       	breq	.+58     	; 0x156 <DIO_voidSetPinDirection+0xc4>
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	41 f1       	breq	.+80     	; 0x170 <DIO_voidSetPinDirection+0xde>
 120:	08 95       	ret
		{
			case PORTA:CLR_BIT(DDRA,  configurations->pin_no); break;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 80       	ldd	r0, Z+1	; 0x01
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_voidSetPinDirection+0x9c>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_voidSetPinDirection+0x98>
 132:	80 95       	com	r24
 134:	9a b3       	in	r25, 0x1a	; 26
 136:	89 23       	and	r24, r25
 138:	8a bb       	out	0x1a, r24	; 26
 13a:	08 95       	ret
			case PORTB:CLR_BIT(DDRB,  configurations->pin_no); break;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 80       	ldd	r0, Z+1	; 0x01
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_voidSetPinDirection+0xb6>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_voidSetPinDirection+0xb2>
 14c:	80 95       	com	r24
 14e:	97 b3       	in	r25, 0x17	; 23
 150:	89 23       	and	r24, r25
 152:	87 bb       	out	0x17, r24	; 23
 154:	08 95       	ret
		    case PORTC:CLR_BIT(DDRC,  configurations->pin_no); break;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	01 80       	ldd	r0, Z+1	; 0x01
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_voidSetPinDirection+0xd0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_voidSetPinDirection+0xcc>
 166:	80 95       	com	r24
 168:	94 b3       	in	r25, 0x14	; 20
 16a:	89 23       	and	r24, r25
 16c:	84 bb       	out	0x14, r24	; 20
 16e:	08 95       	ret
		    case PORTD:CLR_BIT(DDRD,  configurations->pin_no); break;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 80       	ldd	r0, Z+1	; 0x01
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinDirection+0xea>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinDirection+0xe6>
 180:	80 95       	com	r24
 182:	91 b3       	in	r25, 0x11	; 17
 184:	89 23       	and	r24, r25
 186:	81 bb       	out	0x11, r24	; 17
 188:	08 95       	ret

0000018a <DIO_voidSetPinValue>:
	}
	
}
void DIO_voidSetPinValue			(uint8_t copy_uint8_tport, uint8_t copy_uint8_tpin, uint8_t copy_uint8_tvalue)
{
	if(HIGH==copy_uint8_tvalue)
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	a1 f5       	brne	.+104    	; 0x1f6 <DIO_voidSetPinValue+0x6c>
	{
		switch (copy_uint8_tport)
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	89 f0       	breq	.+34     	; 0x1b4 <DIO_voidSetPinValue+0x2a>
 192:	28 f0       	brcs	.+10     	; 0x19e <DIO_voidSetPinValue+0x14>
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	c9 f0       	breq	.+50     	; 0x1ca <DIO_voidSetPinValue+0x40>
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	11 f1       	breq	.+68     	; 0x1e0 <DIO_voidSetPinValue+0x56>
 19c:	08 95       	ret
		{
			case PORTA:SET_BIT(PORT_A, copy_uint8_tpin); break;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_voidSetPinValue+0x1e>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_voidSetPinValue+0x1a>
 1ac:	9b b3       	in	r25, 0x1b	; 27
 1ae:	89 2b       	or	r24, r25
 1b0:	8b bb       	out	0x1b, r24	; 27
 1b2:	08 95       	ret
			case PORTB:SET_BIT(PORT_B, copy_uint8_tpin); break;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidSetPinValue+0x34>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidSetPinValue+0x30>
 1c2:	98 b3       	in	r25, 0x18	; 24
 1c4:	89 2b       	or	r24, r25
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
			case PORTC:SET_BIT(PORT_C, copy_uint8_tpin); break;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinValue+0x4a>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinValue+0x46>
 1d8:	95 b3       	in	r25, 0x15	; 21
 1da:	89 2b       	or	r24, r25
 1dc:	85 bb       	out	0x15, r24	; 21
 1de:	08 95       	ret
			case PORTD:SET_BIT(PORT_D, copy_uint8_tpin); break;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_voidSetPinValue+0x60>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_voidSetPinValue+0x5c>
 1ee:	92 b3       	in	r25, 0x12	; 18
 1f0:	89 2b       	or	r24, r25
 1f2:	82 bb       	out	0x12, r24	; 18
 1f4:	08 95       	ret
	
		}	
	}
	else if(LOW==copy_uint8_tvalue)
 1f6:	41 11       	cpse	r20, r1
 1f8:	37 c0       	rjmp	.+110    	; 0x268 <DIO_voidSetPinValue+0xde>
	{
		switch(copy_uint8_tport)
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	91 f0       	breq	.+36     	; 0x222 <DIO_voidSetPinValue+0x98>
 1fe:	28 f0       	brcs	.+10     	; 0x20a <DIO_voidSetPinValue+0x80>
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	d9 f0       	breq	.+54     	; 0x23a <DIO_voidSetPinValue+0xb0>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	29 f1       	breq	.+74     	; 0x252 <DIO_voidSetPinValue+0xc8>
 208:	08 95       	ret
		{
			case PORTA:CLR_BIT(PORT_A, copy_uint8_tpin); break;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_voidSetPinValue+0x8a>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_voidSetPinValue+0x86>
 218:	80 95       	com	r24
 21a:	9b b3       	in	r25, 0x1b	; 27
 21c:	89 23       	and	r24, r25
 21e:	8b bb       	out	0x1b, r24	; 27
 220:	08 95       	ret
			case PORTB:CLR_BIT(PORT_B, copy_uint8_tpin); break;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_voidSetPinValue+0xa2>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_voidSetPinValue+0x9e>
 230:	80 95       	com	r24
 232:	98 b3       	in	r25, 0x18	; 24
 234:	89 23       	and	r24, r25
 236:	88 bb       	out	0x18, r24	; 24
 238:	08 95       	ret
		    case PORTC:CLR_BIT(PORT_C, copy_uint8_tpin); break;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_voidSetPinValue+0xba>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_voidSetPinValue+0xb6>
 248:	80 95       	com	r24
 24a:	95 b3       	in	r25, 0x15	; 21
 24c:	89 23       	and	r24, r25
 24e:	85 bb       	out	0x15, r24	; 21
 250:	08 95       	ret
		    case PORTD:CLR_BIT(PORT_D, copy_uint8_tpin); break;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_voidSetPinValue+0xd2>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_voidSetPinValue+0xce>
 260:	80 95       	com	r24
 262:	92 b3       	in	r25, 0x12	; 18
 264:	89 23       	and	r24, r25
 266:	82 bb       	out	0x12, r24	; 18
 268:	08 95       	ret

0000026a <GIE_voidEnable>:

void SPI_SETCALLBACK(void(*ptr)(void))
{
	if(ptr !=NULL)
	{
	 ptrf=ptr;
 26a:	8f b7       	in	r24, 0x3f	; 63
 26c:	80 68       	ori	r24, 0x80	; 128
 26e:	8f bf       	out	0x3f, r24	; 63
 270:	08 95       	ret

00000272 <GIE_voidDisable>:
 272:	8f b7       	in	r24, 0x3f	; 63
 274:	8f 77       	andi	r24, 0x7F	; 127
 276:	8f bf       	out	0x3f, r24	; 63
 278:	08 95       	ret

0000027a <SPI_Init>:
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	2c 97       	sbiw	r28, 0x0c	; 12
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61
 292:	fc 01       	movw	r30, r24
 294:	80 85       	ldd	r24, Z+8	; 0x08
 296:	91 85       	ldd	r25, Z+9	; 0x09
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	91 05       	cpc	r25, r1
 29c:	51 f4       	brne	.+20     	; 0x2b2 <SPI_Init+0x38>
 29e:	8e b1       	in	r24, 0x0e	; 14
 2a0:	8e 7f       	andi	r24, 0xFE	; 254
 2a2:	8e b9       	out	0x0e, r24	; 14
 2a4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	8d 7f       	andi	r24, 0xFD	; 253
 2ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 2b0:	55 c0       	rjmp	.+170    	; 0x35c <SPI_Init+0xe2>
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	49 f4       	brne	.+18     	; 0x2c8 <SPI_Init+0x4e>
 2b6:	8e b1       	in	r24, 0x0e	; 14
 2b8:	8e 7f       	andi	r24, 0xFE	; 254
 2ba:	8e b9       	out	0x0e, r24	; 14
 2bc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 2c0:	8c 7f       	andi	r24, 0xFC	; 252
 2c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 2c6:	4a c0       	rjmp	.+148    	; 0x35c <SPI_Init+0xe2>
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	91 05       	cpc	r25, r1
 2cc:	51 f4       	brne	.+20     	; 0x2e2 <SPI_Init+0x68>
 2ce:	8e b1       	in	r24, 0x0e	; 14
 2d0:	8e 7f       	andi	r24, 0xFE	; 254
 2d2:	8e b9       	out	0x0e, r24	; 14
 2d4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	8e 7f       	andi	r24, 0xFE	; 254
 2dc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 2e0:	3d c0       	rjmp	.+122    	; 0x35c <SPI_Init+0xe2>
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	91 05       	cpc	r25, r1
 2e6:	49 f4       	brne	.+18     	; 0x2fa <SPI_Init+0x80>
 2e8:	8e b1       	in	r24, 0x0e	; 14
 2ea:	8e 7f       	andi	r24, 0xFE	; 254
 2ec:	8e b9       	out	0x0e, r24	; 14
 2ee:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 2f2:	83 60       	ori	r24, 0x03	; 3
 2f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 2f8:	31 c0       	rjmp	.+98     	; 0x35c <SPI_Init+0xe2>
 2fa:	85 30       	cpi	r24, 0x05	; 5
 2fc:	91 05       	cpc	r25, r1
 2fe:	51 f4       	brne	.+20     	; 0x314 <SPI_Init+0x9a>
 300:	8e b1       	in	r24, 0x0e	; 14
 302:	81 60       	ori	r24, 0x01	; 1
 304:	8e b9       	out	0x0e, r24	; 14
 306:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	8d 7f       	andi	r24, 0xFD	; 253
 30e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 312:	24 c0       	rjmp	.+72     	; 0x35c <SPI_Init+0xe2>
 314:	84 30       	cpi	r24, 0x04	; 4
 316:	91 05       	cpc	r25, r1
 318:	49 f4       	brne	.+18     	; 0x32c <SPI_Init+0xb2>
 31a:	8e b1       	in	r24, 0x0e	; 14
 31c:	81 60       	ori	r24, 0x01	; 1
 31e:	8e b9       	out	0x0e, r24	; 14
 320:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 324:	8c 7f       	andi	r24, 0xFC	; 252
 326:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 32a:	18 c0       	rjmp	.+48     	; 0x35c <SPI_Init+0xe2>
 32c:	86 30       	cpi	r24, 0x06	; 6
 32e:	91 05       	cpc	r25, r1
 330:	51 f4       	brne	.+20     	; 0x346 <SPI_Init+0xcc>
 332:	8e b1       	in	r24, 0x0e	; 14
 334:	81 60       	ori	r24, 0x01	; 1
 336:	8e b9       	out	0x0e, r24	; 14
 338:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 33c:	82 60       	ori	r24, 0x02	; 2
 33e:	8e 7f       	andi	r24, 0xFE	; 254
 340:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 344:	0b c0       	rjmp	.+22     	; 0x35c <SPI_Init+0xe2>
 346:	08 97       	sbiw	r24, 0x08	; 8
 348:	09 f0       	breq	.+2      	; 0x34c <SPI_Init+0xd2>
 34a:	b3 c0       	rjmp	.+358    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 34c:	8e b1       	in	r24, 0x0e	; 14
 34e:	81 60       	ori	r24, 0x01	; 1
 350:	8e b9       	out	0x0e, r24	; 14
 352:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 356:	83 60       	ori	r24, 0x03	; 3
 358:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 35c:	84 81       	ldd	r24, Z+4	; 0x04
 35e:	95 81       	ldd	r25, Z+5	; 0x05
 360:	00 97       	sbiw	r24, 0x00	; 0
 362:	31 f4       	brne	.+12     	; 0x370 <SPI_Init+0xf6>
 364:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 368:	87 7f       	andi	r24, 0xF7	; 247
 36a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 36e:	08 c0       	rjmp	.+16     	; 0x380 <SPI_Init+0x106>
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	09 f0       	breq	.+2      	; 0x376 <SPI_Init+0xfc>
 374:	a0 c0       	rjmp	.+320    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 376:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 37a:	88 60       	ori	r24, 0x08	; 8
 37c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 380:	86 81       	ldd	r24, Z+6	; 0x06
 382:	97 81       	ldd	r25, Z+7	; 0x07
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	31 f4       	brne	.+12     	; 0x394 <SPI_Init+0x11a>
 388:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 38c:	8b 7f       	andi	r24, 0xFB	; 251
 38e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <SPI_Init+0x12a>
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	09 f0       	breq	.+2      	; 0x39a <SPI_Init+0x120>
 398:	90 c0       	rjmp	.+288    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 39a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 39e:	84 60       	ori	r24, 0x04	; 4
 3a0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 3a4:	82 85       	ldd	r24, Z+10	; 0x0a
 3a6:	93 85       	ldd	r25, Z+11	; 0x0b
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	31 f4       	brne	.+12     	; 0x3b8 <SPI_Init+0x13e>
 3ac:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 3b0:	80 62       	ori	r24, 0x20	; 32
 3b2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <SPI_Init+0x14e>
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	09 f0       	breq	.+2      	; 0x3be <SPI_Init+0x144>
 3bc:	80 c0       	rjmp	.+256    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 3be:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 3c2:	8f 7d       	andi	r24, 0xDF	; 223
 3c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 3c8:	8f 01       	movw	r16, r30
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	93 81       	ldd	r25, Z+3	; 0x03
 3ce:	00 97       	sbiw	r24, 0x00	; 0
 3d0:	41 f4       	brne	.+16     	; 0x3e2 <SPI_Init+0x168>
 3d2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 3d6:	80 68       	ori	r24, 0x80	; 128
 3d8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 3dc:	0e 94 35 01 	call	0x26a	; 0x26a <GIE_voidEnable>
 3e0:	0a c0       	rjmp	.+20     	; 0x3f6 <SPI_Init+0x17c>
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <SPI_Init+0x16e>
 3e6:	6d c0       	rjmp	.+218    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 3e8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 3ec:	8f 77       	andi	r24, 0x7F	; 127
 3ee:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 3f2:	0e 94 39 01 	call	0x272	; 0x272 <GIE_voidDisable>
 3f6:	f8 01       	movw	r30, r16
 3f8:	80 81       	ld	r24, Z
 3fa:	91 81       	ldd	r25, Z+1	; 0x01
 3fc:	00 97       	sbiw	r24, 0x00	; 0
 3fe:	21 f5       	brne	.+72     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	8f 83       	std	Y+7, r24	; 0x07
 404:	95 e0       	ldi	r25, 0x05	; 5
 406:	98 87       	std	Y+8, r25	; 0x08
 408:	89 87       	std	Y+9, r24	; 0x09
 40a:	8c 83       	std	Y+4, r24	; 0x04
 40c:	97 e0       	ldi	r25, 0x07	; 7
 40e:	9d 83       	std	Y+5, r25	; 0x05
 410:	8e 83       	std	Y+6, r24	; 0x06
 412:	89 83       	std	Y+1, r24	; 0x01
 414:	94 e0       	ldi	r25, 0x04	; 4
 416:	9a 83       	std	Y+2, r25	; 0x02
 418:	8b 83       	std	Y+3, r24	; 0x03
 41a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 41e:	80 61       	ori	r24, 0x10	; 16
 420:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 424:	ce 01       	movw	r24, r28
 426:	04 96       	adiw	r24, 0x04	; 4
 428:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 42c:	ce 01       	movw	r24, r28
 42e:	07 96       	adiw	r24, 0x07	; 7
 430:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	64 e0       	ldi	r22, 0x04	; 4
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_voidSetPinValue>
 446:	2d c0       	rjmp	.+90     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	e9 f5       	brne	.+122    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	8a 87       	std	Y+10, r24	; 0x0a
 450:	96 e0       	ldi	r25, 0x06	; 6
 452:	9b 87       	std	Y+11, r25	; 0x0b
 454:	8c 87       	std	Y+12, r24	; 0x0c
 456:	8f 83       	std	Y+7, r24	; 0x07
 458:	95 e0       	ldi	r25, 0x05	; 5
 45a:	98 87       	std	Y+8, r25	; 0x08
 45c:	19 86       	std	Y+9, r1	; 0x09
 45e:	8c 83       	std	Y+4, r24	; 0x04
 460:	97 e0       	ldi	r25, 0x07	; 7
 462:	9d 83       	std	Y+5, r25	; 0x05
 464:	1e 82       	std	Y+6, r1	; 0x06
 466:	89 83       	std	Y+1, r24	; 0x01
 468:	84 e0       	ldi	r24, 0x04	; 4
 46a:	8a 83       	std	Y+2, r24	; 0x02
 46c:	1b 82       	std	Y+3, r1	; 0x03
 46e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 472:	8f 7e       	andi	r24, 0xEF	; 239
 474:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 478:	ce 01       	movw	r24, r28
 47a:	0a 96       	adiw	r24, 0x0a	; 10
 47c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 480:	ce 01       	movw	r24, r28
 482:	04 96       	adiw	r24, 0x04	; 4
 484:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 488:	ce 01       	movw	r24, r28
 48a:	07 96       	adiw	r24, 0x07	; 7
 48c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 490:	ce 01       	movw	r24, r28
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	64 e0       	ldi	r22, 0x04	; 4
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_voidSetPinValue>
 4a2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SPCR_Help>
 4a6:	80 64       	ori	r24, 0x40	; 64
 4a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <SPCR_Help>
 4ac:	8d b9       	out	0x0d, r24	; 13
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0b c0       	rjmp	.+22     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4b2:	85 e0       	ldi	r24, 0x05	; 5
 4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c2:	86 e0       	ldi	r24, 0x06	; 6
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	2c 96       	adiw	r28, 0x0c	; 12
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	08 95       	ret

000004de <SPI_ReceiveData>:
 4de:	77 9b       	sbis	0x0e, 7	; 14
 4e0:	fe cf       	rjmp	.-4      	; 0x4de <SPI_ReceiveData>
 4e2:	8f b1       	in	r24, 0x0f	; 15
 4e4:	08 95       	ret

000004e6 <__vector_12>:




void __vector_12(void )
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
	ptrf();
 508:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__data_end>
 50c:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__data_end+0x1>
 510:	09 95       	icall
}
 512:	ff 91       	pop	r31
 514:	ef 91       	pop	r30
 516:	bf 91       	pop	r27
 518:	af 91       	pop	r26
 51a:	9f 91       	pop	r25
 51c:	8f 91       	pop	r24
 51e:	7f 91       	pop	r23
 520:	6f 91       	pop	r22
 522:	5f 91       	pop	r21
 524:	4f 91       	pop	r20
 526:	3f 91       	pop	r19
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <main>:
#include"../00-LIB/types.h"
#include"../01-MCAL/04-SPI/spi.h"
#include"../01-MCAL/01-DIO/DIO_interface.h"
#include"../01-MCAL/01-DIO/DIO_register.h"
void main()
{
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
 53c:	2c 97       	sbiw	r28, 0x0c	; 12
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xff;
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	84 bb       	out	0x14, r24	; 20
	ST_SPI_config_t sppi = {SLAVE,INT_DISABLE,LEADING_RISING,LEADING_SETUP,F_16,LSB_FIRST};
 54c:	8c e0       	ldi	r24, 0x0C	; 12
 54e:	e0 e6       	ldi	r30, 0x60	; 96
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	de 01       	movw	r26, r28
 554:	11 96       	adiw	r26, 0x01	; 1
 556:	01 90       	ld	r0, Z+
 558:	0d 92       	st	X+, r0
 55a:	8a 95       	dec	r24
 55c:	e1 f7       	brne	.-8      	; 0x556 <main+0x22>
	SPI_Init(&sppi);
 55e:	ce 01       	movw	r24, r28
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	0e 94 3d 01 	call	0x27a	; 0x27a <SPI_Init>
	
	uint8_t data = SPI_ReceiveData();	
 566:	0e 94 6f 02 	call	0x4de	; 0x4de <SPI_ReceiveData>
	PORT_C = data;
 56a:	85 bb       	out	0x15, r24	; 21
 56c:	ff cf       	rjmp	.-2      	; 0x56c <main+0x38>

0000056e <_exit>:
 56e:	f8 94       	cli

00000570 <__stop_program>:
 570:	ff cf       	rjmp	.-2      	; 0x570 <__stop_program>
