
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001f6  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  00000290  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f0d  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087e  00000000  00000000  00001309  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000915  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000780  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000474  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  8a:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_12>:




void __vector_12(void )
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	ptrf();
  b4:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
  b8:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
  bc:	09 95       	icall
}
  be:	ff 91       	pop	r31
  c0:	ef 91       	pop	r30
  c2:	bf 91       	pop	r27
  c4:	af 91       	pop	r26
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	7f 91       	pop	r23
  cc:	6f 91       	pop	r22
  ce:	5f 91       	pop	r21
  d0:	4f 91       	pop	r20
  d2:	3f 91       	pop	r19
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <TWI_MasterInit>:
	if (status != I2C_START)
	{
		return 0;
	}
	return status;
}
  e0:	fc 01       	movw	r30, r24
  e2:	84 81       	ldd	r24, Z+4	; 0x04
  e4:	81 11       	cpse	r24, r1
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <TWI_MasterInit+0x16>
  e8:	81 b1       	in	r24, 0x01	; 1
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	81 b9       	out	0x01, r24	; 1
  ee:	81 b1       	in	r24, 0x01	; 1
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	81 b9       	out	0x01, r24	; 1
  f4:	1a c0       	rjmp	.+52     	; 0x12a <TWI_MasterInit+0x4a>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	39 f4       	brne	.+14     	; 0x108 <TWI_MasterInit+0x28>
  fa:	81 b1       	in	r24, 0x01	; 1
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	81 b9       	out	0x01, r24	; 1
 100:	81 b1       	in	r24, 0x01	; 1
 102:	8d 7f       	andi	r24, 0xFD	; 253
 104:	81 b9       	out	0x01, r24	; 1
 106:	11 c0       	rjmp	.+34     	; 0x12a <TWI_MasterInit+0x4a>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	39 f4       	brne	.+14     	; 0x11a <TWI_MasterInit+0x3a>
 10c:	81 b1       	in	r24, 0x01	; 1
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	81 b9       	out	0x01, r24	; 1
 112:	81 b1       	in	r24, 0x01	; 1
 114:	82 60       	ori	r24, 0x02	; 2
 116:	81 b9       	out	0x01, r24	; 1
 118:	08 c0       	rjmp	.+16     	; 0x12a <TWI_MasterInit+0x4a>
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	a9 f4       	brne	.+42     	; 0x148 <TWI_MasterInit+0x68>
 11e:	81 b1       	in	r24, 0x01	; 1
 120:	81 60       	ori	r24, 0x01	; 1
 122:	81 b9       	out	0x01, r24	; 1
 124:	81 b1       	in	r24, 0x01	; 1
 126:	82 60       	ori	r24, 0x02	; 2
 128:	81 b9       	out	0x01, r24	; 1
 12a:	82 81       	ldd	r24, Z+2	; 0x02
 12c:	81 11       	cpse	r24, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <TWI_MasterInit+0x58>
 130:	86 b7       	in	r24, 0x36	; 54
 132:	81 60       	ori	r24, 0x01	; 1
 134:	86 bf       	out	0x36, r24	; 54
 136:	05 c0       	rjmp	.+10     	; 0x142 <TWI_MasterInit+0x62>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	41 f4       	brne	.+16     	; 0x14c <TWI_MasterInit+0x6c>
 13c:	86 b7       	in	r24, 0x36	; 54
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	86 bf       	out	0x36, r24	; 54
 142:	13 82       	std	Z+3, r1	; 0x03
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	08 95       	ret
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	08 95       	ret

00000150 <TWI_VoidStartCondition>:
 150:	86 b7       	in	r24, 0x36	; 54
 152:	84 6a       	ori	r24, 0xA4	; 164
 154:	86 bf       	out	0x36, r24	; 54
 156:	06 b6       	in	r0, 0x36	; 54
 158:	07 fe       	sbrs	r0, 7
 15a:	fd cf       	rjmp	.-6      	; 0x156 <TWI_VoidStartCondition+0x6>
 15c:	08 95       	ret

0000015e <TWI_VoidMaster_Send_Slave_Address_With_Write>:
 15e:	88 0f       	add	r24, r24
 160:	83 b9       	out	0x03, r24	; 3
 162:	61 30       	cpi	r22, 0x01	; 1
 164:	51 f4       	brne	.+20     	; 0x17a <TWI_VoidMaster_Send_Slave_Address_With_Write+0x1c>
 166:	83 b1       	in	r24, 0x03	; 3
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	83 b9       	out	0x03, r24	; 3
 16c:	86 b7       	in	r24, 0x36	; 54
 16e:	84 68       	ori	r24, 0x84	; 132
 170:	86 bf       	out	0x36, r24	; 54
 172:	06 b6       	in	r0, 0x36	; 54
 174:	07 fe       	sbrs	r0, 7
 176:	fd cf       	rjmp	.-6      	; 0x172 <TWI_VoidMaster_Send_Slave_Address_With_Write+0x14>
 178:	08 95       	ret
 17a:	83 b1       	in	r24, 0x03	; 3
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	83 b9       	out	0x03, r24	; 3
 180:	86 b7       	in	r24, 0x36	; 54
 182:	84 68       	ori	r24, 0x84	; 132
 184:	86 bf       	out	0x36, r24	; 54
 186:	06 b6       	in	r0, 0x36	; 54
 188:	07 fe       	sbrs	r0, 7
 18a:	fd cf       	rjmp	.-6      	; 0x186 <TWI_VoidMaster_Send_Slave_Address_With_Write+0x28>
 18c:	08 95       	ret

0000018e <TWI_VoidMaster_Write_Byte_To_Slave>:
 18e:	96 b7       	in	r25, 0x36	; 54
 190:	97 70       	andi	r25, 0x07	; 7
 192:	96 bf       	out	0x36, r25	; 54
 194:	83 b9       	out	0x03, r24	; 3
 196:	86 b7       	in	r24, 0x36	; 54
 198:	84 68       	ori	r24, 0x84	; 132
 19a:	86 bf       	out	0x36, r24	; 54
 19c:	06 b6       	in	r0, 0x36	; 54
 19e:	07 fe       	sbrs	r0, 7
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <TWI_VoidMaster_Write_Byte_To_Slave+0xe>
 1a2:	08 95       	ret

000001a4 <TWI_VoidStopCondition>:


void  TWI_VoidStopCondition()
{

	TWCR |=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);  /* Enable TWI, generate stop */
 1a4:	86 b7       	in	r24, 0x36	; 54
 1a6:	84 69       	ori	r24, 0x94	; 148
 1a8:	86 bf       	out	0x36, r24	; 54
    while(TWCR&(1<<TWSTO));	               /* Wait until stop condition execution */
 1aa:	06 b6       	in	r0, 0x36	; 54
 1ac:	04 fc       	sbrc	r0, 4
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <TWI_VoidStopCondition+0x6>

}
 1b0:	08 95       	ret

000001b2 <main>:
#include"../00-LIB/types.h"
#include"../00-LIB/BIT_Math.h"
#include "../01-MCAL/05-TWI/I2C.h"
void main()
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <main+0x6>
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <main+0x8>
 1ba:	1f 92       	push	r1
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
	ST_I2C_config_t Master = {32,DISABLE,ENABLE,ONE};
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	e0 e6       	ldi	r30, 0x60	; 96
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	de 01       	movw	r26, r28
 1c8:	11 96       	adiw	r26, 0x01	; 1
 1ca:	01 90       	ld	r0, Z+
 1cc:	0d 92       	st	X+, r0
 1ce:	8a 95       	dec	r24
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x18>
	TWI_MasterInit(&Master);
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	0e 94 70 00 	call	0xe0	; 0xe0 <TWI_MasterInit>
	TWI_VoidStartCondition();
 1da:	0e 94 a8 00 	call	0x150	; 0x150 <TWI_VoidStartCondition>
	// 0 for write
	TWI_VoidMaster_Send_Slave_Address_With_Write('A',0);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	81 e4       	ldi	r24, 0x41	; 65
 1e2:	0e 94 af 00 	call	0x15e	; 0x15e <TWI_VoidMaster_Send_Slave_Address_With_Write>
	TWI_VoidMaster_Write_Byte_To_Slave('A');
 1e6:	81 e4       	ldi	r24, 0x41	; 65
 1e8:	0e 94 c7 00 	call	0x18e	; 0x18e <TWI_VoidMaster_Write_Byte_To_Slave>
	TWI_VoidStopCondition();
 1ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <TWI_VoidStopCondition>
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <main+0x3e>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
