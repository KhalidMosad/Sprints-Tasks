
____ADC_AVR_Sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004940  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  00004940  000049d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008001b6  008001b6  00004b2a  2**0
                  ALLOC
  3 .stab         00003144  00000000  00000000  00004b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ed5  00000000  00000000  00007c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00008cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00008e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000aea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c017  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d018  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000d479  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dd27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 23 20 	call	0x4046	; 0x4046 <main>
      8a:	0c 94 9e 24 	jmp	0x493c	; 0x493c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 ea 21 	jmp	0x43d4	; 0x43d4 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e3 58       	subi	r30, 0x83	; 131
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GIE_voidEnable>:
#define 	GIE		7
#define     SREG        *((volatile uint8_t*)0x5F)


static void GIE_voidEnable(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     cde:	af e5       	ldi	r26, 0x5F	; 95
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ef e5       	ldi	r30, 0x5F	; 95
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 68       	ori	r24, 0x80	; 128
     cea:	8c 93       	st	X, r24
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <GIE_voidDisable>:

static void GIE_voidDisable(void)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GIE);
     cfa:	af e5       	ldi	r26, 0x5F	; 95
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ef e5       	ldi	r30, 0x5F	; 95
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	8c 93       	st	X, r24
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <adc_Init>:
#define NULL '\0'
void (*SETCALLBACK)(void) = NULL;


errorstatus adc_Init(ST_ADC__config_t * config )
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <adc_Init+0x6>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	89 83       	std	Y+1, r24	; 0x01

	if(config->ADC_VrefS==AREF_PIN_SETEXTERNALLY)
     d1e:	e9 81       	ldd	r30, Y+1	; 0x01
     d20:	fa 81       	ldd	r31, Y+2	; 0x02
     d22:	81 81       	ldd	r24, Z+1	; 0x01
     d24:	88 23       	and	r24, r24
     d26:	79 f4       	brne	.+30     	; 0xd46 <adc_Init+0x38>
	{
		CLR_BIT(ADMUX,REFS1);
     d28:	a7 e2       	ldi	r26, 0x27	; 39
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e7 e2       	ldi	r30, 0x27	; 39
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 77       	andi	r24, 0x7F	; 127
     d34:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS0);		
     d36:	a7 e2       	ldi	r26, 0x27	; 39
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e2       	ldi	r30, 0x27	; 39
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 7b       	andi	r24, 0xBF	; 191
     d42:	8c 93       	st	X, r24
     d44:	3f c0       	rjmp	.+126    	; 0xdc4 <adc_Init+0xb6>
	}
	else if(config->ADC_VrefS==ACCC_PIN_SAMEVCC)
     d46:	e9 81       	ldd	r30, Y+1	; 0x01
     d48:	fa 81       	ldd	r31, Y+2	; 0x02
     d4a:	81 81       	ldd	r24, Z+1	; 0x01
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	79 f4       	brne	.+30     	; 0xd6e <adc_Init+0x60>
	{
		CLR_BIT(ADMUX,REFS1);		
     d50:	a7 e2       	ldi	r26, 0x27	; 39
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e7 e2       	ldi	r30, 0x27	; 39
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8f 77       	andi	r24, 0x7F	; 127
     d5c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);		
     d5e:	a7 e2       	ldi	r26, 0x27	; 39
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e7 e2       	ldi	r30, 0x27	; 39
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 64       	ori	r24, 0x40	; 64
     d6a:	8c 93       	st	X, r24
     d6c:	2b c0       	rjmp	.+86     	; 0xdc4 <adc_Init+0xb6>
	}
	else if(config->ADC_VrefS== RESERVED)
     d6e:	e9 81       	ldd	r30, Y+1	; 0x01
     d70:	fa 81       	ldd	r31, Y+2	; 0x02
     d72:	81 81       	ldd	r24, Z+1	; 0x01
     d74:	82 30       	cpi	r24, 0x02	; 2
     d76:	79 f4       	brne	.+30     	; 0xd96 <adc_Init+0x88>
	{
		SET_BIT(ADMUX,REFS1);
     d78:	a7 e2       	ldi	r26, 0x27	; 39
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e7 e2       	ldi	r30, 0x27	; 39
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	80 68       	ori	r24, 0x80	; 128
     d84:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS0);		
     d86:	a7 e2       	ldi	r26, 0x27	; 39
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e7 e2       	ldi	r30, 0x27	; 39
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8f 7b       	andi	r24, 0xBF	; 191
     d92:	8c 93       	st	X, r24
     d94:	17 c0       	rjmp	.+46     	; 0xdc4 <adc_Init+0xb6>
	}
	else if(config->ADC_VrefS==INTERNAL_2_56)
     d96:	e9 81       	ldd	r30, Y+1	; 0x01
     d98:	fa 81       	ldd	r31, Y+2	; 0x02
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	79 f4       	brne	.+30     	; 0xdbe <adc_Init+0xb0>
	{
		SET_BIT(ADMUX,REFS1);
     da0:	a7 e2       	ldi	r26, 0x27	; 39
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e7 e2       	ldi	r30, 0x27	; 39
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);		
     dae:	a7 e2       	ldi	r26, 0x27	; 39
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e7 e2       	ldi	r30, 0x27	; 39
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	80 64       	ori	r24, 0x40	; 64
     dba:	8c 93       	st	X, r24
     dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <adc_Init+0xb6>
	}
	else
	{
		return VREF_SEL_ERROR;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	8b 83       	std	Y+3, r24	; 0x03
     dc2:	ce c5       	rjmp	.+2972   	; 0x1960 <adc_Init+0xc52>
	}
	if(config->ADC_DataAlign==ADJUST_RIGHT)
     dc4:	e9 81       	ldd	r30, Y+1	; 0x01
     dc6:	fa 81       	ldd	r31, Y+2	; 0x02
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	41 f4       	brne	.+16     	; 0xdde <adc_Init+0xd0>
	{
		CLR_BIT(ADMUX,ADLAR);
     dce:	a7 e2       	ldi	r26, 0x27	; 39
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e7 e2       	ldi	r30, 0x27	; 39
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8f 7d       	andi	r24, 0xDF	; 223
     dda:	8c 93       	st	X, r24
     ddc:	10 c0       	rjmp	.+32     	; 0xdfe <adc_Init+0xf0>
	}
	else if(config->ADC_DataAlign==ADJUST_LEFT)
     dde:	e9 81       	ldd	r30, Y+1	; 0x01
     de0:	fa 81       	ldd	r31, Y+2	; 0x02
     de2:	82 81       	ldd	r24, Z+2	; 0x02
     de4:	88 23       	and	r24, r24
     de6:	41 f4       	brne	.+16     	; 0xdf8 <adc_Init+0xea>
	{
		SET_BIT(ADMUX,ADLAR);			
     de8:	a7 e2       	ldi	r26, 0x27	; 39
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e2       	ldi	r30, 0x27	; 39
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	80 62       	ori	r24, 0x20	; 32
     df4:	8c 93       	st	X, r24
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <adc_Init+0xf0>
	}	
	else
	{
		return DATA_ALIGN_EEROR;
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	8b 83       	std	Y+3, r24	; 0x03
     dfc:	b1 c5       	rjmp	.+2914   	; 0x1960 <adc_Init+0xc52>
	}
	if(config->ADC_Mode == DISABLE)
     dfe:	e9 81       	ldd	r30, Y+1	; 0x01
     e00:	fa 81       	ldd	r31, Y+2	; 0x02
     e02:	80 81       	ld	r24, Z
     e04:	88 23       	and	r24, r24
     e06:	41 f4       	brne	.+16     	; 0xe18 <adc_Init+0x10a>
	{
		CLR_BIT(ADCSRA,ADIE);		
     e08:	a6 e2       	ldi	r26, 0x26	; 38
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e6 e2       	ldi	r30, 0x26	; 38
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	87 7f       	andi	r24, 0xF7	; 247
     e14:	8c 93       	st	X, r24
     e16:	12 c0       	rjmp	.+36     	; 0xe3c <adc_Init+0x12e>
	}
	else if(config->ADC_Mode == ENABLE)
     e18:	e9 81       	ldd	r30, Y+1	; 0x01
     e1a:	fa 81       	ldd	r31, Y+2	; 0x02
     e1c:	80 81       	ld	r24, Z
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	51 f4       	brne	.+20     	; 0xe36 <adc_Init+0x128>
	{
		GIE_voidEnable();	
     e22:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GIE_voidEnable>
		SET_BIT(ADCSRA,ADIE);		
     e26:	a6 e2       	ldi	r26, 0x26	; 38
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e6 e2       	ldi	r30, 0x26	; 38
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 60       	ori	r24, 0x08	; 8
     e32:	8c 93       	st	X, r24
     e34:	03 c0       	rjmp	.+6      	; 0xe3c <adc_Init+0x12e>
	}
	else
	{
		return ADC_MODE_ERROR;
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	92 c5       	rjmp	.+2852   	; 0x1960 <adc_Init+0xc52>
	}
	
	if(config->ADC_NbrOfChannel == ADC_C0)
     e3c:	e9 81       	ldd	r30, Y+1	; 0x01
     e3e:	fa 81       	ldd	r31, Y+2	; 0x02
     e40:	83 81       	ldd	r24, Z+3	; 0x03
     e42:	88 23       	and	r24, r24
     e44:	21 f5       	brne	.+72     	; 0xe8e <adc_Init+0x180>
	{
		CLR_BIT(ADMUX,MUX0);
     e46:	a7 e2       	ldi	r26, 0x27	; 39
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e7 e2       	ldi	r30, 0x27	; 39
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8e 7f       	andi	r24, 0xFE	; 254
     e52:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
     e54:	a7 e2       	ldi	r26, 0x27	; 39
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e7 e2       	ldi	r30, 0x27	; 39
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8d 7f       	andi	r24, 0xFD	; 253
     e60:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
     e62:	a7 e2       	ldi	r26, 0x27	; 39
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e2       	ldi	r30, 0x27	; 39
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8b 7f       	andi	r24, 0xFB	; 251
     e6e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
     e70:	a7 e2       	ldi	r26, 0x27	; 39
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e7 e2       	ldi	r30, 0x27	; 39
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	87 7f       	andi	r24, 0xF7	; 247
     e7c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
     e7e:	a7 e2       	ldi	r26, 0x27	; 39
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e7 e2       	ldi	r30, 0x27	; 39
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8f 7e       	andi	r24, 0xEF	; 239
     e8a:	8c 93       	st	X, r24
     e8c:	a8 c4       	rjmp	.+2384   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel == ADC_C1)
     e8e:	e9 81       	ldd	r30, Y+1	; 0x01
     e90:	fa 81       	ldd	r31, Y+2	; 0x02
     e92:	83 81       	ldd	r24, Z+3	; 0x03
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	21 f5       	brne	.+72     	; 0xee0 <adc_Init+0x1d2>
	{
		SET_BIT(ADMUX,MUX0);
     e98:	a7 e2       	ldi	r26, 0x27	; 39
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e7 e2       	ldi	r30, 0x27	; 39
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	81 60       	ori	r24, 0x01	; 1
     ea4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);	
     ea6:	a7 e2       	ldi	r26, 0x27	; 39
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e7 e2       	ldi	r30, 0x27	; 39
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8d 7f       	andi	r24, 0xFD	; 253
     eb2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
     eb4:	a7 e2       	ldi	r26, 0x27	; 39
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e7 e2       	ldi	r30, 0x27	; 39
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8b 7f       	andi	r24, 0xFB	; 251
     ec0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
     ec2:	a7 e2       	ldi	r26, 0x27	; 39
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e7 e2       	ldi	r30, 0x27	; 39
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
     ed0:	a7 e2       	ldi	r26, 0x27	; 39
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e7 e2       	ldi	r30, 0x27	; 39
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 7e       	andi	r24, 0xEF	; 239
     edc:	8c 93       	st	X, r24
     ede:	7f c4       	rjmp	.+2302   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel == ADC_C2)
     ee0:	e9 81       	ldd	r30, Y+1	; 0x01
     ee2:	fa 81       	ldd	r31, Y+2	; 0x02
     ee4:	83 81       	ldd	r24, Z+3	; 0x03
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	21 f5       	brne	.+72     	; 0xf32 <adc_Init+0x224>
	{
		CLR_BIT(ADMUX,MUX0);
     eea:	a7 e2       	ldi	r26, 0x27	; 39
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e2       	ldi	r30, 0x27	; 39
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8e 7f       	andi	r24, 0xFE	; 254
     ef6:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
     ef8:	a7 e2       	ldi	r26, 0x27	; 39
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e7 e2       	ldi	r30, 0x27	; 39
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	82 60       	ori	r24, 0x02	; 2
     f04:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
     f06:	a7 e2       	ldi	r26, 0x27	; 39
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e7 e2       	ldi	r30, 0x27	; 39
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8b 7f       	andi	r24, 0xFB	; 251
     f12:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
     f14:	a7 e2       	ldi	r26, 0x27	; 39
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e7 e2       	ldi	r30, 0x27	; 39
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	87 7f       	andi	r24, 0xF7	; 247
     f20:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
     f22:	a7 e2       	ldi	r26, 0x27	; 39
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e7 e2       	ldi	r30, 0x27	; 39
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 7e       	andi	r24, 0xEF	; 239
     f2e:	8c 93       	st	X, r24
     f30:	56 c4       	rjmp	.+2220   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel == ADC_C3)
     f32:	e9 81       	ldd	r30, Y+1	; 0x01
     f34:	fa 81       	ldd	r31, Y+2	; 0x02
     f36:	83 81       	ldd	r24, Z+3	; 0x03
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	21 f5       	brne	.+72     	; 0xf84 <adc_Init+0x276>
	{
		SET_BIT(ADMUX,MUX0);
     f3c:	a7 e2       	ldi	r26, 0x27	; 39
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e7 e2       	ldi	r30, 0x27	; 39
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	81 60       	ori	r24, 0x01	; 1
     f48:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
     f4a:	a7 e2       	ldi	r26, 0x27	; 39
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e7 e2       	ldi	r30, 0x27	; 39
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	82 60       	ori	r24, 0x02	; 2
     f56:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
     f58:	a7 e2       	ldi	r26, 0x27	; 39
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e7 e2       	ldi	r30, 0x27	; 39
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8b 7f       	andi	r24, 0xFB	; 251
     f64:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
     f66:	a7 e2       	ldi	r26, 0x27	; 39
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e7 e2       	ldi	r30, 0x27	; 39
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	87 7f       	andi	r24, 0xF7	; 247
     f72:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
     f74:	a7 e2       	ldi	r26, 0x27	; 39
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e7 e2       	ldi	r30, 0x27	; 39
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7e       	andi	r24, 0xEF	; 239
     f80:	8c 93       	st	X, r24
     f82:	2d c4       	rjmp	.+2138   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel== ADC_C4)
     f84:	e9 81       	ldd	r30, Y+1	; 0x01
     f86:	fa 81       	ldd	r31, Y+2	; 0x02
     f88:	83 81       	ldd	r24, Z+3	; 0x03
     f8a:	84 30       	cpi	r24, 0x04	; 4
     f8c:	21 f5       	brne	.+72     	; 0xfd6 <adc_Init+0x2c8>
	{
		CLR_BIT(ADMUX,MUX0);
     f8e:	a7 e2       	ldi	r26, 0x27	; 39
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e7 e2       	ldi	r30, 0x27	; 39
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8e 7f       	andi	r24, 0xFE	; 254
     f9a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);	
     f9c:	a7 e2       	ldi	r26, 0x27	; 39
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e7 e2       	ldi	r30, 0x27	; 39
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8d 7f       	andi	r24, 0xFD	; 253
     fa8:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
     faa:	a7 e2       	ldi	r26, 0x27	; 39
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e7 e2       	ldi	r30, 0x27	; 39
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	84 60       	ori	r24, 0x04	; 4
     fb6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
     fb8:	a7 e2       	ldi	r26, 0x27	; 39
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e7 e2       	ldi	r30, 0x27	; 39
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	87 7f       	andi	r24, 0xF7	; 247
     fc4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
     fc6:	a7 e2       	ldi	r26, 0x27	; 39
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e7 e2       	ldi	r30, 0x27	; 39
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 7e       	andi	r24, 0xEF	; 239
     fd2:	8c 93       	st	X, r24
     fd4:	04 c4       	rjmp	.+2056   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel == ADC_C5)
     fd6:	e9 81       	ldd	r30, Y+1	; 0x01
     fd8:	fa 81       	ldd	r31, Y+2	; 0x02
     fda:	83 81       	ldd	r24, Z+3	; 0x03
     fdc:	85 30       	cpi	r24, 0x05	; 5
     fde:	21 f5       	brne	.+72     	; 0x1028 <adc_Init+0x31a>
	{
		SET_BIT(ADMUX,MUX0);
     fe0:	a7 e2       	ldi	r26, 0x27	; 39
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e7 e2       	ldi	r30, 0x27	; 39
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	81 60       	ori	r24, 0x01	; 1
     fec:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
     fee:	a7 e2       	ldi	r26, 0x27	; 39
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e7 e2       	ldi	r30, 0x27	; 39
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8d 7f       	andi	r24, 0xFD	; 253
     ffa:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
     ffc:	a7 e2       	ldi	r26, 0x27	; 39
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e7 e2       	ldi	r30, 0x27	; 39
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    100a:	a7 e2       	ldi	r26, 0x27	; 39
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e7 e2       	ldi	r30, 0x27	; 39
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	87 7f       	andi	r24, 0xF7	; 247
    1016:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
    1018:	a7 e2       	ldi	r26, 0x27	; 39
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e7 e2       	ldi	r30, 0x27	; 39
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8f 7e       	andi	r24, 0xEF	; 239
    1024:	8c 93       	st	X, r24
    1026:	db c3       	rjmp	.+1974   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel == ADC_C6)
    1028:	e9 81       	ldd	r30, Y+1	; 0x01
    102a:	fa 81       	ldd	r31, Y+2	; 0x02
    102c:	83 81       	ldd	r24, Z+3	; 0x03
    102e:	86 30       	cpi	r24, 0x06	; 6
    1030:	21 f5       	brne	.+72     	; 0x107a <adc_Init+0x36c>
	{
		CLR_BIT(ADMUX,MUX0);
    1032:	a7 e2       	ldi	r26, 0x27	; 39
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e7 e2       	ldi	r30, 0x27	; 39
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8e 7f       	andi	r24, 0xFE	; 254
    103e:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);	
    1040:	a7 e2       	ldi	r26, 0x27	; 39
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e7 e2       	ldi	r30, 0x27	; 39
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	82 60       	ori	r24, 0x02	; 2
    104c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    104e:	a7 e2       	ldi	r26, 0x27	; 39
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e7 e2       	ldi	r30, 0x27	; 39
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	84 60       	ori	r24, 0x04	; 4
    105a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    105c:	a7 e2       	ldi	r26, 0x27	; 39
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e7 e2       	ldi	r30, 0x27	; 39
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	87 7f       	andi	r24, 0xF7	; 247
    1068:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
    106a:	a7 e2       	ldi	r26, 0x27	; 39
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e7 e2       	ldi	r30, 0x27	; 39
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8f 7e       	andi	r24, 0xEF	; 239
    1076:	8c 93       	st	X, r24
    1078:	b2 c3       	rjmp	.+1892   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel == ADC_C7)
    107a:	e9 81       	ldd	r30, Y+1	; 0x01
    107c:	fa 81       	ldd	r31, Y+2	; 0x02
    107e:	83 81       	ldd	r24, Z+3	; 0x03
    1080:	87 30       	cpi	r24, 0x07	; 7
    1082:	21 f5       	brne	.+72     	; 0x10cc <adc_Init+0x3be>
	{
		SET_BIT(ADMUX,MUX0);
    1084:	a7 e2       	ldi	r26, 0x27	; 39
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e7 e2       	ldi	r30, 0x27	; 39
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    1092:	a7 e2       	ldi	r26, 0x27	; 39
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e7 e2       	ldi	r30, 0x27	; 39
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	82 60       	ori	r24, 0x02	; 2
    109e:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    10a0:	a7 e2       	ldi	r26, 0x27	; 39
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e7 e2       	ldi	r30, 0x27	; 39
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	84 60       	ori	r24, 0x04	; 4
    10ac:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    10ae:	a7 e2       	ldi	r26, 0x27	; 39
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e7 e2       	ldi	r30, 0x27	; 39
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	87 7f       	andi	r24, 0xF7	; 247
    10ba:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
    10bc:	a7 e2       	ldi	r26, 0x27	; 39
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e2       	ldi	r30, 0x27	; 39
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 7e       	andi	r24, 0xEF	; 239
    10c8:	8c 93       	st	X, r24
    10ca:	89 c3       	rjmp	.+1810   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC0_ADC0_10X )
    10cc:	e9 81       	ldd	r30, Y+1	; 0x01
    10ce:	fa 81       	ldd	r31, Y+2	; 0x02
    10d0:	83 81       	ldd	r24, Z+3	; 0x03
    10d2:	88 30       	cpi	r24, 0x08	; 8
    10d4:	21 f5       	brne	.+72     	; 0x111e <adc_Init+0x410>
	{
		CLR_BIT(ADMUX,MUX0);
    10d6:	a7 e2       	ldi	r26, 0x27	; 39
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e7 e2       	ldi	r30, 0x27	; 39
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8e 7f       	andi	r24, 0xFE	; 254
    10e2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    10e4:	a7 e2       	ldi	r26, 0x27	; 39
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e2       	ldi	r30, 0x27	; 39
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8d 7f       	andi	r24, 0xFD	; 253
    10f0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    10f2:	a7 e2       	ldi	r26, 0x27	; 39
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e7 e2       	ldi	r30, 0x27	; 39
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8b 7f       	andi	r24, 0xFB	; 251
    10fe:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    1100:	a7 e2       	ldi	r26, 0x27	; 39
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e7 e2       	ldi	r30, 0x27	; 39
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 60       	ori	r24, 0x08	; 8
    110c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
    110e:	a7 e2       	ldi	r26, 0x27	; 39
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e7 e2       	ldi	r30, 0x27	; 39
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 7e       	andi	r24, 0xEF	; 239
    111a:	8c 93       	st	X, r24
    111c:	60 c3       	rjmp	.+1728   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC1_ADC0_10X )
    111e:	e9 81       	ldd	r30, Y+1	; 0x01
    1120:	fa 81       	ldd	r31, Y+2	; 0x02
    1122:	83 81       	ldd	r24, Z+3	; 0x03
    1124:	89 30       	cpi	r24, 0x09	; 9
    1126:	21 f5       	brne	.+72     	; 0x1170 <adc_Init+0x462>
	{
		SET_BIT(ADMUX,MUX0);
    1128:	a7 e2       	ldi	r26, 0x27	; 39
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e7 e2       	ldi	r30, 0x27	; 39
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	81 60       	ori	r24, 0x01	; 1
    1134:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    1136:	a7 e2       	ldi	r26, 0x27	; 39
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e7 e2       	ldi	r30, 0x27	; 39
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8d 7f       	andi	r24, 0xFD	; 253
    1142:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    1144:	a7 e2       	ldi	r26, 0x27	; 39
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e7 e2       	ldi	r30, 0x27	; 39
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8b 7f       	andi	r24, 0xFB	; 251
    1150:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    1152:	a7 e2       	ldi	r26, 0x27	; 39
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e7 e2       	ldi	r30, 0x27	; 39
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	88 60       	ori	r24, 0x08	; 8
    115e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
    1160:	a7 e2       	ldi	r26, 0x27	; 39
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e7 e2       	ldi	r30, 0x27	; 39
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8f 7e       	andi	r24, 0xEF	; 239
    116c:	8c 93       	st	X, r24
    116e:	37 c3       	rjmp	.+1646   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC0_ADC0_200X)
    1170:	e9 81       	ldd	r30, Y+1	; 0x01
    1172:	fa 81       	ldd	r31, Y+2	; 0x02
    1174:	83 81       	ldd	r24, Z+3	; 0x03
    1176:	8a 30       	cpi	r24, 0x0A	; 10
    1178:	21 f5       	brne	.+72     	; 0x11c2 <adc_Init+0x4b4>
	{
		CLR_BIT(ADMUX,MUX0);
    117a:	a7 e2       	ldi	r26, 0x27	; 39
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e7 e2       	ldi	r30, 0x27	; 39
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8e 7f       	andi	r24, 0xFE	; 254
    1186:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    1188:	a7 e2       	ldi	r26, 0x27	; 39
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e7 e2       	ldi	r30, 0x27	; 39
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	82 60       	ori	r24, 0x02	; 2
    1194:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    1196:	a7 e2       	ldi	r26, 0x27	; 39
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e7 e2       	ldi	r30, 0x27	; 39
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8b 7f       	andi	r24, 0xFB	; 251
    11a2:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    11a4:	a7 e2       	ldi	r26, 0x27	; 39
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e7 e2       	ldi	r30, 0x27	; 39
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	88 60       	ori	r24, 0x08	; 8
    11b0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
    11b2:	a7 e2       	ldi	r26, 0x27	; 39
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e7 e2       	ldi	r30, 0x27	; 39
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8f 7e       	andi	r24, 0xEF	; 239
    11be:	8c 93       	st	X, r24
    11c0:	0e c3       	rjmp	.+1564   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC1_ADC0_200X)
    11c2:	e9 81       	ldd	r30, Y+1	; 0x01
    11c4:	fa 81       	ldd	r31, Y+2	; 0x02
    11c6:	83 81       	ldd	r24, Z+3	; 0x03
    11c8:	8b 30       	cpi	r24, 0x0B	; 11
    11ca:	21 f5       	brne	.+72     	; 0x1214 <adc_Init+0x506>
	{
		SET_BIT(ADMUX,MUX0);
    11cc:	a7 e2       	ldi	r26, 0x27	; 39
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e7 e2       	ldi	r30, 0x27	; 39
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	81 60       	ori	r24, 0x01	; 1
    11d8:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    11da:	a7 e2       	ldi	r26, 0x27	; 39
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e7 e2       	ldi	r30, 0x27	; 39
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	82 60       	ori	r24, 0x02	; 2
    11e6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    11e8:	a7 e2       	ldi	r26, 0x27	; 39
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e7 e2       	ldi	r30, 0x27	; 39
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8b 7f       	andi	r24, 0xFB	; 251
    11f4:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    11f6:	a7 e2       	ldi	r26, 0x27	; 39
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e7 e2       	ldi	r30, 0x27	; 39
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	88 60       	ori	r24, 0x08	; 8
    1202:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
    1204:	a7 e2       	ldi	r26, 0x27	; 39
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e7 e2       	ldi	r30, 0x27	; 39
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8f 7e       	andi	r24, 0xEF	; 239
    1210:	8c 93       	st	X, r24
    1212:	e5 c2       	rjmp	.+1482   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC2_ADC2_10X )
    1214:	e9 81       	ldd	r30, Y+1	; 0x01
    1216:	fa 81       	ldd	r31, Y+2	; 0x02
    1218:	83 81       	ldd	r24, Z+3	; 0x03
    121a:	8c 30       	cpi	r24, 0x0C	; 12
    121c:	21 f5       	brne	.+72     	; 0x1266 <adc_Init+0x558>
	{
		CLR_BIT(ADMUX,MUX0);
    121e:	a7 e2       	ldi	r26, 0x27	; 39
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e7 e2       	ldi	r30, 0x27	; 39
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8e 7f       	andi	r24, 0xFE	; 254
    122a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    122c:	a7 e2       	ldi	r26, 0x27	; 39
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e7 e2       	ldi	r30, 0x27	; 39
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8d 7f       	andi	r24, 0xFD	; 253
    1238:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    123a:	a7 e2       	ldi	r26, 0x27	; 39
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e7 e2       	ldi	r30, 0x27	; 39
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	84 60       	ori	r24, 0x04	; 4
    1246:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    1248:	a7 e2       	ldi	r26, 0x27	; 39
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e7 e2       	ldi	r30, 0x27	; 39
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	88 60       	ori	r24, 0x08	; 8
    1254:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
    1256:	a7 e2       	ldi	r26, 0x27	; 39
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e7 e2       	ldi	r30, 0x27	; 39
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8f 7e       	andi	r24, 0xEF	; 239
    1262:	8c 93       	st	X, r24
    1264:	bc c2       	rjmp	.+1400   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC3_ADC2_10X)
    1266:	e9 81       	ldd	r30, Y+1	; 0x01
    1268:	fa 81       	ldd	r31, Y+2	; 0x02
    126a:	83 81       	ldd	r24, Z+3	; 0x03
    126c:	8d 30       	cpi	r24, 0x0D	; 13
    126e:	21 f5       	brne	.+72     	; 0x12b8 <adc_Init+0x5aa>
	{
		SET_BIT(ADMUX,MUX0);
    1270:	a7 e2       	ldi	r26, 0x27	; 39
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e7 e2       	ldi	r30, 0x27	; 39
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	81 60       	ori	r24, 0x01	; 1
    127c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    127e:	a7 e2       	ldi	r26, 0x27	; 39
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e7 e2       	ldi	r30, 0x27	; 39
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8d 7f       	andi	r24, 0xFD	; 253
    128a:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    128c:	a7 e2       	ldi	r26, 0x27	; 39
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e7 e2       	ldi	r30, 0x27	; 39
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	84 60       	ori	r24, 0x04	; 4
    1298:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    129a:	a7 e2       	ldi	r26, 0x27	; 39
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e7 e2       	ldi	r30, 0x27	; 39
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	88 60       	ori	r24, 0x08	; 8
    12a6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
    12a8:	a7 e2       	ldi	r26, 0x27	; 39
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e7 e2       	ldi	r30, 0x27	; 39
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 7e       	andi	r24, 0xEF	; 239
    12b4:	8c 93       	st	X, r24
    12b6:	93 c2       	rjmp	.+1318   	; 0x17de <adc_Init+0xad0>
	} 
	else if(config->ADC_NbrOfChannel==ADC2_ADC2_200X)
    12b8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ba:	fa 81       	ldd	r31, Y+2	; 0x02
    12bc:	83 81       	ldd	r24, Z+3	; 0x03
    12be:	8e 30       	cpi	r24, 0x0E	; 14
    12c0:	21 f5       	brne	.+72     	; 0x130a <adc_Init+0x5fc>
	{
		CLR_BIT(ADMUX,MUX0);
    12c2:	a7 e2       	ldi	r26, 0x27	; 39
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e7 e2       	ldi	r30, 0x27	; 39
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8e 7f       	andi	r24, 0xFE	; 254
    12ce:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    12d0:	a7 e2       	ldi	r26, 0x27	; 39
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e7 e2       	ldi	r30, 0x27	; 39
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	82 60       	ori	r24, 0x02	; 2
    12dc:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    12de:	a7 e2       	ldi	r26, 0x27	; 39
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e7 e2       	ldi	r30, 0x27	; 39
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	84 60       	ori	r24, 0x04	; 4
    12ea:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    12ec:	a7 e2       	ldi	r26, 0x27	; 39
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e7 e2       	ldi	r30, 0x27	; 39
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	88 60       	ori	r24, 0x08	; 8
    12f8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);		
    12fa:	a7 e2       	ldi	r26, 0x27	; 39
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e7 e2       	ldi	r30, 0x27	; 39
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7e       	andi	r24, 0xEF	; 239
    1306:	8c 93       	st	X, r24
    1308:	6a c2       	rjmp	.+1236   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC3_ADC2_200X)
    130a:	e9 81       	ldd	r30, Y+1	; 0x01
    130c:	fa 81       	ldd	r31, Y+2	; 0x02
    130e:	83 81       	ldd	r24, Z+3	; 0x03
    1310:	8f 30       	cpi	r24, 0x0F	; 15
    1312:	21 f5       	brne	.+72     	; 0x135c <adc_Init+0x64e>
	{
		SET_BIT(ADMUX,MUX0);
    1314:	a7 e2       	ldi	r26, 0x27	; 39
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e7 e2       	ldi	r30, 0x27	; 39
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	81 60       	ori	r24, 0x01	; 1
    1320:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    1322:	a7 e2       	ldi	r26, 0x27	; 39
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e7 e2       	ldi	r30, 0x27	; 39
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	82 60       	ori	r24, 0x02	; 2
    132e:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    1330:	a7 e2       	ldi	r26, 0x27	; 39
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e7 e2       	ldi	r30, 0x27	; 39
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	84 60       	ori	r24, 0x04	; 4
    133c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    133e:	a7 e2       	ldi	r26, 0x27	; 39
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e7 e2       	ldi	r30, 0x27	; 39
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	88 60       	ori	r24, 0x08	; 8
    134a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);	
    134c:	a7 e2       	ldi	r26, 0x27	; 39
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e7 e2       	ldi	r30, 0x27	; 39
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8f 7e       	andi	r24, 0xEF	; 239
    1358:	8c 93       	st	X, r24
    135a:	41 c2       	rjmp	.+1154   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC0_ADC1_1x )
    135c:	e9 81       	ldd	r30, Y+1	; 0x01
    135e:	fa 81       	ldd	r31, Y+2	; 0x02
    1360:	83 81       	ldd	r24, Z+3	; 0x03
    1362:	80 31       	cpi	r24, 0x10	; 16
    1364:	21 f5       	brne	.+72     	; 0x13ae <adc_Init+0x6a0>
	{
		CLR_BIT(ADMUX,MUX0);
    1366:	a7 e2       	ldi	r26, 0x27	; 39
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e7 e2       	ldi	r30, 0x27	; 39
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8e 7f       	andi	r24, 0xFE	; 254
    1372:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    1374:	a7 e2       	ldi	r26, 0x27	; 39
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e7 e2       	ldi	r30, 0x27	; 39
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	8d 7f       	andi	r24, 0xFD	; 253
    1380:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    1382:	a7 e2       	ldi	r26, 0x27	; 39
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e7 e2       	ldi	r30, 0x27	; 39
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	8b 7f       	andi	r24, 0xFB	; 251
    138e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    1390:	a7 e2       	ldi	r26, 0x27	; 39
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e7 e2       	ldi	r30, 0x27	; 39
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	87 7f       	andi	r24, 0xF7	; 247
    139c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    139e:	a7 e2       	ldi	r26, 0x27	; 39
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e7 e2       	ldi	r30, 0x27	; 39
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	80 61       	ori	r24, 0x10	; 16
    13aa:	8c 93       	st	X, r24
    13ac:	18 c2       	rjmp	.+1072   	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC1_ADC1_1x )
    13ae:	e9 81       	ldd	r30, Y+1	; 0x01
    13b0:	fa 81       	ldd	r31, Y+2	; 0x02
    13b2:	83 81       	ldd	r24, Z+3	; 0x03
    13b4:	81 31       	cpi	r24, 0x11	; 17
    13b6:	21 f5       	brne	.+72     	; 0x1400 <adc_Init+0x6f2>
	{
		SET_BIT(ADMUX,MUX0);
    13b8:	a7 e2       	ldi	r26, 0x27	; 39
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e7 e2       	ldi	r30, 0x27	; 39
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	81 60       	ori	r24, 0x01	; 1
    13c4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    13c6:	a7 e2       	ldi	r26, 0x27	; 39
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e7 e2       	ldi	r30, 0x27	; 39
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8d 7f       	andi	r24, 0xFD	; 253
    13d2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    13d4:	a7 e2       	ldi	r26, 0x27	; 39
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e7 e2       	ldi	r30, 0x27	; 39
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8b 7f       	andi	r24, 0xFB	; 251
    13e0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    13e2:	a7 e2       	ldi	r26, 0x27	; 39
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e7 e2       	ldi	r30, 0x27	; 39
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	87 7f       	andi	r24, 0xF7	; 247
    13ee:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    13f0:	a7 e2       	ldi	r26, 0x27	; 39
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e7 e2       	ldi	r30, 0x27	; 39
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 61       	ori	r24, 0x10	; 16
    13fc:	8c 93       	st	X, r24
    13fe:	ef c1       	rjmp	.+990    	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC2_ADC1_1x )
    1400:	e9 81       	ldd	r30, Y+1	; 0x01
    1402:	fa 81       	ldd	r31, Y+2	; 0x02
    1404:	83 81       	ldd	r24, Z+3	; 0x03
    1406:	82 31       	cpi	r24, 0x12	; 18
    1408:	21 f5       	brne	.+72     	; 0x1452 <adc_Init+0x744>
	{
		CLR_BIT(ADMUX,MUX0);
    140a:	a7 e2       	ldi	r26, 0x27	; 39
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e7 e2       	ldi	r30, 0x27	; 39
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8e 7f       	andi	r24, 0xFE	; 254
    1416:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    1418:	a7 e2       	ldi	r26, 0x27	; 39
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e7 e2       	ldi	r30, 0x27	; 39
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	82 60       	ori	r24, 0x02	; 2
    1424:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    1426:	a7 e2       	ldi	r26, 0x27	; 39
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e7 e2       	ldi	r30, 0x27	; 39
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	8b 7f       	andi	r24, 0xFB	; 251
    1432:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    1434:	a7 e2       	ldi	r26, 0x27	; 39
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e7 e2       	ldi	r30, 0x27	; 39
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	87 7f       	andi	r24, 0xF7	; 247
    1440:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    1442:	a7 e2       	ldi	r26, 0x27	; 39
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e2       	ldi	r30, 0x27	; 39
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	80 61       	ori	r24, 0x10	; 16
    144e:	8c 93       	st	X, r24
    1450:	c6 c1       	rjmp	.+908    	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC3_ADC1_1x )
    1452:	e9 81       	ldd	r30, Y+1	; 0x01
    1454:	fa 81       	ldd	r31, Y+2	; 0x02
    1456:	83 81       	ldd	r24, Z+3	; 0x03
    1458:	83 31       	cpi	r24, 0x13	; 19
    145a:	21 f5       	brne	.+72     	; 0x14a4 <adc_Init+0x796>
	{
		SET_BIT(ADMUX,MUX0);
    145c:	a7 e2       	ldi	r26, 0x27	; 39
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e7 e2       	ldi	r30, 0x27	; 39
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	81 60       	ori	r24, 0x01	; 1
    1468:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    146a:	a7 e2       	ldi	r26, 0x27	; 39
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e7 e2       	ldi	r30, 0x27	; 39
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	82 60       	ori	r24, 0x02	; 2
    1476:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    1478:	a7 e2       	ldi	r26, 0x27	; 39
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e7 e2       	ldi	r30, 0x27	; 39
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	8b 7f       	andi	r24, 0xFB	; 251
    1484:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    1486:	a7 e2       	ldi	r26, 0x27	; 39
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e7 e2       	ldi	r30, 0x27	; 39
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	87 7f       	andi	r24, 0xF7	; 247
    1492:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    1494:	a7 e2       	ldi	r26, 0x27	; 39
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e7 e2       	ldi	r30, 0x27	; 39
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 61       	ori	r24, 0x10	; 16
    14a0:	8c 93       	st	X, r24
    14a2:	9d c1       	rjmp	.+826    	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC4_ADC1_1x )
    14a4:	e9 81       	ldd	r30, Y+1	; 0x01
    14a6:	fa 81       	ldd	r31, Y+2	; 0x02
    14a8:	83 81       	ldd	r24, Z+3	; 0x03
    14aa:	84 31       	cpi	r24, 0x14	; 20
    14ac:	21 f5       	brne	.+72     	; 0x14f6 <adc_Init+0x7e8>
	{
		CLR_BIT(ADMUX,MUX0);
    14ae:	a7 e2       	ldi	r26, 0x27	; 39
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e7 e2       	ldi	r30, 0x27	; 39
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	8e 7f       	andi	r24, 0xFE	; 254
    14ba:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    14bc:	a7 e2       	ldi	r26, 0x27	; 39
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e7 e2       	ldi	r30, 0x27	; 39
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8d 7f       	andi	r24, 0xFD	; 253
    14c8:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    14ca:	a7 e2       	ldi	r26, 0x27	; 39
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e7 e2       	ldi	r30, 0x27	; 39
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	84 60       	ori	r24, 0x04	; 4
    14d6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    14d8:	a7 e2       	ldi	r26, 0x27	; 39
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e7 e2       	ldi	r30, 0x27	; 39
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	87 7f       	andi	r24, 0xF7	; 247
    14e4:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    14e6:	a7 e2       	ldi	r26, 0x27	; 39
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e7 e2       	ldi	r30, 0x27	; 39
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 61       	ori	r24, 0x10	; 16
    14f2:	8c 93       	st	X, r24
    14f4:	74 c1       	rjmp	.+744    	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC5_ADC1_1x )
    14f6:	e9 81       	ldd	r30, Y+1	; 0x01
    14f8:	fa 81       	ldd	r31, Y+2	; 0x02
    14fa:	83 81       	ldd	r24, Z+3	; 0x03
    14fc:	85 31       	cpi	r24, 0x15	; 21
    14fe:	21 f5       	brne	.+72     	; 0x1548 <adc_Init+0x83a>
	{
		SET_BIT(ADMUX,MUX0);
    1500:	a7 e2       	ldi	r26, 0x27	; 39
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e7 e2       	ldi	r30, 0x27	; 39
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	81 60       	ori	r24, 0x01	; 1
    150c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    150e:	a7 e2       	ldi	r26, 0x27	; 39
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e7 e2       	ldi	r30, 0x27	; 39
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8d 7f       	andi	r24, 0xFD	; 253
    151a:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    151c:	a7 e2       	ldi	r26, 0x27	; 39
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e7 e2       	ldi	r30, 0x27	; 39
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	84 60       	ori	r24, 0x04	; 4
    1528:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    152a:	a7 e2       	ldi	r26, 0x27	; 39
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e7 e2       	ldi	r30, 0x27	; 39
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	87 7f       	andi	r24, 0xF7	; 247
    1536:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    1538:	a7 e2       	ldi	r26, 0x27	; 39
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e7 e2       	ldi	r30, 0x27	; 39
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 61       	ori	r24, 0x10	; 16
    1544:	8c 93       	st	X, r24
    1546:	4b c1       	rjmp	.+662    	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC6_ADC1_1x )
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	83 81       	ldd	r24, Z+3	; 0x03
    154e:	86 31       	cpi	r24, 0x16	; 22
    1550:	21 f5       	brne	.+72     	; 0x159a <adc_Init+0x88c>
	{
		CLR_BIT(ADMUX,MUX0);
    1552:	a7 e2       	ldi	r26, 0x27	; 39
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e7 e2       	ldi	r30, 0x27	; 39
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8e 7f       	andi	r24, 0xFE	; 254
    155e:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    1560:	a7 e2       	ldi	r26, 0x27	; 39
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e7 e2       	ldi	r30, 0x27	; 39
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	82 60       	ori	r24, 0x02	; 2
    156c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    156e:	a7 e2       	ldi	r26, 0x27	; 39
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e7 e2       	ldi	r30, 0x27	; 39
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	84 60       	ori	r24, 0x04	; 4
    157a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    157c:	a7 e2       	ldi	r26, 0x27	; 39
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e7 e2       	ldi	r30, 0x27	; 39
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	87 7f       	andi	r24, 0xF7	; 247
    1588:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    158a:	a7 e2       	ldi	r26, 0x27	; 39
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e7 e2       	ldi	r30, 0x27	; 39
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 61       	ori	r24, 0x10	; 16
    1596:	8c 93       	st	X, r24
    1598:	22 c1       	rjmp	.+580    	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC7_ADC1_1x  )
    159a:	e9 81       	ldd	r30, Y+1	; 0x01
    159c:	fa 81       	ldd	r31, Y+2	; 0x02
    159e:	83 81       	ldd	r24, Z+3	; 0x03
    15a0:	87 31       	cpi	r24, 0x17	; 23
    15a2:	21 f5       	brne	.+72     	; 0x15ec <adc_Init+0x8de>
	{
		SET_BIT(ADMUX,MUX0);
    15a4:	a7 e2       	ldi	r26, 0x27	; 39
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e7 e2       	ldi	r30, 0x27	; 39
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	81 60       	ori	r24, 0x01	; 1
    15b0:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    15b2:	a7 e2       	ldi	r26, 0x27	; 39
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e7 e2       	ldi	r30, 0x27	; 39
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	82 60       	ori	r24, 0x02	; 2
    15be:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    15c0:	a7 e2       	ldi	r26, 0x27	; 39
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e7 e2       	ldi	r30, 0x27	; 39
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	84 60       	ori	r24, 0x04	; 4
    15cc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    15ce:	a7 e2       	ldi	r26, 0x27	; 39
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e7 e2       	ldi	r30, 0x27	; 39
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	87 7f       	andi	r24, 0xF7	; 247
    15da:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    15dc:	a7 e2       	ldi	r26, 0x27	; 39
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e7 e2       	ldi	r30, 0x27	; 39
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 61       	ori	r24, 0x10	; 16
    15e8:	8c 93       	st	X, r24
    15ea:	f9 c0       	rjmp	.+498    	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC0_ADC2_1x )
    15ec:	e9 81       	ldd	r30, Y+1	; 0x01
    15ee:	fa 81       	ldd	r31, Y+2	; 0x02
    15f0:	83 81       	ldd	r24, Z+3	; 0x03
    15f2:	88 31       	cpi	r24, 0x18	; 24
    15f4:	21 f5       	brne	.+72     	; 0x163e <adc_Init+0x930>
	{
		CLR_BIT(ADMUX,MUX0);
    15f6:	a7 e2       	ldi	r26, 0x27	; 39
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e7 e2       	ldi	r30, 0x27	; 39
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8e 7f       	andi	r24, 0xFE	; 254
    1602:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    1604:	a7 e2       	ldi	r26, 0x27	; 39
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e7 e2       	ldi	r30, 0x27	; 39
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8d 7f       	andi	r24, 0xFD	; 253
    1610:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    1612:	a7 e2       	ldi	r26, 0x27	; 39
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e7 e2       	ldi	r30, 0x27	; 39
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	8b 7f       	andi	r24, 0xFB	; 251
    161e:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    1620:	a7 e2       	ldi	r26, 0x27	; 39
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e7 e2       	ldi	r30, 0x27	; 39
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 60       	ori	r24, 0x08	; 8
    162c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    162e:	a7 e2       	ldi	r26, 0x27	; 39
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e7 e2       	ldi	r30, 0x27	; 39
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	80 61       	ori	r24, 0x10	; 16
    163a:	8c 93       	st	X, r24
    163c:	d0 c0       	rjmp	.+416    	; 0x17de <adc_Init+0xad0>
	} 
	else if(config->ADC_NbrOfChannel==ADC1_ADC2_1x )
    163e:	e9 81       	ldd	r30, Y+1	; 0x01
    1640:	fa 81       	ldd	r31, Y+2	; 0x02
    1642:	83 81       	ldd	r24, Z+3	; 0x03
    1644:	89 31       	cpi	r24, 0x19	; 25
    1646:	21 f5       	brne	.+72     	; 0x1690 <adc_Init+0x982>
	{
		SET_BIT(ADMUX,MUX0);
    1648:	a7 e2       	ldi	r26, 0x27	; 39
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e7 e2       	ldi	r30, 0x27	; 39
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	81 60       	ori	r24, 0x01	; 1
    1654:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    1656:	a7 e2       	ldi	r26, 0x27	; 39
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e7 e2       	ldi	r30, 0x27	; 39
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8d 7f       	andi	r24, 0xFD	; 253
    1662:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    1664:	a7 e2       	ldi	r26, 0x27	; 39
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e7 e2       	ldi	r30, 0x27	; 39
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8b 7f       	andi	r24, 0xFB	; 251
    1670:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    1672:	a7 e2       	ldi	r26, 0x27	; 39
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e7 e2       	ldi	r30, 0x27	; 39
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	88 60       	ori	r24, 0x08	; 8
    167e:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    1680:	a7 e2       	ldi	r26, 0x27	; 39
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e7 e2       	ldi	r30, 0x27	; 39
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	80 61       	ori	r24, 0x10	; 16
    168c:	8c 93       	st	X, r24
    168e:	a7 c0       	rjmp	.+334    	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC2_ADC2_1x  )
    1690:	e9 81       	ldd	r30, Y+1	; 0x01
    1692:	fa 81       	ldd	r31, Y+2	; 0x02
    1694:	83 81       	ldd	r24, Z+3	; 0x03
    1696:	8a 31       	cpi	r24, 0x1A	; 26
    1698:	21 f5       	brne	.+72     	; 0x16e2 <adc_Init+0x9d4>
	{
		CLR_BIT(ADMUX,MUX0);
    169a:	a7 e2       	ldi	r26, 0x27	; 39
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e7 e2       	ldi	r30, 0x27	; 39
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8e 7f       	andi	r24, 0xFE	; 254
    16a6:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    16a8:	a7 e2       	ldi	r26, 0x27	; 39
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e7 e2       	ldi	r30, 0x27	; 39
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	82 60       	ori	r24, 0x02	; 2
    16b4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    16b6:	a7 e2       	ldi	r26, 0x27	; 39
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e7 e2       	ldi	r30, 0x27	; 39
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	8b 7f       	andi	r24, 0xFB	; 251
    16c2:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    16c4:	a7 e2       	ldi	r26, 0x27	; 39
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e7 e2       	ldi	r30, 0x27	; 39
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	88 60       	ori	r24, 0x08	; 8
    16d0:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    16d2:	a7 e2       	ldi	r26, 0x27	; 39
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e7 e2       	ldi	r30, 0x27	; 39
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 61       	ori	r24, 0x10	; 16
    16de:	8c 93       	st	X, r24
    16e0:	7e c0       	rjmp	.+252    	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC3_ADC2_1x )
    16e2:	e9 81       	ldd	r30, Y+1	; 0x01
    16e4:	fa 81       	ldd	r31, Y+2	; 0x02
    16e6:	83 81       	ldd	r24, Z+3	; 0x03
    16e8:	8b 31       	cpi	r24, 0x1B	; 27
    16ea:	21 f5       	brne	.+72     	; 0x1734 <adc_Init+0xa26>
	{
		SET_BIT(ADMUX,MUX0);
    16ec:	a7 e2       	ldi	r26, 0x27	; 39
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e7 e2       	ldi	r30, 0x27	; 39
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	81 60       	ori	r24, 0x01	; 1
    16f8:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    16fa:	a7 e2       	ldi	r26, 0x27	; 39
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e7 e2       	ldi	r30, 0x27	; 39
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	82 60       	ori	r24, 0x02	; 2
    1706:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    1708:	a7 e2       	ldi	r26, 0x27	; 39
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e7 e2       	ldi	r30, 0x27	; 39
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	8b 7f       	andi	r24, 0xFB	; 251
    1714:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    1716:	a7 e2       	ldi	r26, 0x27	; 39
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e7 e2       	ldi	r30, 0x27	; 39
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	88 60       	ori	r24, 0x08	; 8
    1722:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    1724:	a7 e2       	ldi	r26, 0x27	; 39
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e7 e2       	ldi	r30, 0x27	; 39
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	80 61       	ori	r24, 0x10	; 16
    1730:	8c 93       	st	X, r24
    1732:	55 c0       	rjmp	.+170    	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC4_ADC2_1x )
    1734:	e9 81       	ldd	r30, Y+1	; 0x01
    1736:	fa 81       	ldd	r31, Y+2	; 0x02
    1738:	83 81       	ldd	r24, Z+3	; 0x03
    173a:	8c 31       	cpi	r24, 0x1C	; 28
    173c:	21 f5       	brne	.+72     	; 0x1786 <adc_Init+0xa78>
	{
		CLR_BIT(ADMUX,MUX0);
    173e:	a7 e2       	ldi	r26, 0x27	; 39
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e7 e2       	ldi	r30, 0x27	; 39
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8e 7f       	andi	r24, 0xFE	; 254
    174a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    174c:	a7 e2       	ldi	r26, 0x27	; 39
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e7 e2       	ldi	r30, 0x27	; 39
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8d 7f       	andi	r24, 0xFD	; 253
    1758:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    175a:	a7 e2       	ldi	r26, 0x27	; 39
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e7 e2       	ldi	r30, 0x27	; 39
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	84 60       	ori	r24, 0x04	; 4
    1766:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    1768:	a7 e2       	ldi	r26, 0x27	; 39
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e7 e2       	ldi	r30, 0x27	; 39
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	88 60       	ori	r24, 0x08	; 8
    1774:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    1776:	a7 e2       	ldi	r26, 0x27	; 39
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e7 e2       	ldi	r30, 0x27	; 39
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 61       	ori	r24, 0x10	; 16
    1782:	8c 93       	st	X, r24
    1784:	2c c0       	rjmp	.+88     	; 0x17de <adc_Init+0xad0>
	}
	else if(config->ADC_NbrOfChannel==ADC5_ADC2_1x )
    1786:	e9 81       	ldd	r30, Y+1	; 0x01
    1788:	fa 81       	ldd	r31, Y+2	; 0x02
    178a:	83 81       	ldd	r24, Z+3	; 0x03
    178c:	8d 31       	cpi	r24, 0x1D	; 29
    178e:	21 f5       	brne	.+72     	; 0x17d8 <adc_Init+0xaca>
	{
		SET_BIT(ADMUX,MUX0);
    1790:	a7 e2       	ldi	r26, 0x27	; 39
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e7 e2       	ldi	r30, 0x27	; 39
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	81 60       	ori	r24, 0x01	; 1
    179c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    179e:	a7 e2       	ldi	r26, 0x27	; 39
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e7 e2       	ldi	r30, 0x27	; 39
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8d 7f       	andi	r24, 0xFD	; 253
    17aa:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    17ac:	a7 e2       	ldi	r26, 0x27	; 39
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e7 e2       	ldi	r30, 0x27	; 39
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	84 60       	ori	r24, 0x04	; 4
    17b8:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX3);
    17ba:	a7 e2       	ldi	r26, 0x27	; 39
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e7 e2       	ldi	r30, 0x27	; 39
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	88 60       	ori	r24, 0x08	; 8
    17c6:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX4);		
    17c8:	a7 e2       	ldi	r26, 0x27	; 39
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e7 e2       	ldi	r30, 0x27	; 39
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	80 61       	ori	r24, 0x10	; 16
    17d4:	8c 93       	st	X, r24
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <adc_Init+0xad0>
	}
	else
	{
		return ADC_CHANNEL_ERROR;
    17d8:	84 e0       	ldi	r24, 0x04	; 4
    17da:	8b 83       	std	Y+3, r24	; 0x03
    17dc:	c1 c0       	rjmp	.+386    	; 0x1960 <adc_Init+0xc52>
 *  Suppose your clock frequency
 *  of AVR is 8MHz, then we must have to use devisor 64 or 128.
 *  Because it gives 8MHz/64 = 125KHz,
 *   which is lesser than 200KHz. */

	if(config->ADC_Prescaller== F_2)
    17de:	e9 81       	ldd	r30, Y+1	; 0x01
    17e0:	fa 81       	ldd	r31, Y+2	; 0x02
    17e2:	84 81       	ldd	r24, Z+4	; 0x04
    17e4:	88 23       	and	r24, r24
    17e6:	b1 f4       	brne	.+44     	; 0x1814 <adc_Init+0xb06>
	{
		SET_BIT(ADCSRA,ADPS0);
    17e8:	a6 e2       	ldi	r26, 0x26	; 38
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e6 e2       	ldi	r30, 0x26	; 38
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	81 60       	ori	r24, 0x01	; 1
    17f4:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS1);
    17f6:	a6 e2       	ldi	r26, 0x26	; 38
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e6 e2       	ldi	r30, 0x26	; 38
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	8d 7f       	andi	r24, 0xFD	; 253
    1802:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS2);		
    1804:	a6 e2       	ldi	r26, 0x26	; 38
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e6 e2       	ldi	r30, 0x26	; 38
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8b 7f       	andi	r24, 0xFB	; 251
    1810:	8c 93       	st	X, r24
    1812:	a5 c0       	rjmp	.+330    	; 0x195e <adc_Init+0xc50>
	}	
	else if(config->ADC_Prescaller== F_4)
    1814:	e9 81       	ldd	r30, Y+1	; 0x01
    1816:	fa 81       	ldd	r31, Y+2	; 0x02
    1818:	84 81       	ldd	r24, Z+4	; 0x04
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	b1 f4       	brne	.+44     	; 0x184a <adc_Init+0xb3c>
	{
		CLR_BIT(ADCSRA,ADPS0);
    181e:	a6 e2       	ldi	r26, 0x26	; 38
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e6 e2       	ldi	r30, 0x26	; 38
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8e 7f       	andi	r24, 0xFE	; 254
    182a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    182c:	a6 e2       	ldi	r26, 0x26	; 38
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e6 e2       	ldi	r30, 0x26	; 38
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	82 60       	ori	r24, 0x02	; 2
    1838:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS2);		
    183a:	a6 e2       	ldi	r26, 0x26	; 38
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e6 e2       	ldi	r30, 0x26	; 38
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	8b 7f       	andi	r24, 0xFB	; 251
    1846:	8c 93       	st	X, r24
    1848:	8a c0       	rjmp	.+276    	; 0x195e <adc_Init+0xc50>
	}
	else if(config->ADC_Prescaller== F_8)
    184a:	e9 81       	ldd	r30, Y+1	; 0x01
    184c:	fa 81       	ldd	r31, Y+2	; 0x02
    184e:	84 81       	ldd	r24, Z+4	; 0x04
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	b1 f4       	brne	.+44     	; 0x1880 <adc_Init+0xb72>
	{
		SET_BIT(ADCSRA,ADPS0);
    1854:	a6 e2       	ldi	r26, 0x26	; 38
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e6 e2       	ldi	r30, 0x26	; 38
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	81 60       	ori	r24, 0x01	; 1
    1860:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1862:	a6 e2       	ldi	r26, 0x26	; 38
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e6 e2       	ldi	r30, 0x26	; 38
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	82 60       	ori	r24, 0x02	; 2
    186e:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS2);		
    1870:	a6 e2       	ldi	r26, 0x26	; 38
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e6 e2       	ldi	r30, 0x26	; 38
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	8b 7f       	andi	r24, 0xFB	; 251
    187c:	8c 93       	st	X, r24
    187e:	6f c0       	rjmp	.+222    	; 0x195e <adc_Init+0xc50>
	}
	else if(config->ADC_Prescaller== F_16)
    1880:	e9 81       	ldd	r30, Y+1	; 0x01
    1882:	fa 81       	ldd	r31, Y+2	; 0x02
    1884:	84 81       	ldd	r24, Z+4	; 0x04
    1886:	84 30       	cpi	r24, 0x04	; 4
    1888:	b1 f4       	brne	.+44     	; 0x18b6 <adc_Init+0xba8>
	{
		CLR_BIT(ADCSRA,ADPS0);
    188a:	a6 e2       	ldi	r26, 0x26	; 38
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e6 e2       	ldi	r30, 0x26	; 38
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8e 7f       	andi	r24, 0xFE	; 254
    1896:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS1);
    1898:	a6 e2       	ldi	r26, 0x26	; 38
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e6 e2       	ldi	r30, 0x26	; 38
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8d 7f       	andi	r24, 0xFD	; 253
    18a4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);		
    18a6:	a6 e2       	ldi	r26, 0x26	; 38
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e6 e2       	ldi	r30, 0x26	; 38
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	84 60       	ori	r24, 0x04	; 4
    18b2:	8c 93       	st	X, r24
    18b4:	54 c0       	rjmp	.+168    	; 0x195e <adc_Init+0xc50>
	}
	else if(config->ADC_Prescaller == F_32)
    18b6:	e9 81       	ldd	r30, Y+1	; 0x01
    18b8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ba:	84 81       	ldd	r24, Z+4	; 0x04
    18bc:	85 30       	cpi	r24, 0x05	; 5
    18be:	b1 f4       	brne	.+44     	; 0x18ec <adc_Init+0xbde>
	{
		SET_BIT(ADCSRA,ADPS0);
    18c0:	a6 e2       	ldi	r26, 0x26	; 38
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e6 e2       	ldi	r30, 0x26	; 38
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	81 60       	ori	r24, 0x01	; 1
    18cc:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS1);
    18ce:	a6 e2       	ldi	r26, 0x26	; 38
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e6 e2       	ldi	r30, 0x26	; 38
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	8d 7f       	andi	r24, 0xFD	; 253
    18da:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);		
    18dc:	a6 e2       	ldi	r26, 0x26	; 38
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e6 e2       	ldi	r30, 0x26	; 38
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	84 60       	ori	r24, 0x04	; 4
    18e8:	8c 93       	st	X, r24
    18ea:	39 c0       	rjmp	.+114    	; 0x195e <adc_Init+0xc50>
	}
	else if(config->ADC_Prescaller== F_64)
    18ec:	e9 81       	ldd	r30, Y+1	; 0x01
    18ee:	fa 81       	ldd	r31, Y+2	; 0x02
    18f0:	84 81       	ldd	r24, Z+4	; 0x04
    18f2:	86 30       	cpi	r24, 0x06	; 6
    18f4:	b1 f4       	brne	.+44     	; 0x1922 <adc_Init+0xc14>
	{
		CLR_BIT(ADCSRA,ADPS0);
    18f6:	a6 e2       	ldi	r26, 0x26	; 38
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e6 e2       	ldi	r30, 0x26	; 38
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	8e 7f       	andi	r24, 0xFE	; 254
    1902:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1904:	a6 e2       	ldi	r26, 0x26	; 38
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e6 e2       	ldi	r30, 0x26	; 38
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	82 60       	ori	r24, 0x02	; 2
    1910:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);		
    1912:	a6 e2       	ldi	r26, 0x26	; 38
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e6 e2       	ldi	r30, 0x26	; 38
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	84 60       	ori	r24, 0x04	; 4
    191e:	8c 93       	st	X, r24
    1920:	1e c0       	rjmp	.+60     	; 0x195e <adc_Init+0xc50>
	}
	else if(config->ADC_Prescaller== F_128)
    1922:	e9 81       	ldd	r30, Y+1	; 0x01
    1924:	fa 81       	ldd	r31, Y+2	; 0x02
    1926:	84 81       	ldd	r24, Z+4	; 0x04
    1928:	87 30       	cpi	r24, 0x07	; 7
    192a:	b1 f4       	brne	.+44     	; 0x1958 <adc_Init+0xc4a>
	{
		SET_BIT(ADCSRA,ADPS0);
    192c:	a6 e2       	ldi	r26, 0x26	; 38
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e6 e2       	ldi	r30, 0x26	; 38
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	81 60       	ori	r24, 0x01	; 1
    1938:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    193a:	a6 e2       	ldi	r26, 0x26	; 38
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e6 e2       	ldi	r30, 0x26	; 38
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	82 60       	ori	r24, 0x02	; 2
    1946:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);		
    1948:	a6 e2       	ldi	r26, 0x26	; 38
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e6 e2       	ldi	r30, 0x26	; 38
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	84 60       	ori	r24, 0x04	; 4
    1954:	8c 93       	st	X, r24
    1956:	03 c0       	rjmp	.+6      	; 0x195e <adc_Init+0xc50>
	}
	else
	{
		return PRESCALLER_SELE_ERROR;
    1958:	85 e0       	ldi	r24, 0x05	; 5
    195a:	8b 83       	std	Y+3, r24	; 0x03
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <adc_Init+0xc52>
	}

	return ADC_NO_ERROR;
    195e:	1b 82       	std	Y+3, r1	; 0x03
    1960:	8b 81       	ldd	r24, Y+3	; 0x03


}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <ADC_VoidSelect_channel>:

void ADC_VoidSelect_channel(uint8_t Copy_Channel)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <ADC_VoidSelect_channel+0x6>
    1974:	0f 92       	push	r0
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(ADMUX,MUX4);
    197c:	a7 e2       	ldi	r26, 0x27	; 39
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e7 e2       	ldi	r30, 0x27	; 39
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8f 7e       	andi	r24, 0xEF	; 239
    1988:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3);
    198a:	a7 e2       	ldi	r26, 0x27	; 39
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e7 e2       	ldi	r30, 0x27	; 39
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	87 7f       	andi	r24, 0xF7	; 247
    1996:	8c 93       	st	X, r24


	switch(Copy_Channel)
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	3b 83       	std	Y+3, r19	; 0x03
    19a0:	2a 83       	std	Y+2, r18	; 0x02
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	83 30       	cpi	r24, 0x03	; 3
    19a8:	91 05       	cpc	r25, r1
    19aa:	09 f4       	brne	.+2      	; 0x19ae <ADC_VoidSelect_channel+0x40>
    19ac:	61 c0       	rjmp	.+194    	; 0x1a70 <ADC_VoidSelect_channel+0x102>
    19ae:	2a 81       	ldd	r18, Y+2	; 0x02
    19b0:	3b 81       	ldd	r19, Y+3	; 0x03
    19b2:	24 30       	cpi	r18, 0x04	; 4
    19b4:	31 05       	cpc	r19, r1
    19b6:	7c f4       	brge	.+30     	; 0x19d6 <ADC_VoidSelect_channel+0x68>
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	91 05       	cpc	r25, r1
    19c0:	59 f1       	breq	.+86     	; 0x1a18 <ADC_VoidSelect_channel+0xaa>
    19c2:	2a 81       	ldd	r18, Y+2	; 0x02
    19c4:	3b 81       	ldd	r19, Y+3	; 0x03
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	e4 f5       	brge	.+120    	; 0x1a44 <ADC_VoidSelect_channel+0xd6>
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	d1 f0       	breq	.+52     	; 0x1a08 <ADC_VoidSelect_channel+0x9a>
    19d4:	ba c0       	rjmp	.+372    	; 0x1b4a <ADC_VoidSelect_channel+0x1dc>
    19d6:	2a 81       	ldd	r18, Y+2	; 0x02
    19d8:	3b 81       	ldd	r19, Y+3	; 0x03
    19da:	25 30       	cpi	r18, 0x05	; 5
    19dc:	31 05       	cpc	r19, r1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <ADC_VoidSelect_channel+0x74>
    19e0:	73 c0       	rjmp	.+230    	; 0x1ac8 <ADC_VoidSelect_channel+0x15a>
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	9b 81       	ldd	r25, Y+3	; 0x03
    19e6:	85 30       	cpi	r24, 0x05	; 5
    19e8:	91 05       	cpc	r25, r1
    19ea:	0c f4       	brge	.+2      	; 0x19ee <ADC_VoidSelect_channel+0x80>
    19ec:	57 c0       	rjmp	.+174    	; 0x1a9c <ADC_VoidSelect_channel+0x12e>
    19ee:	2a 81       	ldd	r18, Y+2	; 0x02
    19f0:	3b 81       	ldd	r19, Y+3	; 0x03
    19f2:	26 30       	cpi	r18, 0x06	; 6
    19f4:	31 05       	cpc	r19, r1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <ADC_VoidSelect_channel+0x8c>
    19f8:	7d c0       	rjmp	.+250    	; 0x1af4 <ADC_VoidSelect_channel+0x186>
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	9b 81       	ldd	r25, Y+3	; 0x03
    19fe:	87 30       	cpi	r24, 0x07	; 7
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <ADC_VoidSelect_channel+0x98>
    1a04:	8d c0       	rjmp	.+282    	; 0x1b20 <ADC_VoidSelect_channel+0x1b2>
    1a06:	a1 c0       	rjmp	.+322    	; 0x1b4a <ADC_VoidSelect_channel+0x1dc>
	{	case ADC_C0 : ADMUX&=0B11100000; break;  // choose channel
    1a08:	a7 e2       	ldi	r26, 0x27	; 39
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e7 e2       	ldi	r30, 0x27	; 39
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	80 7e       	andi	r24, 0xE0	; 224
    1a14:	8c 93       	st	X, r24
    1a16:	99 c0       	rjmp	.+306    	; 0x1b4a <ADC_VoidSelect_channel+0x1dc>
		case ADC_C1 :SET_BIT(ADMUX,MUX0);CLR_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
    1a18:	a7 e2       	ldi	r26, 0x27	; 39
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e7 e2       	ldi	r30, 0x27	; 39
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	81 60       	ori	r24, 0x01	; 1
    1a24:	8c 93       	st	X, r24
    1a26:	a7 e2       	ldi	r26, 0x27	; 39
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e7 e2       	ldi	r30, 0x27	; 39
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8d 7f       	andi	r24, 0xFD	; 253
    1a32:	8c 93       	st	X, r24
    1a34:	a7 e2       	ldi	r26, 0x27	; 39
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e7 e2       	ldi	r30, 0x27	; 39
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8b 7f       	andi	r24, 0xFB	; 251
    1a40:	8c 93       	st	X, r24
    1a42:	83 c0       	rjmp	.+262    	; 0x1b4a <ADC_VoidSelect_channel+0x1dc>
		case ADC_C2 :CLR_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
    1a44:	a7 e2       	ldi	r26, 0x27	; 39
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e7 e2       	ldi	r30, 0x27	; 39
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	8e 7f       	andi	r24, 0xFE	; 254
    1a50:	8c 93       	st	X, r24
    1a52:	a7 e2       	ldi	r26, 0x27	; 39
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e7 e2       	ldi	r30, 0x27	; 39
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	82 60       	ori	r24, 0x02	; 2
    1a5e:	8c 93       	st	X, r24
    1a60:	a7 e2       	ldi	r26, 0x27	; 39
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e7 e2       	ldi	r30, 0x27	; 39
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	8b 7f       	andi	r24, 0xFB	; 251
    1a6c:	8c 93       	st	X, r24
    1a6e:	6d c0       	rjmp	.+218    	; 0x1b4a <ADC_VoidSelect_channel+0x1dc>
		case ADC_C3 :CLR_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX2); break;
    1a70:	a7 e2       	ldi	r26, 0x27	; 39
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e7 e2       	ldi	r30, 0x27	; 39
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	8e 7f       	andi	r24, 0xFE	; 254
    1a7c:	8c 93       	st	X, r24
    1a7e:	a7 e2       	ldi	r26, 0x27	; 39
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e7 e2       	ldi	r30, 0x27	; 39
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	82 60       	ori	r24, 0x02	; 2
    1a8a:	8c 93       	st	X, r24
    1a8c:	a7 e2       	ldi	r26, 0x27	; 39
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e7 e2       	ldi	r30, 0x27	; 39
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	84 60       	ori	r24, 0x04	; 4
    1a98:	8c 93       	st	X, r24
    1a9a:	57 c0       	rjmp	.+174    	; 0x1b4a <ADC_VoidSelect_channel+0x1dc>
		case ADC_C4 :SET_BIT(ADMUX,MUX0);CLR_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
    1a9c:	a7 e2       	ldi	r26, 0x27	; 39
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e7 e2       	ldi	r30, 0x27	; 39
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	81 60       	ori	r24, 0x01	; 1
    1aa8:	8c 93       	st	X, r24
    1aaa:	a7 e2       	ldi	r26, 0x27	; 39
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e7 e2       	ldi	r30, 0x27	; 39
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8d 7f       	andi	r24, 0xFD	; 253
    1ab6:	8c 93       	st	X, r24
    1ab8:	a7 e2       	ldi	r26, 0x27	; 39
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e7 e2       	ldi	r30, 0x27	; 39
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8b 7f       	andi	r24, 0xFB	; 251
    1ac4:	8c 93       	st	X, r24
    1ac6:	41 c0       	rjmp	.+130    	; 0x1b4a <ADC_VoidSelect_channel+0x1dc>
		case ADC_C5 :SET_BIT(ADMUX,MUX0);CLR_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX2); break;
    1ac8:	a7 e2       	ldi	r26, 0x27	; 39
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e7 e2       	ldi	r30, 0x27	; 39
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	81 60       	ori	r24, 0x01	; 1
    1ad4:	8c 93       	st	X, r24
    1ad6:	a7 e2       	ldi	r26, 0x27	; 39
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e7 e2       	ldi	r30, 0x27	; 39
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8d 7f       	andi	r24, 0xFD	; 253
    1ae2:	8c 93       	st	X, r24
    1ae4:	a7 e2       	ldi	r26, 0x27	; 39
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e7 e2       	ldi	r30, 0x27	; 39
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	84 60       	ori	r24, 0x04	; 4
    1af0:	8c 93       	st	X, r24
    1af2:	2b c0       	rjmp	.+86     	; 0x1b4a <ADC_VoidSelect_channel+0x1dc>
		case ADC_C6 :SET_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX2); break;
    1af4:	a7 e2       	ldi	r26, 0x27	; 39
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e7 e2       	ldi	r30, 0x27	; 39
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	8c 93       	st	X, r24
    1b02:	a7 e2       	ldi	r26, 0x27	; 39
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e7 e2       	ldi	r30, 0x27	; 39
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	82 60       	ori	r24, 0x02	; 2
    1b0e:	8c 93       	st	X, r24
    1b10:	a7 e2       	ldi	r26, 0x27	; 39
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e7 e2       	ldi	r30, 0x27	; 39
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	8b 7f       	andi	r24, 0xFB	; 251
    1b1c:	8c 93       	st	X, r24
    1b1e:	15 c0       	rjmp	.+42     	; 0x1b4a <ADC_VoidSelect_channel+0x1dc>
		case ADC_C7 :SET_BIT(ADMUX,MUX0);SET_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX2); break;
    1b20:	a7 e2       	ldi	r26, 0x27	; 39
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e7 e2       	ldi	r30, 0x27	; 39
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	81 60       	ori	r24, 0x01	; 1
    1b2c:	8c 93       	st	X, r24
    1b2e:	a7 e2       	ldi	r26, 0x27	; 39
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e7 e2       	ldi	r30, 0x27	; 39
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	82 60       	ori	r24, 0x02	; 2
    1b3a:	8c 93       	st	X, r24
    1b3c:	a7 e2       	ldi	r26, 0x27	; 39
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e7 e2       	ldi	r30, 0x27	; 39
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	84 60       	ori	r24, 0x04	; 4
    1b48:	8c 93       	st	X, r24
	}
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <adc_Enable>:

void adc_Enable(void)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
    1b5e:	a6 e2       	ldi	r26, 0x26	; 38
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e6 e2       	ldi	r30, 0x26	; 38
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	80 68       	ori	r24, 0x80	; 128
    1b6a:	8c 93       	st	X, r24
}
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <ADC_SetCallback>:


void ADC_SetCallback(void(*ptrf)(void))
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <ADC_SetCallback+0x6>
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	if(ptrf != NULL)
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	9a 81       	ldd	r25, Y+2	; 0x02
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	31 f0       	breq	.+12     	; 0x1b94 <ADC_SetCallback+0x22>
	{
		SETCALLBACK  = ptrf;	
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	90 93 b7 01 	sts	0x01B7, r25
    1b90:	80 93 b6 01 	sts	0x01B6, r24
	}	
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <adc_StartConversion>:
void adc_StartConversion(void)
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
    1ba6:	a6 e2       	ldi	r26, 0x26	; 38
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e6 e2       	ldi	r30, 0x26	; 38
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	80 64       	ori	r24, 0x40	; 64
    1bb2:	8c 93       	st	X, r24
}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <adc_Read>:

uint16_t adc_Read(ST_ADC__config_t * config)
{	
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <adc_Read+0x6>
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <adc_Read+0x8>
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
	adc_StartConversion();
    1bca:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <adc_StartConversion>
	while(GET_BIT(ADCSRA,ADIF) == 0);
    1bce:	e6 e2       	ldi	r30, 0x26	; 38
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	82 95       	swap	r24
    1bd6:	8f 70       	andi	r24, 0x0F	; 15
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	81 70       	andi	r24, 0x01	; 1
    1bde:	90 70       	andi	r25, 0x00	; 0
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	a9 f3       	breq	.-22     	; 0x1bce <adc_Read+0x14>
	SET_BIT(ADCSRA,ADIF);
    1be4:	a6 e2       	ldi	r26, 0x26	; 38
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e6 e2       	ldi	r30, 0x26	; 38
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	80 61       	ori	r24, 0x10	; 16
    1bf0:	8c 93       	st	X, r24
	if(config->ADC_DataAlign == ADJUST_RIGHT)
    1bf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	39 f4       	brne	.+14     	; 0x1c0a <adc_Read+0x50>
	{
		return ADC_DATA;
    1bfc:	e4 e2       	ldi	r30, 0x24	; 36
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	20 81       	ld	r18, Z
    1c02:	31 81       	ldd	r19, Z+1	; 0x01
    1c04:	3c 83       	std	Y+4, r19	; 0x04
    1c06:	2b 83       	std	Y+3, r18	; 0x03
    1c08:	10 c0       	rjmp	.+32     	; 0x1c2a <adc_Read+0x70>
	}
	else
	{
		return ADC_DATA>>HIGH_BITS;
    1c0a:	e4 e2       	ldi	r30, 0x24	; 36
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	9c 01       	movw	r18, r24
    1c14:	00 24       	eor	r0, r0
    1c16:	22 0f       	add	r18, r18
    1c18:	33 1f       	adc	r19, r19
    1c1a:	00 1c       	adc	r0, r0
    1c1c:	22 0f       	add	r18, r18
    1c1e:	33 1f       	adc	r19, r19
    1c20:	00 1c       	adc	r0, r0
    1c22:	23 2f       	mov	r18, r19
    1c24:	30 2d       	mov	r19, r0
    1c26:	3c 83       	std	Y+4, r19	; 0x04
    1c28:	2b 83       	std	Y+3, r18	; 0x03
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <__vector_16>:

void __vector_16(void )
{
    1c3c:	1f 92       	push	r1
    1c3e:	0f 92       	push	r0
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	0f 92       	push	r0
    1c44:	11 24       	eor	r1, r1
    1c46:	2f 93       	push	r18
    1c48:	3f 93       	push	r19
    1c4a:	4f 93       	push	r20
    1c4c:	5f 93       	push	r21
    1c4e:	6f 93       	push	r22
    1c50:	7f 93       	push	r23
    1c52:	8f 93       	push	r24
    1c54:	9f 93       	push	r25
    1c56:	af 93       	push	r26
    1c58:	bf 93       	push	r27
    1c5a:	ef 93       	push	r30
    1c5c:	ff 93       	push	r31
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
	SETCALLBACK();
    1c66:	e0 91 b6 01 	lds	r30, 0x01B6
    1c6a:	f0 91 b7 01 	lds	r31, 0x01B7
    1c6e:	09 95       	icall

}
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	ff 91       	pop	r31
    1c76:	ef 91       	pop	r30
    1c78:	bf 91       	pop	r27
    1c7a:	af 91       	pop	r26
    1c7c:	9f 91       	pop	r25
    1c7e:	8f 91       	pop	r24
    1c80:	7f 91       	pop	r23
    1c82:	6f 91       	pop	r22
    1c84:	5f 91       	pop	r21
    1c86:	4f 91       	pop	r20
    1c88:	3f 91       	pop	r19
    1c8a:	2f 91       	pop	r18
    1c8c:	0f 90       	pop	r0
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	0f 90       	pop	r0
    1c92:	1f 90       	pop	r1
    1c94:	18 95       	reti

00001c96 <DIO_voidSetPinDirection>:
#include"BIT_MATH.h"
#include"DIO_register.h"
#include"DIO_interface.h"

void DIO_voidSetPinDirection		(ST_DIO_config_t * configurations)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <DIO_voidSetPinDirection+0x6>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <DIO_voidSetPinDirection+0x8>
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <DIO_voidSetPinDirection+0xa>
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
	if(OUTPUT==configurations->state)
    1ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    1caa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <DIO_voidSetPinDirection+0x1e>
    1cb2:	7a c0       	rjmp	.+244    	; 0x1da8 <DIO_voidSetPinDirection+0x112>
	{
		switch (configurations->port_no)
    1cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb8:	80 81       	ld	r24, Z
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	3e 83       	std	Y+6, r19	; 0x06
    1cc0:	2d 83       	std	Y+5, r18	; 0x05
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	91 05       	cpc	r25, r1
    1cca:	61 f1       	breq	.+88     	; 0x1d24 <DIO_voidSetPinDirection+0x8e>
    1ccc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cce:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd0:	22 30       	cpi	r18, 0x02	; 2
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <DIO_voidSetPinDirection+0x4a>
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	69 f0       	breq	.+26     	; 0x1cf8 <DIO_voidSetPinDirection+0x62>
    1cde:	e7 c0       	rjmp	.+462    	; 0x1eae <DIO_voidSetPinDirection+0x218>
    1ce0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce4:	22 30       	cpi	r18, 0x02	; 2
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	99 f1       	breq	.+102    	; 0x1d50 <DIO_voidSetPinDirection+0xba>
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <DIO_voidSetPinDirection+0x60>
    1cf4:	43 c0       	rjmp	.+134    	; 0x1d7c <DIO_voidSetPinDirection+0xe6>
    1cf6:	db c0       	rjmp	.+438    	; 0x1eae <DIO_voidSetPinDirection+0x218>
		{
			case PORTA:SET_BIT(DDRA, configurations->pin_no); break;
    1cf8:	aa e3       	ldi	r26, 0x3A	; 58
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	ea e3       	ldi	r30, 0x3A	; 58
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	e9 81       	ldd	r30, Y+1	; 0x01
    1d06:	fa 81       	ldd	r31, Y+2	; 0x02
    1d08:	81 81       	ldd	r24, Z+1	; 0x01
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <DIO_voidSetPinDirection+0x84>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <DIO_voidSetPinDirection+0x80>
    1d1e:	84 2b       	or	r24, r20
    1d20:	8c 93       	st	X, r24
    1d22:	c5 c0       	rjmp	.+394    	; 0x1eae <DIO_voidSetPinDirection+0x218>
			case PORTB:SET_BIT(DDRB,  configurations->pin_no); break;
    1d24:	a7 e3       	ldi	r26, 0x37	; 55
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e7 e3       	ldi	r30, 0x37	; 55
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	48 2f       	mov	r20, r24
    1d30:	e9 81       	ldd	r30, Y+1	; 0x01
    1d32:	fa 81       	ldd	r31, Y+2	; 0x02
    1d34:	81 81       	ldd	r24, Z+1	; 0x01
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	02 2e       	mov	r0, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <DIO_voidSetPinDirection+0xb0>
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	0a 94       	dec	r0
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <DIO_voidSetPinDirection+0xac>
    1d4a:	84 2b       	or	r24, r20
    1d4c:	8c 93       	st	X, r24
    1d4e:	af c0       	rjmp	.+350    	; 0x1eae <DIO_voidSetPinDirection+0x218>
			case PORTC:SET_BIT(DDRC,  configurations->pin_no); break;
    1d50:	a4 e3       	ldi	r26, 0x34	; 52
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e4 e3       	ldi	r30, 0x34	; 52
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	48 2f       	mov	r20, r24
    1d5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d60:	81 81       	ldd	r24, Z+1	; 0x01
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_voidSetPinDirection+0xdc>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_voidSetPinDirection+0xd8>
    1d76:	84 2b       	or	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	99 c0       	rjmp	.+306    	; 0x1eae <DIO_voidSetPinDirection+0x218>
			case PORTD:SET_BIT(DDRD,  configurations->pin_no); break;
    1d7c:	a1 e3       	ldi	r26, 0x31	; 49
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e1 e3       	ldi	r30, 0x31	; 49
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8c:	81 81       	ldd	r24, Z+1	; 0x01
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <DIO_voidSetPinDirection+0x108>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <DIO_voidSetPinDirection+0x104>
    1da2:	84 2b       	or	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	83 c0       	rjmp	.+262    	; 0x1eae <DIO_voidSetPinDirection+0x218>
	
		}	
	}
	else if(INPUT==configurations->state)
    1da8:	e9 81       	ldd	r30, Y+1	; 0x01
    1daa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	88 23       	and	r24, r24
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <DIO_voidSetPinDirection+0x11e>
    1db2:	7d c0       	rjmp	.+250    	; 0x1eae <DIO_voidSetPinDirection+0x218>
	{
		switch(configurations->port_no)
    1db4:	e9 81       	ldd	r30, Y+1	; 0x01
    1db6:	fa 81       	ldd	r31, Y+2	; 0x02
    1db8:	80 81       	ld	r24, Z
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	3c 83       	std	Y+4, r19	; 0x04
    1dc0:	2b 83       	std	Y+3, r18	; 0x03
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	91 05       	cpc	r25, r1
    1dca:	69 f1       	breq	.+90     	; 0x1e26 <DIO_voidSetPinDirection+0x190>
    1dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dce:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd0:	22 30       	cpi	r18, 0x02	; 2
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <DIO_voidSetPinDirection+0x14a>
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	69 f0       	breq	.+26     	; 0x1df8 <DIO_voidSetPinDirection+0x162>
    1dde:	67 c0       	rjmp	.+206    	; 0x1eae <DIO_voidSetPinDirection+0x218>
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	a9 f1       	breq	.+106    	; 0x1e54 <DIO_voidSetPinDirection+0x1be>
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	91 05       	cpc	r25, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <DIO_voidSetPinDirection+0x160>
    1df4:	46 c0       	rjmp	.+140    	; 0x1e82 <DIO_voidSetPinDirection+0x1ec>
    1df6:	5b c0       	rjmp	.+182    	; 0x1eae <DIO_voidSetPinDirection+0x218>
		{
			case PORTA:CLR_BIT(DDRA,  configurations->pin_no); break;
    1df8:	aa e3       	ldi	r26, 0x3A	; 58
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	ea e3       	ldi	r30, 0x3A	; 58
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	48 2f       	mov	r20, r24
    1e04:	e9 81       	ldd	r30, Y+1	; 0x01
    1e06:	fa 81       	ldd	r31, Y+2	; 0x02
    1e08:	81 81       	ldd	r24, Z+1	; 0x01
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 2e       	mov	r0, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_voidSetPinDirection+0x184>
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	0a 94       	dec	r0
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <DIO_voidSetPinDirection+0x180>
    1e1e:	80 95       	com	r24
    1e20:	84 23       	and	r24, r20
    1e22:	8c 93       	st	X, r24
    1e24:	44 c0       	rjmp	.+136    	; 0x1eae <DIO_voidSetPinDirection+0x218>
			case PORTB:CLR_BIT(DDRB,  configurations->pin_no); break;
    1e26:	a7 e3       	ldi	r26, 0x37	; 55
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e7 e3       	ldi	r30, 0x37	; 55
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	e9 81       	ldd	r30, Y+1	; 0x01
    1e34:	fa 81       	ldd	r31, Y+2	; 0x02
    1e36:	81 81       	ldd	r24, Z+1	; 0x01
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 2e       	mov	r0, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <DIO_voidSetPinDirection+0x1b2>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <DIO_voidSetPinDirection+0x1ae>
    1e4c:	80 95       	com	r24
    1e4e:	84 23       	and	r24, r20
    1e50:	8c 93       	st	X, r24
    1e52:	2d c0       	rjmp	.+90     	; 0x1eae <DIO_voidSetPinDirection+0x218>
		    case PORTC:CLR_BIT(DDRC,  configurations->pin_no); break;
    1e54:	a4 e3       	ldi	r26, 0x34	; 52
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e4 e3       	ldi	r30, 0x34	; 52
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	e9 81       	ldd	r30, Y+1	; 0x01
    1e62:	fa 81       	ldd	r31, Y+2	; 0x02
    1e64:	81 81       	ldd	r24, Z+1	; 0x01
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <DIO_voidSetPinDirection+0x1e0>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <DIO_voidSetPinDirection+0x1dc>
    1e7a:	80 95       	com	r24
    1e7c:	84 23       	and	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	16 c0       	rjmp	.+44     	; 0x1eae <DIO_voidSetPinDirection+0x218>
		    case PORTD:CLR_BIT(DDRD,  configurations->pin_no); break;
    1e82:	a1 e3       	ldi	r26, 0x31	; 49
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e1 e3       	ldi	r30, 0x31	; 49
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e90:	fa 81       	ldd	r31, Y+2	; 0x02
    1e92:	81 81       	ldd	r24, Z+1	; 0x01
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 2e       	mov	r0, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <DIO_voidSetPinDirection+0x20e>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	0a 94       	dec	r0
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <DIO_voidSetPinDirection+0x20a>
    1ea8:	80 95       	com	r24
    1eaa:	84 23       	and	r24, r20
    1eac:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
    1eae:	26 96       	adiw	r28, 0x06	; 6
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue			(uint8_t copy_uint8_tport, uint8_t copy_uint8_tpin, uint8_t copy_uint8_tvalue)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	27 97       	sbiw	r28, 0x07	; 7
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	6a 83       	std	Y+2, r22	; 0x02
    1ed8:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_uint8_tvalue)
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <DIO_voidSetPinValue+0x22>
    1ee0:	6f c0       	rjmp	.+222    	; 0x1fc0 <DIO_voidSetPinValue+0x100>
	{
		switch (copy_uint8_tport)
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	3f 83       	std	Y+7, r19	; 0x07
    1eea:	2e 83       	std	Y+6, r18	; 0x06
    1eec:	8e 81       	ldd	r24, Y+6	; 0x06
    1eee:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	49 f1       	breq	.+82     	; 0x1f48 <DIO_voidSetPinValue+0x88>
    1ef6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ef8:	3f 81       	ldd	r19, Y+7	; 0x07
    1efa:	22 30       	cpi	r18, 0x02	; 2
    1efc:	31 05       	cpc	r19, r1
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <DIO_voidSetPinValue+0x4a>
    1f00:	8e 81       	ldd	r24, Y+6	; 0x06
    1f02:	9f 81       	ldd	r25, Y+7	; 0x07
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	61 f0       	breq	.+24     	; 0x1f20 <DIO_voidSetPinValue+0x60>
    1f08:	d2 c0       	rjmp	.+420    	; 0x20ae <DIO_voidSetPinValue+0x1ee>
    1f0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f0e:	22 30       	cpi	r18, 0x02	; 2
    1f10:	31 05       	cpc	r19, r1
    1f12:	71 f1       	breq	.+92     	; 0x1f70 <DIO_voidSetPinValue+0xb0>
    1f14:	8e 81       	ldd	r24, Y+6	; 0x06
    1f16:	9f 81       	ldd	r25, Y+7	; 0x07
    1f18:	83 30       	cpi	r24, 0x03	; 3
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	e9 f1       	breq	.+122    	; 0x1f98 <DIO_voidSetPinValue+0xd8>
    1f1e:	c7 c0       	rjmp	.+398    	; 0x20ae <DIO_voidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_uint8_tpin); break;
    1f20:	ab e3       	ldi	r26, 0x3B	; 59
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	eb e3       	ldi	r30, 0x3B	; 59
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	48 2f       	mov	r20, r24
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	02 2e       	mov	r0, r18
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <DIO_voidSetPinValue+0x7e>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	0a 94       	dec	r0
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <DIO_voidSetPinValue+0x7a>
    1f42:	84 2b       	or	r24, r20
    1f44:	8c 93       	st	X, r24
    1f46:	b3 c0       	rjmp	.+358    	; 0x20ae <DIO_voidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_uint8_tpin); break;
    1f48:	a8 e3       	ldi	r26, 0x38	; 56
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e8 e3       	ldi	r30, 0x38	; 56
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	48 2f       	mov	r20, r24
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	02 2e       	mov	r0, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <DIO_voidSetPinValue+0xa6>
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	0a 94       	dec	r0
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <DIO_voidSetPinValue+0xa2>
    1f6a:	84 2b       	or	r24, r20
    1f6c:	8c 93       	st	X, r24
    1f6e:	9f c0       	rjmp	.+318    	; 0x20ae <DIO_voidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_uint8_tpin); break;
    1f70:	a5 e3       	ldi	r26, 0x35	; 53
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e5 e3       	ldi	r30, 0x35	; 53
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	48 2f       	mov	r20, r24
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	02 2e       	mov	r0, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <DIO_voidSetPinValue+0xce>
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	0a 94       	dec	r0
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <DIO_voidSetPinValue+0xca>
    1f92:	84 2b       	or	r24, r20
    1f94:	8c 93       	st	X, r24
    1f96:	8b c0       	rjmp	.+278    	; 0x20ae <DIO_voidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_uint8_tpin); break;
    1f98:	a2 e3       	ldi	r26, 0x32	; 50
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e2 e3       	ldi	r30, 0x32	; 50
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	48 2f       	mov	r20, r24
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	02 2e       	mov	r0, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_voidSetPinValue+0xf6>
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	0a 94       	dec	r0
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <DIO_voidSetPinValue+0xf2>
    1fba:	84 2b       	or	r24, r20
    1fbc:	8c 93       	st	X, r24
    1fbe:	77 c0       	rjmp	.+238    	; 0x20ae <DIO_voidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_uint8_tvalue)
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	88 23       	and	r24, r24
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <DIO_voidSetPinValue+0x108>
    1fc6:	73 c0       	rjmp	.+230    	; 0x20ae <DIO_voidSetPinValue+0x1ee>
	{
		switch(copy_uint8_tport)
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	3d 83       	std	Y+5, r19	; 0x05
    1fd0:	2c 83       	std	Y+4, r18	; 0x04
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	91 05       	cpc	r25, r1
    1fda:	59 f1       	breq	.+86     	; 0x2032 <DIO_voidSetPinValue+0x172>
    1fdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1fde:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe0:	22 30       	cpi	r18, 0x02	; 2
    1fe2:	31 05       	cpc	r19, r1
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <DIO_voidSetPinValue+0x130>
    1fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	69 f0       	breq	.+26     	; 0x2008 <DIO_voidSetPinValue+0x148>
    1fee:	5f c0       	rjmp	.+190    	; 0x20ae <DIO_voidSetPinValue+0x1ee>
    1ff0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff4:	22 30       	cpi	r18, 0x02	; 2
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	89 f1       	breq	.+98     	; 0x205c <DIO_voidSetPinValue+0x19c>
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	83 30       	cpi	r24, 0x03	; 3
    2000:	91 05       	cpc	r25, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <DIO_voidSetPinValue+0x146>
    2004:	40 c0       	rjmp	.+128    	; 0x2086 <DIO_voidSetPinValue+0x1c6>
    2006:	53 c0       	rjmp	.+166    	; 0x20ae <DIO_voidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_uint8_tpin); break;
    2008:	ab e3       	ldi	r26, 0x3B	; 59
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	eb e3       	ldi	r30, 0x3B	; 59
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	48 2f       	mov	r20, r24
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	02 2e       	mov	r0, r18
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <DIO_voidSetPinValue+0x166>
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	0a 94       	dec	r0
    2028:	e2 f7       	brpl	.-8      	; 0x2022 <DIO_voidSetPinValue+0x162>
    202a:	80 95       	com	r24
    202c:	84 23       	and	r24, r20
    202e:	8c 93       	st	X, r24
    2030:	3e c0       	rjmp	.+124    	; 0x20ae <DIO_voidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_uint8_tpin); break;
    2032:	a8 e3       	ldi	r26, 0x38	; 56
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e8 e3       	ldi	r30, 0x38	; 56
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	48 2f       	mov	r20, r24
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 2e       	mov	r0, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <DIO_voidSetPinValue+0x190>
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <DIO_voidSetPinValue+0x18c>
    2054:	80 95       	com	r24
    2056:	84 23       	and	r24, r20
    2058:	8c 93       	st	X, r24
    205a:	29 c0       	rjmp	.+82     	; 0x20ae <DIO_voidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_uint8_tpin); break;
    205c:	a5 e3       	ldi	r26, 0x35	; 53
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e5 e3       	ldi	r30, 0x35	; 53
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	48 2f       	mov	r20, r24
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 2e       	mov	r0, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <DIO_voidSetPinValue+0x1ba>
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	0a 94       	dec	r0
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <DIO_voidSetPinValue+0x1b6>
    207e:	80 95       	com	r24
    2080:	84 23       	and	r24, r20
    2082:	8c 93       	st	X, r24
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <DIO_voidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_uint8_tpin); break;
    2086:	a2 e3       	ldi	r26, 0x32	; 50
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e2 e3       	ldi	r30, 0x32	; 50
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	48 2f       	mov	r20, r24
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	02 2e       	mov	r0, r18
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <DIO_voidSetPinValue+0x1e4>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	0a 94       	dec	r0
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <DIO_voidSetPinValue+0x1e0>
    20a8:	80 95       	com	r24
    20aa:	84 23       	and	r24, r20
    20ac:	8c 93       	st	X, r24
		
	}	
	
	
	
}
    20ae:	27 96       	adiw	r28, 0x07	; 7
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <DIO_uint8_tGetPinValue>:


uint8_t DIO_uint8_tGetPinValue			(uint8_t copy_uint8_tport, uint8_t Copy_uint8_tPin)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <DIO_uint8_tGetPinValue+0x6>
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <DIO_uint8_tGetPinValue+0x8>
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	8a 83       	std	Y+2, r24	; 0x02
    20d0:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Lcal_uint8_tPinResult=0;
    20d2:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_uint8_tport){
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	3d 83       	std	Y+5, r19	; 0x05
    20dc:	2c 83       	std	Y+4, r18	; 0x04
    20de:	4c 81       	ldd	r20, Y+4	; 0x04
    20e0:	5d 81       	ldd	r21, Y+5	; 0x05
    20e2:	41 30       	cpi	r20, 0x01	; 1
    20e4:	51 05       	cpc	r21, r1
    20e6:	41 f1       	breq	.+80     	; 0x2138 <DIO_uint8_tGetPinValue+0x78>
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	91 05       	cpc	r25, r1
    20f0:	34 f4       	brge	.+12     	; 0x20fe <DIO_uint8_tGetPinValue+0x3e>
    20f2:	2c 81       	ldd	r18, Y+4	; 0x04
    20f4:	3d 81       	ldd	r19, Y+5	; 0x05
    20f6:	21 15       	cp	r18, r1
    20f8:	31 05       	cpc	r19, r1
    20fa:	61 f0       	breq	.+24     	; 0x2114 <DIO_uint8_tGetPinValue+0x54>
    20fc:	52 c0       	rjmp	.+164    	; 0x21a2 <DIO_uint8_tGetPinValue+0xe2>
    20fe:	4c 81       	ldd	r20, Y+4	; 0x04
    2100:	5d 81       	ldd	r21, Y+5	; 0x05
    2102:	42 30       	cpi	r20, 0x02	; 2
    2104:	51 05       	cpc	r21, r1
    2106:	51 f1       	breq	.+84     	; 0x215c <DIO_uint8_tGetPinValue+0x9c>
    2108:	8c 81       	ldd	r24, Y+4	; 0x04
    210a:	9d 81       	ldd	r25, Y+5	; 0x05
    210c:	83 30       	cpi	r24, 0x03	; 3
    210e:	91 05       	cpc	r25, r1
    2110:	b9 f1       	breq	.+110    	; 0x2180 <DIO_uint8_tGetPinValue+0xc0>
    2112:	47 c0       	rjmp	.+142    	; 0x21a2 <DIO_uint8_tGetPinValue+0xe2>

			case PORTA :		Lcal_uint8_tPinResult=GET_BIT(PINA,Copy_uint8_tPin);	        break;
    2114:	e9 e3       	ldi	r30, 0x39	; 57
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a9 01       	movw	r20, r18
    2126:	02 c0       	rjmp	.+4      	; 0x212c <DIO_uint8_tGetPinValue+0x6c>
    2128:	55 95       	asr	r21
    212a:	47 95       	ror	r20
    212c:	8a 95       	dec	r24
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <DIO_uint8_tGetPinValue+0x68>
    2130:	ca 01       	movw	r24, r20
    2132:	81 70       	andi	r24, 0x01	; 1
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	35 c0       	rjmp	.+106    	; 0x21a2 <DIO_uint8_tGetPinValue+0xe2>
			case PORTB :		Lcal_uint8_tPinResult=GET_BIT(PINB,Copy_uint8_tPin); 		    break;
    2138:	e6 e3       	ldi	r30, 0x36	; 54
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	88 2f       	mov	r24, r24
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a9 01       	movw	r20, r18
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <DIO_uint8_tGetPinValue+0x90>
    214c:	55 95       	asr	r21
    214e:	47 95       	ror	r20
    2150:	8a 95       	dec	r24
    2152:	e2 f7       	brpl	.-8      	; 0x214c <DIO_uint8_tGetPinValue+0x8c>
    2154:	ca 01       	movw	r24, r20
    2156:	81 70       	andi	r24, 0x01	; 1
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	23 c0       	rjmp	.+70     	; 0x21a2 <DIO_uint8_tGetPinValue+0xe2>
			case PORTC :		Lcal_uint8_tPinResult=GET_BIT(PINC,Copy_uint8_tPin);			break;
    215c:	e3 e3       	ldi	r30, 0x33	; 51
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a9 01       	movw	r20, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <DIO_uint8_tGetPinValue+0xb4>
    2170:	55 95       	asr	r21
    2172:	47 95       	ror	r20
    2174:	8a 95       	dec	r24
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <DIO_uint8_tGetPinValue+0xb0>
    2178:	ca 01       	movw	r24, r20
    217a:	81 70       	andi	r24, 0x01	; 1
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	11 c0       	rjmp	.+34     	; 0x21a2 <DIO_uint8_tGetPinValue+0xe2>
			case PORTD :		Lcal_uint8_tPinResult=GET_BIT(PIND,Copy_uint8_tPin);			break;
    2180:	e0 e3       	ldi	r30, 0x30	; 48
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a9 01       	movw	r20, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_uint8_tGetPinValue+0xd8>
    2194:	55 95       	asr	r21
    2196:	47 95       	ror	r20
    2198:	8a 95       	dec	r24
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_uint8_tGetPinValue+0xd4>
    219c:	ca 01       	movw	r24, r20
    219e:	81 70       	andi	r24, 0x01	; 1
    21a0:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_uint8_tPinResult);
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <DIO_voidTogglePin>:

void DIO_voidTogglePin			(uint8_t copy_uint8_tport, uint8_t copy_uint8_tpin)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <DIO_voidTogglePin+0x6>
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <DIO_voidTogglePin+0x8>
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_uint8_tport)
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	3c 83       	std	Y+4, r19	; 0x04
    21cc:	2b 83       	std	Y+3, r18	; 0x03
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	91 05       	cpc	r25, r1
    21d6:	49 f1       	breq	.+82     	; 0x222a <DIO_voidTogglePin+0x76>
    21d8:	2b 81       	ldd	r18, Y+3	; 0x03
    21da:	3c 81       	ldd	r19, Y+4	; 0x04
    21dc:	22 30       	cpi	r18, 0x02	; 2
    21de:	31 05       	cpc	r19, r1
    21e0:	2c f4       	brge	.+10     	; 0x21ec <DIO_voidTogglePin+0x38>
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	61 f0       	breq	.+24     	; 0x2202 <DIO_voidTogglePin+0x4e>
    21ea:	5a c0       	rjmp	.+180    	; 0x22a0 <DIO_voidTogglePin+0xec>
    21ec:	2b 81       	ldd	r18, Y+3	; 0x03
    21ee:	3c 81       	ldd	r19, Y+4	; 0x04
    21f0:	22 30       	cpi	r18, 0x02	; 2
    21f2:	31 05       	cpc	r19, r1
    21f4:	71 f1       	breq	.+92     	; 0x2252 <DIO_voidTogglePin+0x9e>
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	83 30       	cpi	r24, 0x03	; 3
    21fc:	91 05       	cpc	r25, r1
    21fe:	e9 f1       	breq	.+122    	; 0x227a <DIO_voidTogglePin+0xc6>
    2200:	4f c0       	rjmp	.+158    	; 0x22a0 <DIO_voidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_uint8_tpin); break;
    2202:	ab e3       	ldi	r26, 0x3B	; 59
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	eb e3       	ldi	r30, 0x3B	; 59
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	48 2f       	mov	r20, r24
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	02 2e       	mov	r0, r18
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <DIO_voidTogglePin+0x6c>
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	0a 94       	dec	r0
    2222:	e2 f7       	brpl	.-8      	; 0x221c <DIO_voidTogglePin+0x68>
    2224:	84 27       	eor	r24, r20
    2226:	8c 93       	st	X, r24
    2228:	3b c0       	rjmp	.+118    	; 0x22a0 <DIO_voidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_uint8_tpin); break;
    222a:	a8 e3       	ldi	r26, 0x38	; 56
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e8 e3       	ldi	r30, 0x38	; 56
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	48 2f       	mov	r20, r24
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	02 2e       	mov	r0, r18
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <DIO_voidTogglePin+0x94>
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	0a 94       	dec	r0
    224a:	e2 f7       	brpl	.-8      	; 0x2244 <DIO_voidTogglePin+0x90>
    224c:	84 27       	eor	r24, r20
    224e:	8c 93       	st	X, r24
    2250:	27 c0       	rjmp	.+78     	; 0x22a0 <DIO_voidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_uint8_tpin); break;
    2252:	a5 e3       	ldi	r26, 0x35	; 53
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e5 e3       	ldi	r30, 0x35	; 53
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	48 2f       	mov	r20, r24
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	02 2e       	mov	r0, r18
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <DIO_voidTogglePin+0xbc>
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	0a 94       	dec	r0
    2272:	e2 f7       	brpl	.-8      	; 0x226c <DIO_voidTogglePin+0xb8>
    2274:	84 27       	eor	r24, r20
    2276:	8c 93       	st	X, r24
    2278:	13 c0       	rjmp	.+38     	; 0x22a0 <DIO_voidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_uint8_tpin); break;
    227a:	a2 e3       	ldi	r26, 0x32	; 50
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e2 e3       	ldi	r30, 0x32	; 50
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	48 2f       	mov	r20, r24
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	02 2e       	mov	r0, r18
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <DIO_voidTogglePin+0xe4>
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	0a 94       	dec	r0
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <DIO_voidTogglePin+0xe0>
    229c:	84 27       	eor	r24, r20
    229e:	8c 93       	st	X, r24
		}

}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection	(uint8_t copy_u8port, uint8_t copy_U8state)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <DIO_VoidSetPortDirection+0x6>
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <DIO_VoidSetPortDirection+0x8>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <DIO_VoidSetPortDirection+0xa>
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	6a 83       	std	Y+2, r22	; 0x02
	
	if(OUTPUT==copy_U8state)
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	99 f5       	brne	.+102    	; 0x232c <DIO_VoidSetPortDirection+0x7e>
	{
		switch (copy_u8port)
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	3e 83       	std	Y+6, r19	; 0x06
    22ce:	2d 83       	std	Y+5, r18	; 0x05
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	81 30       	cpi	r24, 0x01	; 1
    22d6:	91 05       	cpc	r25, r1
    22d8:	d1 f0       	breq	.+52     	; 0x230e <DIO_VoidSetPortDirection+0x60>
    22da:	2d 81       	ldd	r18, Y+5	; 0x05
    22dc:	3e 81       	ldd	r19, Y+6	; 0x06
    22de:	22 30       	cpi	r18, 0x02	; 2
    22e0:	31 05       	cpc	r19, r1
    22e2:	2c f4       	brge	.+10     	; 0x22ee <DIO_VoidSetPortDirection+0x40>
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	9e 81       	ldd	r25, Y+6	; 0x06
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	61 f0       	breq	.+24     	; 0x2304 <DIO_VoidSetPortDirection+0x56>
    22ec:	50 c0       	rjmp	.+160    	; 0x238e <DIO_VoidSetPortDirection+0xe0>
    22ee:	2d 81       	ldd	r18, Y+5	; 0x05
    22f0:	3e 81       	ldd	r19, Y+6	; 0x06
    22f2:	22 30       	cpi	r18, 0x02	; 2
    22f4:	31 05       	cpc	r19, r1
    22f6:	81 f0       	breq	.+32     	; 0x2318 <DIO_VoidSetPortDirection+0x6a>
    22f8:	8d 81       	ldd	r24, Y+5	; 0x05
    22fa:	9e 81       	ldd	r25, Y+6	; 0x06
    22fc:	83 30       	cpi	r24, 0x03	; 3
    22fe:	91 05       	cpc	r25, r1
    2300:	81 f0       	breq	.+32     	; 0x2322 <DIO_VoidSetPortDirection+0x74>
    2302:	45 c0       	rjmp	.+138    	; 0x238e <DIO_VoidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_OUTPUT		; break;
    2304:	ea e3       	ldi	r30, 0x3A	; 58
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	8f ef       	ldi	r24, 0xFF	; 255
    230a:	80 83       	st	Z, r24
    230c:	40 c0       	rjmp	.+128    	; 0x238e <DIO_VoidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_OUTPUT		; break;
    230e:	e7 e3       	ldi	r30, 0x37	; 55
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	8f ef       	ldi	r24, 0xFF	; 255
    2314:	80 83       	st	Z, r24
    2316:	3b c0       	rjmp	.+118    	; 0x238e <DIO_VoidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_OUTPUT		; break;
    2318:	e4 e3       	ldi	r30, 0x34	; 52
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	8f ef       	ldi	r24, 0xFF	; 255
    231e:	80 83       	st	Z, r24
    2320:	36 c0       	rjmp	.+108    	; 0x238e <DIO_VoidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_OUTPUT		; break;
    2322:	e1 e3       	ldi	r30, 0x31	; 49
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	8f ef       	ldi	r24, 0xFF	; 255
    2328:	80 83       	st	Z, r24
    232a:	31 c0       	rjmp	.+98     	; 0x238e <DIO_VoidSetPortDirection+0xe0>
	
		}	
	}
	else if(INPUT==copy_U8state)
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	88 23       	and	r24, r24
    2330:	71 f5       	brne	.+92     	; 0x238e <DIO_VoidSetPortDirection+0xe0>
	{
		switch(copy_u8port)
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	3c 83       	std	Y+4, r19	; 0x04
    233a:	2b 83       	std	Y+3, r18	; 0x03
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	91 05       	cpc	r25, r1
    2344:	c9 f0       	breq	.+50     	; 0x2378 <DIO_VoidSetPortDirection+0xca>
    2346:	2b 81       	ldd	r18, Y+3	; 0x03
    2348:	3c 81       	ldd	r19, Y+4	; 0x04
    234a:	22 30       	cpi	r18, 0x02	; 2
    234c:	31 05       	cpc	r19, r1
    234e:	2c f4       	brge	.+10     	; 0x235a <DIO_VoidSetPortDirection+0xac>
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	61 f0       	breq	.+24     	; 0x2370 <DIO_VoidSetPortDirection+0xc2>
    2358:	1a c0       	rjmp	.+52     	; 0x238e <DIO_VoidSetPortDirection+0xe0>
    235a:	2b 81       	ldd	r18, Y+3	; 0x03
    235c:	3c 81       	ldd	r19, Y+4	; 0x04
    235e:	22 30       	cpi	r18, 0x02	; 2
    2360:	31 05       	cpc	r19, r1
    2362:	71 f0       	breq	.+28     	; 0x2380 <DIO_VoidSetPortDirection+0xd2>
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	83 30       	cpi	r24, 0x03	; 3
    236a:	91 05       	cpc	r25, r1
    236c:	69 f0       	breq	.+26     	; 0x2388 <DIO_VoidSetPortDirection+0xda>
    236e:	0f c0       	rjmp	.+30     	; 0x238e <DIO_VoidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_INPUT		; break;
    2370:	ea e3       	ldi	r30, 0x3A	; 58
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	10 82       	st	Z, r1
    2376:	0b c0       	rjmp	.+22     	; 0x238e <DIO_VoidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_INPUT		; break;
    2378:	e7 e3       	ldi	r30, 0x37	; 55
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	10 82       	st	Z, r1
    237e:	07 c0       	rjmp	.+14     	; 0x238e <DIO_VoidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_INPUT		; break;
    2380:	e4 e3       	ldi	r30, 0x34	; 52
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	10 82       	st	Z, r1
    2386:	03 c0       	rjmp	.+6      	; 0x238e <DIO_VoidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_INPUT		; break;
    2388:	e1 e3       	ldi	r30, 0x31	; 49
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	10 82       	st	Z, r1
	{
		
	}
	
	
}
    238e:	26 96       	adiw	r28, 0x06	; 6
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue		(uint8_t copy_u8port, uint8_t copy_U8value)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <DIO_VidSetPortValue+0x6>
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <DIO_VidSetPortValue+0x8>
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	6a 83       	std	Y+2, r22	; 0x02
		
		switch (copy_u8port)
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	3c 83       	std	Y+4, r19	; 0x04
    23b8:	2b 83       	std	Y+3, r18	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	81 30       	cpi	r24, 0x01	; 1
    23c0:	91 05       	cpc	r25, r1
    23c2:	d1 f0       	breq	.+52     	; 0x23f8 <DIO_VidSetPortValue+0x58>
    23c4:	2b 81       	ldd	r18, Y+3	; 0x03
    23c6:	3c 81       	ldd	r19, Y+4	; 0x04
    23c8:	22 30       	cpi	r18, 0x02	; 2
    23ca:	31 05       	cpc	r19, r1
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <DIO_VidSetPortValue+0x38>
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	61 f0       	breq	.+24     	; 0x23ee <DIO_VidSetPortValue+0x4e>
    23d6:	1e c0       	rjmp	.+60     	; 0x2414 <DIO_VidSetPortValue+0x74>
    23d8:	2b 81       	ldd	r18, Y+3	; 0x03
    23da:	3c 81       	ldd	r19, Y+4	; 0x04
    23dc:	22 30       	cpi	r18, 0x02	; 2
    23de:	31 05       	cpc	r19, r1
    23e0:	81 f0       	breq	.+32     	; 0x2402 <DIO_VidSetPortValue+0x62>
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	83 30       	cpi	r24, 0x03	; 3
    23e8:	91 05       	cpc	r25, r1
    23ea:	81 f0       	breq	.+32     	; 0x240c <DIO_VidSetPortValue+0x6c>
    23ec:	13 c0       	rjmp	.+38     	; 0x2414 <DIO_VidSetPortValue+0x74>
		{
			case PORTA:PORT_A=copy_U8value		; break;
    23ee:	eb e3       	ldi	r30, 0x3B	; 59
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	80 83       	st	Z, r24
    23f6:	0e c0       	rjmp	.+28     	; 0x2414 <DIO_VidSetPortValue+0x74>
			case PORTB:PORT_B=copy_U8value		; break;
    23f8:	e8 e3       	ldi	r30, 0x38	; 56
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	80 83       	st	Z, r24
    2400:	09 c0       	rjmp	.+18     	; 0x2414 <DIO_VidSetPortValue+0x74>
			case PORTC:PORT_C=copy_U8value		; break;
    2402:	e5 e3       	ldi	r30, 0x35	; 53
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	80 83       	st	Z, r24
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <DIO_VidSetPortValue+0x74>
			case PORTD:PORT_D=copy_U8value		; break;
    240c:	e2 e3       	ldi	r30, 0x32	; 50
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	80 83       	st	Z, r24
	
		}	
	
}
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <Keypad_init>:
									{'4','5','6','*'},
									{'1','2','3','-'},
									{'Q','0','=','+'}};

void Keypad_init(void)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	c0 54       	subi	r28, 0x40	; 64
    242c:	d0 40       	sbci	r29, 0x00	; 0
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
	ST_DIO_config_t Col0 = {COLS_ROWSPORT,COLS0,OUTPUT};
    2438:	ce 01       	movw	r24, r28
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	9a 8f       	std	Y+26, r25	; 0x1a
    243e:	89 8f       	std	Y+25, r24	; 0x19
    2440:	e2 ea       	ldi	r30, 0xA2	; 162
    2442:	f1 e0       	ldi	r31, 0x01	; 1
    2444:	fc 8f       	std	Y+28, r31	; 0x1c
    2446:	eb 8f       	std	Y+27, r30	; 0x1b
    2448:	f3 e0       	ldi	r31, 0x03	; 3
    244a:	fd 8f       	std	Y+29, r31	; 0x1d
    244c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    244e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2450:	00 80       	ld	r0, Z
    2452:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2454:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2456:	01 96       	adiw	r24, 0x01	; 1
    2458:	9c 8f       	std	Y+28, r25	; 0x1c
    245a:	8b 8f       	std	Y+27, r24	; 0x1b
    245c:	e9 8d       	ldd	r30, Y+25	; 0x19
    245e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2460:	00 82       	st	Z, r0
    2462:	89 8d       	ldd	r24, Y+25	; 0x19
    2464:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2466:	01 96       	adiw	r24, 0x01	; 1
    2468:	9a 8f       	std	Y+26, r25	; 0x1a
    246a:	89 8f       	std	Y+25, r24	; 0x19
    246c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    246e:	91 50       	subi	r25, 0x01	; 1
    2470:	9d 8f       	std	Y+29, r25	; 0x1d
    2472:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2474:	ee 23       	and	r30, r30
    2476:	51 f7       	brne	.-44     	; 0x244c <Keypad_init+0x2a>
	ST_DIO_config_t Col1 = {COLS_ROWSPORT,COLS1,OUTPUT};
    2478:	ce 01       	movw	r24, r28
    247a:	04 96       	adiw	r24, 0x04	; 4
    247c:	9f 8f       	std	Y+31, r25	; 0x1f
    247e:	8e 8f       	std	Y+30, r24	; 0x1e
    2480:	ef e9       	ldi	r30, 0x9F	; 159
    2482:	f1 e0       	ldi	r31, 0x01	; 1
    2484:	f9 a3       	std	Y+33, r31	; 0x21
    2486:	e8 a3       	std	Y+32, r30	; 0x20
    2488:	f3 e0       	ldi	r31, 0x03	; 3
    248a:	fa a3       	std	Y+34, r31	; 0x22
    248c:	e8 a1       	ldd	r30, Y+32	; 0x20
    248e:	f9 a1       	ldd	r31, Y+33	; 0x21
    2490:	00 80       	ld	r0, Z
    2492:	88 a1       	ldd	r24, Y+32	; 0x20
    2494:	99 a1       	ldd	r25, Y+33	; 0x21
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	99 a3       	std	Y+33, r25	; 0x21
    249a:	88 a3       	std	Y+32, r24	; 0x20
    249c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    249e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24a0:	00 82       	st	Z, r0
    24a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24a6:	01 96       	adiw	r24, 0x01	; 1
    24a8:	9f 8f       	std	Y+31, r25	; 0x1f
    24aa:	8e 8f       	std	Y+30, r24	; 0x1e
    24ac:	9a a1       	ldd	r25, Y+34	; 0x22
    24ae:	91 50       	subi	r25, 0x01	; 1
    24b0:	9a a3       	std	Y+34, r25	; 0x22
    24b2:	ea a1       	ldd	r30, Y+34	; 0x22
    24b4:	ee 23       	and	r30, r30
    24b6:	51 f7       	brne	.-44     	; 0x248c <Keypad_init+0x6a>
	ST_DIO_config_t Col2 = {COLS_ROWSPORT,COLS2,OUTPUT};
    24b8:	ce 01       	movw	r24, r28
    24ba:	07 96       	adiw	r24, 0x07	; 7
    24bc:	9c a3       	std	Y+36, r25	; 0x24
    24be:	8b a3       	std	Y+35, r24	; 0x23
    24c0:	ec e9       	ldi	r30, 0x9C	; 156
    24c2:	f1 e0       	ldi	r31, 0x01	; 1
    24c4:	fe a3       	std	Y+38, r31	; 0x26
    24c6:	ed a3       	std	Y+37, r30	; 0x25
    24c8:	f3 e0       	ldi	r31, 0x03	; 3
    24ca:	ff a3       	std	Y+39, r31	; 0x27
    24cc:	ed a1       	ldd	r30, Y+37	; 0x25
    24ce:	fe a1       	ldd	r31, Y+38	; 0x26
    24d0:	00 80       	ld	r0, Z
    24d2:	8d a1       	ldd	r24, Y+37	; 0x25
    24d4:	9e a1       	ldd	r25, Y+38	; 0x26
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	9e a3       	std	Y+38, r25	; 0x26
    24da:	8d a3       	std	Y+37, r24	; 0x25
    24dc:	eb a1       	ldd	r30, Y+35	; 0x23
    24de:	fc a1       	ldd	r31, Y+36	; 0x24
    24e0:	00 82       	st	Z, r0
    24e2:	8b a1       	ldd	r24, Y+35	; 0x23
    24e4:	9c a1       	ldd	r25, Y+36	; 0x24
    24e6:	01 96       	adiw	r24, 0x01	; 1
    24e8:	9c a3       	std	Y+36, r25	; 0x24
    24ea:	8b a3       	std	Y+35, r24	; 0x23
    24ec:	9f a1       	ldd	r25, Y+39	; 0x27
    24ee:	91 50       	subi	r25, 0x01	; 1
    24f0:	9f a3       	std	Y+39, r25	; 0x27
    24f2:	ef a1       	ldd	r30, Y+39	; 0x27
    24f4:	ee 23       	and	r30, r30
    24f6:	51 f7       	brne	.-44     	; 0x24cc <Keypad_init+0xaa>
	ST_DIO_config_t Col3 = {COLS_ROWSPORT,COLS3,OUTPUT};
    24f8:	ce 01       	movw	r24, r28
    24fa:	0a 96       	adiw	r24, 0x0a	; 10
    24fc:	99 a7       	std	Y+41, r25	; 0x29
    24fe:	88 a7       	std	Y+40, r24	; 0x28
    2500:	e9 e9       	ldi	r30, 0x99	; 153
    2502:	f1 e0       	ldi	r31, 0x01	; 1
    2504:	fb a7       	std	Y+43, r31	; 0x2b
    2506:	ea a7       	std	Y+42, r30	; 0x2a
    2508:	f3 e0       	ldi	r31, 0x03	; 3
    250a:	fc a7       	std	Y+44, r31	; 0x2c
    250c:	ea a5       	ldd	r30, Y+42	; 0x2a
    250e:	fb a5       	ldd	r31, Y+43	; 0x2b
    2510:	00 80       	ld	r0, Z
    2512:	8a a5       	ldd	r24, Y+42	; 0x2a
    2514:	9b a5       	ldd	r25, Y+43	; 0x2b
    2516:	01 96       	adiw	r24, 0x01	; 1
    2518:	9b a7       	std	Y+43, r25	; 0x2b
    251a:	8a a7       	std	Y+42, r24	; 0x2a
    251c:	e8 a5       	ldd	r30, Y+40	; 0x28
    251e:	f9 a5       	ldd	r31, Y+41	; 0x29
    2520:	00 82       	st	Z, r0
    2522:	88 a5       	ldd	r24, Y+40	; 0x28
    2524:	99 a5       	ldd	r25, Y+41	; 0x29
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	99 a7       	std	Y+41, r25	; 0x29
    252a:	88 a7       	std	Y+40, r24	; 0x28
    252c:	9c a5       	ldd	r25, Y+44	; 0x2c
    252e:	91 50       	subi	r25, 0x01	; 1
    2530:	9c a7       	std	Y+44, r25	; 0x2c
    2532:	ec a5       	ldd	r30, Y+44	; 0x2c
    2534:	ee 23       	and	r30, r30
    2536:	51 f7       	brne	.-44     	; 0x250c <Keypad_init+0xea>


	ST_DIO_config_t row0 = {COLS_ROWSPORT,ROW0,INPUT};
    2538:	ce 01       	movw	r24, r28
    253a:	0d 96       	adiw	r24, 0x0d	; 13
    253c:	9e a7       	std	Y+46, r25	; 0x2e
    253e:	8d a7       	std	Y+45, r24	; 0x2d
    2540:	e6 e9       	ldi	r30, 0x96	; 150
    2542:	f1 e0       	ldi	r31, 0x01	; 1
    2544:	f8 ab       	std	Y+48, r31	; 0x30
    2546:	ef a7       	std	Y+47, r30	; 0x2f
    2548:	f3 e0       	ldi	r31, 0x03	; 3
    254a:	f9 ab       	std	Y+49, r31	; 0x31
    254c:	ef a5       	ldd	r30, Y+47	; 0x2f
    254e:	f8 a9       	ldd	r31, Y+48	; 0x30
    2550:	00 80       	ld	r0, Z
    2552:	8f a5       	ldd	r24, Y+47	; 0x2f
    2554:	98 a9       	ldd	r25, Y+48	; 0x30
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	98 ab       	std	Y+48, r25	; 0x30
    255a:	8f a7       	std	Y+47, r24	; 0x2f
    255c:	ed a5       	ldd	r30, Y+45	; 0x2d
    255e:	fe a5       	ldd	r31, Y+46	; 0x2e
    2560:	00 82       	st	Z, r0
    2562:	8d a5       	ldd	r24, Y+45	; 0x2d
    2564:	9e a5       	ldd	r25, Y+46	; 0x2e
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	9e a7       	std	Y+46, r25	; 0x2e
    256a:	8d a7       	std	Y+45, r24	; 0x2d
    256c:	99 a9       	ldd	r25, Y+49	; 0x31
    256e:	91 50       	subi	r25, 0x01	; 1
    2570:	99 ab       	std	Y+49, r25	; 0x31
    2572:	e9 a9       	ldd	r30, Y+49	; 0x31
    2574:	ee 23       	and	r30, r30
    2576:	51 f7       	brne	.-44     	; 0x254c <Keypad_init+0x12a>
	ST_DIO_config_t row1 = {COLS_ROWSPORT,ROW1,INPUT};
    2578:	ce 01       	movw	r24, r28
    257a:	40 96       	adiw	r24, 0x10	; 16
    257c:	9b ab       	std	Y+51, r25	; 0x33
    257e:	8a ab       	std	Y+50, r24	; 0x32
    2580:	e3 e9       	ldi	r30, 0x93	; 147
    2582:	f1 e0       	ldi	r31, 0x01	; 1
    2584:	fd ab       	std	Y+53, r31	; 0x35
    2586:	ec ab       	std	Y+52, r30	; 0x34
    2588:	f3 e0       	ldi	r31, 0x03	; 3
    258a:	fe ab       	std	Y+54, r31	; 0x36
    258c:	ec a9       	ldd	r30, Y+52	; 0x34
    258e:	fd a9       	ldd	r31, Y+53	; 0x35
    2590:	00 80       	ld	r0, Z
    2592:	8c a9       	ldd	r24, Y+52	; 0x34
    2594:	9d a9       	ldd	r25, Y+53	; 0x35
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	9d ab       	std	Y+53, r25	; 0x35
    259a:	8c ab       	std	Y+52, r24	; 0x34
    259c:	ea a9       	ldd	r30, Y+50	; 0x32
    259e:	fb a9       	ldd	r31, Y+51	; 0x33
    25a0:	00 82       	st	Z, r0
    25a2:	8a a9       	ldd	r24, Y+50	; 0x32
    25a4:	9b a9       	ldd	r25, Y+51	; 0x33
    25a6:	01 96       	adiw	r24, 0x01	; 1
    25a8:	9b ab       	std	Y+51, r25	; 0x33
    25aa:	8a ab       	std	Y+50, r24	; 0x32
    25ac:	9e a9       	ldd	r25, Y+54	; 0x36
    25ae:	91 50       	subi	r25, 0x01	; 1
    25b0:	9e ab       	std	Y+54, r25	; 0x36
    25b2:	ee a9       	ldd	r30, Y+54	; 0x36
    25b4:	ee 23       	and	r30, r30
    25b6:	51 f7       	brne	.-44     	; 0x258c <Keypad_init+0x16a>
	ST_DIO_config_t row2 = {COLS_ROWSPORT,ROW2,INPUT};
    25b8:	ce 01       	movw	r24, r28
    25ba:	43 96       	adiw	r24, 0x13	; 19
    25bc:	98 af       	std	Y+56, r25	; 0x38
    25be:	8f ab       	std	Y+55, r24	; 0x37
    25c0:	e0 e9       	ldi	r30, 0x90	; 144
    25c2:	f1 e0       	ldi	r31, 0x01	; 1
    25c4:	fa af       	std	Y+58, r31	; 0x3a
    25c6:	e9 af       	std	Y+57, r30	; 0x39
    25c8:	f3 e0       	ldi	r31, 0x03	; 3
    25ca:	fb af       	std	Y+59, r31	; 0x3b
    25cc:	e9 ad       	ldd	r30, Y+57	; 0x39
    25ce:	fa ad       	ldd	r31, Y+58	; 0x3a
    25d0:	00 80       	ld	r0, Z
    25d2:	89 ad       	ldd	r24, Y+57	; 0x39
    25d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	9a af       	std	Y+58, r25	; 0x3a
    25da:	89 af       	std	Y+57, r24	; 0x39
    25dc:	ef a9       	ldd	r30, Y+55	; 0x37
    25de:	f8 ad       	ldd	r31, Y+56	; 0x38
    25e0:	00 82       	st	Z, r0
    25e2:	8f a9       	ldd	r24, Y+55	; 0x37
    25e4:	98 ad       	ldd	r25, Y+56	; 0x38
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	98 af       	std	Y+56, r25	; 0x38
    25ea:	8f ab       	std	Y+55, r24	; 0x37
    25ec:	9b ad       	ldd	r25, Y+59	; 0x3b
    25ee:	91 50       	subi	r25, 0x01	; 1
    25f0:	9b af       	std	Y+59, r25	; 0x3b
    25f2:	eb ad       	ldd	r30, Y+59	; 0x3b
    25f4:	ee 23       	and	r30, r30
    25f6:	51 f7       	brne	.-44     	; 0x25cc <Keypad_init+0x1aa>
	ST_DIO_config_t row3 = {COLS_ROWSPORT,ROW3,INPUT};
    25f8:	ce 01       	movw	r24, r28
    25fa:	46 96       	adiw	r24, 0x16	; 22
    25fc:	9d af       	std	Y+61, r25	; 0x3d
    25fe:	8c af       	std	Y+60, r24	; 0x3c
    2600:	ed e8       	ldi	r30, 0x8D	; 141
    2602:	f1 e0       	ldi	r31, 0x01	; 1
    2604:	ff af       	std	Y+63, r31	; 0x3f
    2606:	ee af       	std	Y+62, r30	; 0x3e
    2608:	f3 e0       	ldi	r31, 0x03	; 3
    260a:	21 96       	adiw	r28, 0x01	; 1
    260c:	ff af       	std	Y+63, r31	; 0x3f
    260e:	21 97       	sbiw	r28, 0x01	; 1
    2610:	ee ad       	ldd	r30, Y+62	; 0x3e
    2612:	ff ad       	ldd	r31, Y+63	; 0x3f
    2614:	00 80       	ld	r0, Z
    2616:	8e ad       	ldd	r24, Y+62	; 0x3e
    2618:	9f ad       	ldd	r25, Y+63	; 0x3f
    261a:	01 96       	adiw	r24, 0x01	; 1
    261c:	9f af       	std	Y+63, r25	; 0x3f
    261e:	8e af       	std	Y+62, r24	; 0x3e
    2620:	ec ad       	ldd	r30, Y+60	; 0x3c
    2622:	fd ad       	ldd	r31, Y+61	; 0x3d
    2624:	00 82       	st	Z, r0
    2626:	8c ad       	ldd	r24, Y+60	; 0x3c
    2628:	9d ad       	ldd	r25, Y+61	; 0x3d
    262a:	01 96       	adiw	r24, 0x01	; 1
    262c:	9d af       	std	Y+61, r25	; 0x3d
    262e:	8c af       	std	Y+60, r24	; 0x3c
    2630:	21 96       	adiw	r28, 0x01	; 1
    2632:	9f ad       	ldd	r25, Y+63	; 0x3f
    2634:	21 97       	sbiw	r28, 0x01	; 1
    2636:	91 50       	subi	r25, 0x01	; 1
    2638:	21 96       	adiw	r28, 0x01	; 1
    263a:	9f af       	std	Y+63, r25	; 0x3f
    263c:	21 97       	sbiw	r28, 0x01	; 1
    263e:	21 96       	adiw	r28, 0x01	; 1
    2640:	ef ad       	ldd	r30, Y+63	; 0x3f
    2642:	21 97       	sbiw	r28, 0x01	; 1
    2644:	ee 23       	and	r30, r30
    2646:	21 f7       	brne	.-56     	; 0x2610 <Keypad_init+0x1ee>

	DIO_voidSetPinDirection(&Col0);
    2648:	ce 01       	movw	r24, r28
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(&Col1);
    2650:	ce 01       	movw	r24, r28
    2652:	04 96       	adiw	r24, 0x04	; 4
    2654:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(&Col2);
    2658:	ce 01       	movw	r24, r28
    265a:	07 96       	adiw	r24, 0x07	; 7
    265c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(&Col3);
    2660:	ce 01       	movw	r24, r28
    2662:	0a 96       	adiw	r24, 0x0a	; 10
    2664:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(&row0);
    2668:	ce 01       	movw	r24, r28
    266a:	0d 96       	adiw	r24, 0x0d	; 13
    266c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(&row1);
    2670:	ce 01       	movw	r24, r28
    2672:	40 96       	adiw	r24, 0x10	; 16
    2674:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(&row2);
    2678:	ce 01       	movw	r24, r28
    267a:	43 96       	adiw	r24, 0x13	; 19
    267c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(&row3);
    2680:	ce 01       	movw	r24, r28
    2682:	46 96       	adiw	r24, 0x16	; 22
    2684:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
	
	DIO_voidSetPinValue(COLS_ROWSPORT,ROW0 ,HIGH);
    2688:	83 e0       	ldi	r24, 0x03	; 3
    268a:	64 e0       	ldi	r22, 0x04	; 4
    268c:	41 e0       	ldi	r20, 0x01	; 1
    268e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLS_ROWSPORT,ROW1 ,HIGH);
    2692:	83 e0       	ldi	r24, 0x03	; 3
    2694:	65 e0       	ldi	r22, 0x05	; 5
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLS_ROWSPORT,ROW2 ,HIGH);
    269c:	83 e0       	ldi	r24, 0x03	; 3
    269e:	66 e0       	ldi	r22, 0x06	; 6
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
  	DIO_voidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);
    26a6:	83 e0       	ldi	r24, 0x03	; 3
    26a8:	67 e0       	ldi	r22, 0x07	; 7
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(COLS_ROWSPORT,COLS0,HIGH);
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLS_ROWSPORT,COLS1,HIGH);
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	61 e0       	ldi	r22, 0x01	; 1
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLS_ROWSPORT,COLS2,HIGH);
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	62 e0       	ldi	r22, 0x02	; 2
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
  	DIO_voidSetPinValue(COLS_ROWSPORT,COLS3,HIGH);
    26ce:	83 e0       	ldi	r24, 0x03	; 3
    26d0:	63 e0       	ldi	r22, 0x03	; 3
    26d2:	41 e0       	ldi	r20, 0x01	; 1
    26d4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
}
    26d8:	c0 5c       	subi	r28, 0xC0	; 192
    26da:	df 4f       	sbci	r29, 0xFF	; 255
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <Keypad_u8ReadPin>:
uint8_t Keypad_u8ReadPin(void)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	62 97       	sbiw	r28, 0x12	; 18
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
	int result = DEFAULT_KEY ;
    2700:	83 e4       	ldi	r24, 0x43	; 67
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9a 8b       	std	Y+18, r25	; 0x12
    2706:	89 8b       	std	Y+17, r24	; 0x11

	DIO_voidSetPinValue(COLS_ROWSPORT,ROW0 ,HIGH);
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	64 e0       	ldi	r22, 0x04	; 4
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLS_ROWSPORT,ROW1 ,HIGH);
    2712:	83 e0       	ldi	r24, 0x03	; 3
    2714:	65 e0       	ldi	r22, 0x05	; 5
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLS_ROWSPORT,ROW2 ,HIGH);
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	66 e0       	ldi	r22, 0x06	; 6
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
  	DIO_voidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);
    2726:	83 e0       	ldi	r24, 0x03	; 3
    2728:	67 e0       	ldi	r22, 0x07	; 7
    272a:	41 e0       	ldi	r20, 0x01	; 1
    272c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
	for (uint8_t row = 0; row<ROWSHIFT; row++)
    2730:	18 8a       	std	Y+16, r1	; 0x10
    2732:	b0 c0       	rjmp	.+352    	; 0x2894 <Keypad_u8ReadPin+0x1a8>
	{
		DIO_voidSetPinValue(COLS_ROWSPORT,row,LOW);
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	68 89       	ldd	r22, Y+16	; 0x10
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
		for(uint8_t col = 0; col<ROWSHIFT; col++)
    273e:	1f 86       	std	Y+15, r1	; 0x0f
    2740:	9d c0       	rjmp	.+314    	; 0x287c <Keypad_u8ReadPin+0x190>
		{
			if(DIO_uint8_tGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)== 0)
    2742:	8f 85       	ldd	r24, Y+15	; 0x0f
    2744:	98 2f       	mov	r25, r24
    2746:	9c 5f       	subi	r25, 0xFC	; 252
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	69 2f       	mov	r22, r25
    274c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <DIO_uint8_tGetPinValue>
    2750:	88 23       	and	r24, r24
    2752:	09 f0       	breq	.+2      	; 0x2756 <Keypad_u8ReadPin+0x6a>
    2754:	90 c0       	rjmp	.+288    	; 0x2876 <Keypad_u8ReadPin+0x18a>
			{
				result = array_keypad[row][col];				
    2756:	88 89       	ldd	r24, Y+16	; 0x10
    2758:	48 2f       	mov	r20, r24
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	8f 85       	ldd	r24, Y+15	; 0x0f
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	ca 01       	movw	r24, r20
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	82 0f       	add	r24, r18
    276e:	93 1f       	adc	r25, r19
    2770:	fc 01       	movw	r30, r24
    2772:	e3 58       	subi	r30, 0x83	; 131
    2774:	fe 4f       	sbci	r31, 0xFE	; 254
    2776:	80 81       	ld	r24, Z
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9a 8b       	std	Y+18, r25	; 0x12
    277e:	89 8b       	std	Y+17, r24	; 0x11
				while(DIO_uint8_tGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)== 0);
    2780:	8f 85       	ldd	r24, Y+15	; 0x0f
    2782:	98 2f       	mov	r25, r24
    2784:	9c 5f       	subi	r25, 0xFC	; 252
    2786:	83 e0       	ldi	r24, 0x03	; 3
    2788:	69 2f       	mov	r22, r25
    278a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <DIO_uint8_tGetPinValue>
    278e:	88 23       	and	r24, r24
    2790:	b9 f3       	breq	.-18     	; 0x2780 <Keypad_u8ReadPin+0x94>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	a0 e2       	ldi	r26, 0x20	; 32
    2798:	b1 e4       	ldi	r27, 0x41	; 65
    279a:	8b 87       	std	Y+11, r24	; 0x0b
    279c:	9c 87       	std	Y+12, r25	; 0x0c
    279e:	ad 87       	std	Y+13, r26	; 0x0d
    27a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	4a ef       	ldi	r20, 0xFA	; 250
    27b0:	54 e4       	ldi	r21, 0x44	; 68
    27b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	8f 83       	std	Y+7, r24	; 0x07
    27bc:	98 87       	std	Y+8, r25	; 0x08
    27be:	a9 87       	std	Y+9, r26	; 0x09
    27c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c2:	6f 81       	ldd	r22, Y+7	; 0x07
    27c4:	78 85       	ldd	r23, Y+8	; 0x08
    27c6:	89 85       	ldd	r24, Y+9	; 0x09
    27c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e8       	ldi	r20, 0x80	; 128
    27d0:	5f e3       	ldi	r21, 0x3F	; 63
    27d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d6:	88 23       	and	r24, r24
    27d8:	2c f4       	brge	.+10     	; 0x27e4 <Keypad_u8ReadPin+0xf8>
		__ticks = 1;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
    27e2:	3f c0       	rjmp	.+126    	; 0x2862 <Keypad_u8ReadPin+0x176>
	else if (__tmp > 65535)
    27e4:	6f 81       	ldd	r22, Y+7	; 0x07
    27e6:	78 85       	ldd	r23, Y+8	; 0x08
    27e8:	89 85       	ldd	r24, Y+9	; 0x09
    27ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	3f ef       	ldi	r19, 0xFF	; 255
    27f0:	4f e7       	ldi	r20, 0x7F	; 127
    27f2:	57 e4       	ldi	r21, 0x47	; 71
    27f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f8:	18 16       	cp	r1, r24
    27fa:	4c f5       	brge	.+82     	; 0x284e <Keypad_u8ReadPin+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2800:	8d 85       	ldd	r24, Y+13	; 0x0d
    2802:	9e 85       	ldd	r25, Y+14	; 0x0e
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e2       	ldi	r20, 0x20	; 32
    280a:	51 e4       	ldi	r21, 0x41	; 65
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9e 83       	std	Y+6, r25	; 0x06
    2822:	8d 83       	std	Y+5, r24	; 0x05
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <Keypad_u8ReadPin+0x158>
    2826:	88 ec       	ldi	r24, 0xC8	; 200
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	9c 83       	std	Y+4, r25	; 0x04
    282c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	9c 81       	ldd	r25, Y+4	; 0x04
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <Keypad_u8ReadPin+0x146>
    2836:	9c 83       	std	Y+4, r25	; 0x04
    2838:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	9e 83       	std	Y+6, r25	; 0x06
    2842:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2844:	8d 81       	ldd	r24, Y+5	; 0x05
    2846:	9e 81       	ldd	r25, Y+6	; 0x06
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	69 f7       	brne	.-38     	; 0x2826 <Keypad_u8ReadPin+0x13a>
    284c:	14 c0       	rjmp	.+40     	; 0x2876 <Keypad_u8ReadPin+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284e:	6f 81       	ldd	r22, Y+7	; 0x07
    2850:	78 85       	ldd	r23, Y+8	; 0x08
    2852:	89 85       	ldd	r24, Y+9	; 0x09
    2854:	9a 85       	ldd	r25, Y+10	; 0x0a
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	9e 83       	std	Y+6, r25	; 0x06
    2860:	8d 83       	std	Y+5, r24	; 0x05
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	9a 83       	std	Y+2, r25	; 0x02
    2868:	89 83       	std	Y+1, r24	; 0x01
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <Keypad_u8ReadPin+0x182>
    2872:	9a 83       	std	Y+2, r25	; 0x02
    2874:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(COLS_ROWSPORT,ROW2 ,HIGH);
  	DIO_voidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);
	for (uint8_t row = 0; row<ROWSHIFT; row++)
	{
		DIO_voidSetPinValue(COLS_ROWSPORT,row,LOW);
		for(uint8_t col = 0; col<ROWSHIFT; col++)
    2876:	8f 85       	ldd	r24, Y+15	; 0x0f
    2878:	8f 5f       	subi	r24, 0xFF	; 255
    287a:	8f 87       	std	Y+15, r24	; 0x0f
    287c:	8f 85       	ldd	r24, Y+15	; 0x0f
    287e:	84 30       	cpi	r24, 0x04	; 4
    2880:	08 f4       	brcc	.+2      	; 0x2884 <Keypad_u8ReadPin+0x198>
    2882:	5f cf       	rjmp	.-322    	; 0x2742 <Keypad_u8ReadPin+0x56>
				while(DIO_uint8_tGetPinValue(COLS_ROWSPORT,col+ROWSHIFT)== 0);
				_delay_ms(10);	
			}
			
		}
		DIO_voidSetPinValue(COLS_ROWSPORT,row,HIGH);
    2884:	83 e0       	ldi	r24, 0x03	; 3
    2886:	68 89       	ldd	r22, Y+16	; 0x10
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(COLS_ROWSPORT,ROW0 ,HIGH);
	DIO_voidSetPinValue(COLS_ROWSPORT,ROW1 ,HIGH);
	DIO_voidSetPinValue(COLS_ROWSPORT,ROW2 ,HIGH);
  	DIO_voidSetPinValue(COLS_ROWSPORT,ROW3 ,HIGH);
	for (uint8_t row = 0; row<ROWSHIFT; row++)
    288e:	88 89       	ldd	r24, Y+16	; 0x10
    2890:	8f 5f       	subi	r24, 0xFF	; 255
    2892:	88 8b       	std	Y+16, r24	; 0x10
    2894:	88 89       	ldd	r24, Y+16	; 0x10
    2896:	84 30       	cpi	r24, 0x04	; 4
    2898:	08 f4       	brcc	.+2      	; 0x289c <Keypad_u8ReadPin+0x1b0>
    289a:	4c cf       	rjmp	.-360    	; 0x2734 <Keypad_u8ReadPin+0x48>
			}
			
		}
		DIO_voidSetPinValue(COLS_ROWSPORT,row,HIGH);
	}
	return result;
    289c:	89 89       	ldd	r24, Y+17	; 0x11

}
    289e:	62 96       	adiw	r28, 0x12	; 18
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <lcd_init>:
#define TWO_LINES_5X7_DOT_MATRIX    0x28
#define DISPLAY_ON_CURSOR_OFF       0x0c
#define DISPLAY_CLEAR               0x01
#define INCREMENT_CURSOR            0x06
void lcd_init(void)
{
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	c8 58       	subi	r28, 0x88	; 136
    28be:	d0 40       	sbci	r29, 0x00	; 0
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	fe 01       	movw	r30, r28
    28cc:	e3 59       	subi	r30, 0x93	; 147
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a0 e2       	ldi	r26, 0x20	; 32
    28d6:	b2 e4       	ldi	r27, 0x42	; 66
    28d8:	80 83       	st	Z, r24
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	a2 83       	std	Z+2, r26	; 0x02
    28de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e0:	8e 01       	movw	r16, r28
    28e2:	07 59       	subi	r16, 0x97	; 151
    28e4:	1f 4f       	sbci	r17, 0xFF	; 255
    28e6:	fe 01       	movw	r30, r28
    28e8:	e3 59       	subi	r30, 0x93	; 147
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4a ef       	ldi	r20, 0xFA	; 250
    28fa:	54 e4       	ldi	r21, 0x44	; 68
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	f8 01       	movw	r30, r16
    2906:	80 83       	st	Z, r24
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	a2 83       	std	Z+2, r26	; 0x02
    290c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    290e:	fe 01       	movw	r30, r28
    2910:	e7 59       	subi	r30, 0x97	; 151
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e8       	ldi	r20, 0x80	; 128
    2922:	5f e3       	ldi	r21, 0x3F	; 63
    2924:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2928:	88 23       	and	r24, r24
    292a:	44 f4       	brge	.+16     	; 0x293c <lcd_init+0x8c>
		__ticks = 1;
    292c:	fe 01       	movw	r30, r28
    292e:	e9 59       	subi	r30, 0x99	; 153
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
    293a:	64 c0       	rjmp	.+200    	; 0x2a04 <lcd_init+0x154>
	else if (__tmp > 65535)
    293c:	fe 01       	movw	r30, r28
    293e:	e7 59       	subi	r30, 0x97	; 151
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	93 81       	ldd	r25, Z+3	; 0x03
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	3f ef       	ldi	r19, 0xFF	; 255
    294e:	4f e7       	ldi	r20, 0x7F	; 127
    2950:	57 e4       	ldi	r21, 0x47	; 71
    2952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2956:	18 16       	cp	r1, r24
    2958:	0c f0       	brlt	.+2      	; 0x295c <lcd_init+0xac>
    295a:	43 c0       	rjmp	.+134    	; 0x29e2 <lcd_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295c:	fe 01       	movw	r30, r28
    295e:	e3 59       	subi	r30, 0x93	; 147
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	60 81       	ld	r22, Z
    2964:	71 81       	ldd	r23, Z+1	; 0x01
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e2       	ldi	r20, 0x20	; 32
    2970:	51 e4       	ldi	r21, 0x41	; 65
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	8e 01       	movw	r16, r28
    297c:	09 59       	subi	r16, 0x99	; 153
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	f8 01       	movw	r30, r16
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	1f c0       	rjmp	.+62     	; 0x29d2 <lcd_init+0x122>
    2994:	fe 01       	movw	r30, r28
    2996:	eb 59       	subi	r30, 0x9B	; 155
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	88 ec       	ldi	r24, 0xC8	; 200
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
    29a2:	fe 01       	movw	r30, r28
    29a4:	eb 59       	subi	r30, 0x9B	; 155
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <lcd_init+0xfc>
    29b0:	fe 01       	movw	r30, r28
    29b2:	eb 59       	subi	r30, 0x9B	; 155
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ba:	de 01       	movw	r26, r28
    29bc:	a9 59       	subi	r26, 0x99	; 153
    29be:	bf 4f       	sbci	r27, 0xFF	; 255
    29c0:	fe 01       	movw	r30, r28
    29c2:	e9 59       	subi	r30, 0x99	; 153
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	11 96       	adiw	r26, 0x01	; 1
    29ce:	9c 93       	st	X, r25
    29d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	fe 01       	movw	r30, r28
    29d4:	e9 59       	subi	r30, 0x99	; 153
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	d1 f6       	brne	.-76     	; 0x2994 <lcd_init+0xe4>
    29e0:	28 c0       	rjmp	.+80     	; 0x2a32 <lcd_init+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e2:	8e 01       	movw	r16, r28
    29e4:	09 59       	subi	r16, 0x99	; 153
    29e6:	1f 4f       	sbci	r17, 0xFF	; 255
    29e8:	fe 01       	movw	r30, r28
    29ea:	e7 59       	subi	r30, 0x97	; 151
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	f8 01       	movw	r30, r16
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	80 83       	st	Z, r24
    2a04:	de 01       	movw	r26, r28
    2a06:	ad 59       	subi	r26, 0x9D	; 157
    2a08:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e9 59       	subi	r30, 0x99	; 153
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	11 96       	adiw	r26, 0x01	; 1
    2a16:	9c 93       	st	X, r25
    2a18:	8e 93       	st	-X, r24
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	ed 59       	subi	r30, 0x9D	; 157
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <lcd_init+0x174>
    2a28:	fe 01       	movw	r30, r28
    2a2a:	ed 59       	subi	r30, 0x9D	; 157
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	80 83       	st	Z, r24
    _delay_ms(40);    
    ST_DIO_config_t rs_pin  = {LS_PIN,OUTPUT};
    2a32:	ce 01       	movw	r24, r28
    2a34:	8f 58       	subi	r24, 0x8F	; 143
    2a36:	9f 4f       	sbci	r25, 0xFF	; 255
    2a38:	ec 96       	adiw	r28, 0x3c	; 60
    2a3a:	9f af       	std	Y+63, r25	; 0x3f
    2a3c:	8e af       	std	Y+62, r24	; 0x3e
    2a3e:	ec 97       	sbiw	r28, 0x3c	; 60
    2a40:	8b ea       	ldi	r24, 0xAB	; 171
    2a42:	91 e0       	ldi	r25, 0x01	; 1
    2a44:	ee 96       	adiw	r28, 0x3e	; 62
    2a46:	9f af       	std	Y+63, r25	; 0x3f
    2a48:	8e af       	std	Y+62, r24	; 0x3e
    2a4a:	ee 97       	sbiw	r28, 0x3e	; 62
    2a4c:	93 e0       	ldi	r25, 0x03	; 3
    2a4e:	ef 96       	adiw	r28, 0x3f	; 63
    2a50:	9f af       	std	Y+63, r25	; 0x3f
    2a52:	ef 97       	sbiw	r28, 0x3f	; 63
    2a54:	ee 96       	adiw	r28, 0x3e	; 62
    2a56:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a58:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a5a:	ee 97       	sbiw	r28, 0x3e	; 62
    2a5c:	00 80       	ld	r0, Z
    2a5e:	ee 96       	adiw	r28, 0x3e	; 62
    2a60:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a62:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a64:	ee 97       	sbiw	r28, 0x3e	; 62
    2a66:	01 96       	adiw	r24, 0x01	; 1
    2a68:	ee 96       	adiw	r28, 0x3e	; 62
    2a6a:	9f af       	std	Y+63, r25	; 0x3f
    2a6c:	8e af       	std	Y+62, r24	; 0x3e
    2a6e:	ee 97       	sbiw	r28, 0x3e	; 62
    2a70:	ec 96       	adiw	r28, 0x3c	; 60
    2a72:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a74:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a76:	ec 97       	sbiw	r28, 0x3c	; 60
    2a78:	00 82       	st	Z, r0
    2a7a:	ec 96       	adiw	r28, 0x3c	; 60
    2a7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a80:	ec 97       	sbiw	r28, 0x3c	; 60
    2a82:	01 96       	adiw	r24, 0x01	; 1
    2a84:	ec 96       	adiw	r28, 0x3c	; 60
    2a86:	9f af       	std	Y+63, r25	; 0x3f
    2a88:	8e af       	std	Y+62, r24	; 0x3e
    2a8a:	ec 97       	sbiw	r28, 0x3c	; 60
    2a8c:	ef 96       	adiw	r28, 0x3f	; 63
    2a8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a90:	ef 97       	sbiw	r28, 0x3f	; 63
    2a92:	91 50       	subi	r25, 0x01	; 1
    2a94:	ef 96       	adiw	r28, 0x3f	; 63
    2a96:	9f af       	std	Y+63, r25	; 0x3f
    2a98:	ef 97       	sbiw	r28, 0x3f	; 63
    2a9a:	ef 96       	adiw	r28, 0x3f	; 63
    2a9c:	ef ad       	ldd	r30, Y+63	; 0x3f
    2a9e:	ef 97       	sbiw	r28, 0x3f	; 63
    2aa0:	ee 23       	and	r30, r30
    2aa2:	c1 f6       	brne	.-80     	; 0x2a54 <lcd_init+0x1a4>
    ST_DIO_config_t E_pin   = {EN_PIN,OUTPUT};    
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	8c 58       	subi	r24, 0x8C	; 140
    2aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aaa:	c1 58       	subi	r28, 0x81	; 129
    2aac:	df 4f       	sbci	r29, 0xFF	; 255
    2aae:	99 83       	std	Y+1, r25	; 0x01
    2ab0:	88 83       	st	Y, r24
    2ab2:	cf 57       	subi	r28, 0x7F	; 127
    2ab4:	d0 40       	sbci	r29, 0x00	; 0
    2ab6:	88 ea       	ldi	r24, 0xA8	; 168
    2ab8:	91 e0       	ldi	r25, 0x01	; 1
    2aba:	cf 57       	subi	r28, 0x7F	; 127
    2abc:	df 4f       	sbci	r29, 0xFF	; 255
    2abe:	99 83       	std	Y+1, r25	; 0x01
    2ac0:	88 83       	st	Y, r24
    2ac2:	c1 58       	subi	r28, 0x81	; 129
    2ac4:	d0 40       	sbci	r29, 0x00	; 0
    2ac6:	93 e0       	ldi	r25, 0x03	; 3
    2ac8:	cd 57       	subi	r28, 0x7D	; 125
    2aca:	df 4f       	sbci	r29, 0xFF	; 255
    2acc:	98 83       	st	Y, r25
    2ace:	c3 58       	subi	r28, 0x83	; 131
    2ad0:	d0 40       	sbci	r29, 0x00	; 0
    2ad2:	cf 57       	subi	r28, 0x7F	; 127
    2ad4:	df 4f       	sbci	r29, 0xFF	; 255
    2ad6:	e8 81       	ld	r30, Y
    2ad8:	f9 81       	ldd	r31, Y+1	; 0x01
    2ada:	c1 58       	subi	r28, 0x81	; 129
    2adc:	d0 40       	sbci	r29, 0x00	; 0
    2ade:	00 80       	ld	r0, Z
    2ae0:	cf 57       	subi	r28, 0x7F	; 127
    2ae2:	df 4f       	sbci	r29, 0xFF	; 255
    2ae4:	88 81       	ld	r24, Y
    2ae6:	99 81       	ldd	r25, Y+1	; 0x01
    2ae8:	c1 58       	subi	r28, 0x81	; 129
    2aea:	d0 40       	sbci	r29, 0x00	; 0
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	cf 57       	subi	r28, 0x7F	; 127
    2af0:	df 4f       	sbci	r29, 0xFF	; 255
    2af2:	99 83       	std	Y+1, r25	; 0x01
    2af4:	88 83       	st	Y, r24
    2af6:	c1 58       	subi	r28, 0x81	; 129
    2af8:	d0 40       	sbci	r29, 0x00	; 0
    2afa:	c1 58       	subi	r28, 0x81	; 129
    2afc:	df 4f       	sbci	r29, 0xFF	; 255
    2afe:	e8 81       	ld	r30, Y
    2b00:	f9 81       	ldd	r31, Y+1	; 0x01
    2b02:	cf 57       	subi	r28, 0x7F	; 127
    2b04:	d0 40       	sbci	r29, 0x00	; 0
    2b06:	00 82       	st	Z, r0
    2b08:	c1 58       	subi	r28, 0x81	; 129
    2b0a:	df 4f       	sbci	r29, 0xFF	; 255
    2b0c:	88 81       	ld	r24, Y
    2b0e:	99 81       	ldd	r25, Y+1	; 0x01
    2b10:	cf 57       	subi	r28, 0x7F	; 127
    2b12:	d0 40       	sbci	r29, 0x00	; 0
    2b14:	01 96       	adiw	r24, 0x01	; 1
    2b16:	c1 58       	subi	r28, 0x81	; 129
    2b18:	df 4f       	sbci	r29, 0xFF	; 255
    2b1a:	99 83       	std	Y+1, r25	; 0x01
    2b1c:	88 83       	st	Y, r24
    2b1e:	cf 57       	subi	r28, 0x7F	; 127
    2b20:	d0 40       	sbci	r29, 0x00	; 0
    2b22:	cd 57       	subi	r28, 0x7D	; 125
    2b24:	df 4f       	sbci	r29, 0xFF	; 255
    2b26:	98 81       	ld	r25, Y
    2b28:	c3 58       	subi	r28, 0x83	; 131
    2b2a:	d0 40       	sbci	r29, 0x00	; 0
    2b2c:	91 50       	subi	r25, 0x01	; 1
    2b2e:	cd 57       	subi	r28, 0x7D	; 125
    2b30:	df 4f       	sbci	r29, 0xFF	; 255
    2b32:	98 83       	st	Y, r25
    2b34:	c3 58       	subi	r28, 0x83	; 131
    2b36:	d0 40       	sbci	r29, 0x00	; 0
    2b38:	cd 57       	subi	r28, 0x7D	; 125
    2b3a:	df 4f       	sbci	r29, 0xFF	; 255
    2b3c:	e8 81       	ld	r30, Y
    2b3e:	c3 58       	subi	r28, 0x83	; 131
    2b40:	d0 40       	sbci	r29, 0x00	; 0
    2b42:	ee 23       	and	r30, r30
    2b44:	31 f6       	brne	.-116    	; 0x2ad2 <lcd_init+0x222>
    ST_DIO_config_t R_W_pin = {R_W_PIN,OUTPUT};
    2b46:	ce 01       	movw	r24, r28
    2b48:	89 58       	subi	r24, 0x89	; 137
    2b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4c:	cc 57       	subi	r28, 0x7C	; 124
    2b4e:	df 4f       	sbci	r29, 0xFF	; 255
    2b50:	99 83       	std	Y+1, r25	; 0x01
    2b52:	88 83       	st	Y, r24
    2b54:	c4 58       	subi	r28, 0x84	; 132
    2b56:	d0 40       	sbci	r29, 0x00	; 0
    2b58:	85 ea       	ldi	r24, 0xA5	; 165
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	ca 57       	subi	r28, 0x7A	; 122
    2b5e:	df 4f       	sbci	r29, 0xFF	; 255
    2b60:	99 83       	std	Y+1, r25	; 0x01
    2b62:	88 83       	st	Y, r24
    2b64:	c6 58       	subi	r28, 0x86	; 134
    2b66:	d0 40       	sbci	r29, 0x00	; 0
    2b68:	93 e0       	ldi	r25, 0x03	; 3
    2b6a:	c8 57       	subi	r28, 0x78	; 120
    2b6c:	df 4f       	sbci	r29, 0xFF	; 255
    2b6e:	98 83       	st	Y, r25
    2b70:	c8 58       	subi	r28, 0x88	; 136
    2b72:	d0 40       	sbci	r29, 0x00	; 0
    2b74:	ca 57       	subi	r28, 0x7A	; 122
    2b76:	df 4f       	sbci	r29, 0xFF	; 255
    2b78:	e8 81       	ld	r30, Y
    2b7a:	f9 81       	ldd	r31, Y+1	; 0x01
    2b7c:	c6 58       	subi	r28, 0x86	; 134
    2b7e:	d0 40       	sbci	r29, 0x00	; 0
    2b80:	00 80       	ld	r0, Z
    2b82:	ca 57       	subi	r28, 0x7A	; 122
    2b84:	df 4f       	sbci	r29, 0xFF	; 255
    2b86:	88 81       	ld	r24, Y
    2b88:	99 81       	ldd	r25, Y+1	; 0x01
    2b8a:	c6 58       	subi	r28, 0x86	; 134
    2b8c:	d0 40       	sbci	r29, 0x00	; 0
    2b8e:	01 96       	adiw	r24, 0x01	; 1
    2b90:	ca 57       	subi	r28, 0x7A	; 122
    2b92:	df 4f       	sbci	r29, 0xFF	; 255
    2b94:	99 83       	std	Y+1, r25	; 0x01
    2b96:	88 83       	st	Y, r24
    2b98:	c6 58       	subi	r28, 0x86	; 134
    2b9a:	d0 40       	sbci	r29, 0x00	; 0
    2b9c:	cc 57       	subi	r28, 0x7C	; 124
    2b9e:	df 4f       	sbci	r29, 0xFF	; 255
    2ba0:	e8 81       	ld	r30, Y
    2ba2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ba4:	c4 58       	subi	r28, 0x84	; 132
    2ba6:	d0 40       	sbci	r29, 0x00	; 0
    2ba8:	00 82       	st	Z, r0
    2baa:	cc 57       	subi	r28, 0x7C	; 124
    2bac:	df 4f       	sbci	r29, 0xFF	; 255
    2bae:	88 81       	ld	r24, Y
    2bb0:	99 81       	ldd	r25, Y+1	; 0x01
    2bb2:	c4 58       	subi	r28, 0x84	; 132
    2bb4:	d0 40       	sbci	r29, 0x00	; 0
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	cc 57       	subi	r28, 0x7C	; 124
    2bba:	df 4f       	sbci	r29, 0xFF	; 255
    2bbc:	99 83       	std	Y+1, r25	; 0x01
    2bbe:	88 83       	st	Y, r24
    2bc0:	c4 58       	subi	r28, 0x84	; 132
    2bc2:	d0 40       	sbci	r29, 0x00	; 0
    2bc4:	c8 57       	subi	r28, 0x78	; 120
    2bc6:	df 4f       	sbci	r29, 0xFF	; 255
    2bc8:	98 81       	ld	r25, Y
    2bca:	c8 58       	subi	r28, 0x88	; 136
    2bcc:	d0 40       	sbci	r29, 0x00	; 0
    2bce:	91 50       	subi	r25, 0x01	; 1
    2bd0:	c8 57       	subi	r28, 0x78	; 120
    2bd2:	df 4f       	sbci	r29, 0xFF	; 255
    2bd4:	98 83       	st	Y, r25
    2bd6:	c8 58       	subi	r28, 0x88	; 136
    2bd8:	d0 40       	sbci	r29, 0x00	; 0
    2bda:	c8 57       	subi	r28, 0x78	; 120
    2bdc:	df 4f       	sbci	r29, 0xFF	; 255
    2bde:	e8 81       	ld	r30, Y
    2be0:	c8 58       	subi	r28, 0x88	; 136
    2be2:	d0 40       	sbci	r29, 0x00	; 0
    2be4:	ee 23       	and	r30, r30
    2be6:	31 f6       	brne	.-116    	; 0x2b74 <lcd_init+0x2c4>

    DIO_voidSetPinDirection(&rs_pin);
    2be8:	ce 01       	movw	r24, r28
    2bea:	8f 58       	subi	r24, 0x8F	; 143
    2bec:	9f 4f       	sbci	r25, 0xFF	; 255
    2bee:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(&R_W_pin);
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	89 58       	subi	r24, 0x89	; 137
    2bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf8:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(&E_pin);	
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	8c 58       	subi	r24, 0x8C	; 140
    2c00:	9f 4f       	sbci	r25, 0xFF	; 255
    2c02:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
    2c06:	fe 01       	movw	r30, r28
    2c08:	e1 5a       	subi	r30, 0xA1	; 161
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	a0 ea       	ldi	r26, 0xA0	; 160
    2c12:	b0 e4       	ldi	r27, 0x40	; 64
    2c14:	80 83       	st	Z, r24
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	a2 83       	std	Z+2, r26	; 0x02
    2c1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1c:	8e 01       	movw	r16, r28
    2c1e:	05 5a       	subi	r16, 0xA5	; 165
    2c20:	1f 4f       	sbci	r17, 0xFF	; 255
    2c22:	fe 01       	movw	r30, r28
    2c24:	e1 5a       	subi	r30, 0xA1	; 161
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	60 81       	ld	r22, Z
    2c2a:	71 81       	ldd	r23, Z+1	; 0x01
    2c2c:	82 81       	ldd	r24, Z+2	; 0x02
    2c2e:	93 81       	ldd	r25, Z+3	; 0x03
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	4a ef       	ldi	r20, 0xFA	; 250
    2c36:	54 e4       	ldi	r21, 0x44	; 68
    2c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	f8 01       	movw	r30, r16
    2c42:	80 83       	st	Z, r24
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	a2 83       	std	Z+2, r26	; 0x02
    2c48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e5 5a       	subi	r30, 0xA5	; 165
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	60 81       	ld	r22, Z
    2c52:	71 81       	ldd	r23, Z+1	; 0x01
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	93 81       	ldd	r25, Z+3	; 0x03
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	40 e8       	ldi	r20, 0x80	; 128
    2c5e:	5f e3       	ldi	r21, 0x3F	; 63
    2c60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c64:	88 23       	and	r24, r24
    2c66:	44 f4       	brge	.+16     	; 0x2c78 <lcd_init+0x3c8>
		__ticks = 1;
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e7 5a       	subi	r30, 0xA7	; 167
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	80 83       	st	Z, r24
    2c76:	64 c0       	rjmp	.+200    	; 0x2d40 <lcd_init+0x490>
	else if (__tmp > 65535)
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e5 5a       	subi	r30, 0xA5	; 165
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	3f ef       	ldi	r19, 0xFF	; 255
    2c8a:	4f e7       	ldi	r20, 0x7F	; 127
    2c8c:	57 e4       	ldi	r21, 0x47	; 71
    2c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c92:	18 16       	cp	r1, r24
    2c94:	0c f0       	brlt	.+2      	; 0x2c98 <lcd_init+0x3e8>
    2c96:	43 c0       	rjmp	.+134    	; 0x2d1e <lcd_init+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e1 5a       	subi	r30, 0xA1	; 161
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	60 81       	ld	r22, Z
    2ca0:	71 81       	ldd	r23, Z+1	; 0x01
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	93 81       	ldd	r25, Z+3	; 0x03
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e2       	ldi	r20, 0x20	; 32
    2cac:	51 e4       	ldi	r21, 0x41	; 65
    2cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	8e 01       	movw	r16, r28
    2cb8:	07 5a       	subi	r16, 0xA7	; 167
    2cba:	1f 4f       	sbci	r17, 0xFF	; 255
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	f8 01       	movw	r30, r16
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	80 83       	st	Z, r24
    2cce:	1f c0       	rjmp	.+62     	; 0x2d0e <lcd_init+0x45e>
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e9 5a       	subi	r30, 0xA9	; 169
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	88 ec       	ldi	r24, 0xC8	; 200
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	80 83       	st	Z, r24
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e9 5a       	subi	r30, 0xA9	; 169
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <lcd_init+0x438>
    2cec:	fe 01       	movw	r30, r28
    2cee:	e9 5a       	subi	r30, 0xA9	; 169
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	91 83       	std	Z+1, r25	; 0x01
    2cf4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf6:	de 01       	movw	r26, r28
    2cf8:	a7 5a       	subi	r26, 0xA7	; 167
    2cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	e7 5a       	subi	r30, 0xA7	; 167
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 81       	ld	r24, Z
    2d04:	91 81       	ldd	r25, Z+1	; 0x01
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	11 96       	adiw	r26, 0x01	; 1
    2d0a:	9c 93       	st	X, r25
    2d0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e7 5a       	subi	r30, 0xA7	; 167
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	d1 f6       	brne	.-76     	; 0x2cd0 <lcd_init+0x420>
    2d1c:	27 c0       	rjmp	.+78     	; 0x2d6c <lcd_init+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1e:	8e 01       	movw	r16, r28
    2d20:	07 5a       	subi	r16, 0xA7	; 167
    2d22:	1f 4f       	sbci	r17, 0xFF	; 255
    2d24:	fe 01       	movw	r30, r28
    2d26:	e5 5a       	subi	r30, 0xA5	; 165
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	f8 01       	movw	r30, r16
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	80 83       	st	Z, r24
    2d40:	de 01       	movw	r26, r28
    2d42:	ab 5a       	subi	r26, 0xAB	; 171
    2d44:	bf 4f       	sbci	r27, 0xFF	; 255
    2d46:	fe 01       	movw	r30, r28
    2d48:	e7 5a       	subi	r30, 0xA7	; 167
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	91 81       	ldd	r25, Z+1	; 0x01
    2d50:	8d 93       	st	X+, r24
    2d52:	9c 93       	st	X, r25
    2d54:	fe 01       	movw	r30, r28
    2d56:	eb 5a       	subi	r30, 0xAB	; 171
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 81       	ld	r24, Z
    2d5c:	91 81       	ldd	r25, Z+1	; 0x01
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <lcd_init+0x4ae>
    2d62:	fe 01       	movw	r30, r28
    2d64:	eb 5a       	subi	r30, 0xAB	; 171
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	91 83       	std	Z+1, r25	; 0x01
    2d6a:	80 83       	st	Z, r24
	_delay_ms(5);	
    DIO_VoidSetPortDirection(LCD_DATA_PORT,OUTPUT);
    2d6c:	82 e0       	ldi	r24, 0x02	; 2
    2d6e:	61 e0       	ldi	r22, 0x01	; 1
    2d70:	0e 94 57 11 	call	0x22ae	; 0x22ae <DIO_VoidSetPortDirection>

    lcd_command(0x33);
    2d74:	83 e3       	ldi	r24, 0x33	; 51
    2d76:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <lcd_command>
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	ef 5a       	subi	r30, 0xAF	; 175
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	a0 e0       	ldi	r26, 0x00	; 0
    2d86:	b0 e4       	ldi	r27, 0x40	; 64
    2d88:	80 83       	st	Z, r24
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	a2 83       	std	Z+2, r26	; 0x02
    2d8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d90:	8e 01       	movw	r16, r28
    2d92:	03 5b       	subi	r16, 0xB3	; 179
    2d94:	1f 4f       	sbci	r17, 0xFF	; 255
    2d96:	fe 01       	movw	r30, r28
    2d98:	ef 5a       	subi	r30, 0xAF	; 175
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	60 81       	ld	r22, Z
    2d9e:	71 81       	ldd	r23, Z+1	; 0x01
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	93 81       	ldd	r25, Z+3	; 0x03
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	4a ef       	ldi	r20, 0xFA	; 250
    2daa:	54 e4       	ldi	r21, 0x44	; 68
    2dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	f8 01       	movw	r30, r16
    2db6:	80 83       	st	Z, r24
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	a2 83       	std	Z+2, r26	; 0x02
    2dbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e3 5b       	subi	r30, 0xB3	; 179
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	60 81       	ld	r22, Z
    2dc6:	71 81       	ldd	r23, Z+1	; 0x01
    2dc8:	82 81       	ldd	r24, Z+2	; 0x02
    2dca:	93 81       	ldd	r25, Z+3	; 0x03
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e8       	ldi	r20, 0x80	; 128
    2dd2:	5f e3       	ldi	r21, 0x3F	; 63
    2dd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd8:	88 23       	and	r24, r24
    2dda:	44 f4       	brge	.+16     	; 0x2dec <lcd_init+0x53c>
		__ticks = 1;
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e5 5b       	subi	r30, 0xB5	; 181
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	80 83       	st	Z, r24
    2dea:	64 c0       	rjmp	.+200    	; 0x2eb4 <lcd_init+0x604>
	else if (__tmp > 65535)
    2dec:	fe 01       	movw	r30, r28
    2dee:	e3 5b       	subi	r30, 0xB3	; 179
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	3f ef       	ldi	r19, 0xFF	; 255
    2dfe:	4f e7       	ldi	r20, 0x7F	; 127
    2e00:	57 e4       	ldi	r21, 0x47	; 71
    2e02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e06:	18 16       	cp	r1, r24
    2e08:	0c f0       	brlt	.+2      	; 0x2e0c <lcd_init+0x55c>
    2e0a:	43 c0       	rjmp	.+134    	; 0x2e92 <lcd_init+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ef 5a       	subi	r30, 0xAF	; 175
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	60 81       	ld	r22, Z
    2e14:	71 81       	ldd	r23, Z+1	; 0x01
    2e16:	82 81       	ldd	r24, Z+2	; 0x02
    2e18:	93 81       	ldd	r25, Z+3	; 0x03
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e2       	ldi	r20, 0x20	; 32
    2e20:	51 e4       	ldi	r21, 0x41	; 65
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	8e 01       	movw	r16, r28
    2e2c:	05 5b       	subi	r16, 0xB5	; 181
    2e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e30:	bc 01       	movw	r22, r24
    2e32:	cd 01       	movw	r24, r26
    2e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	f8 01       	movw	r30, r16
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
    2e42:	1f c0       	rjmp	.+62     	; 0x2e82 <lcd_init+0x5d2>
    2e44:	fe 01       	movw	r30, r28
    2e46:	e7 5b       	subi	r30, 0xB7	; 183
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	88 ec       	ldi	r24, 0xC8	; 200
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	80 83       	st	Z, r24
    2e52:	fe 01       	movw	r30, r28
    2e54:	e7 5b       	subi	r30, 0xB7	; 183
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	80 81       	ld	r24, Z
    2e5a:	91 81       	ldd	r25, Z+1	; 0x01
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <lcd_init+0x5ac>
    2e60:	fe 01       	movw	r30, r28
    2e62:	e7 5b       	subi	r30, 0xB7	; 183
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6a:	de 01       	movw	r26, r28
    2e6c:	a5 5b       	subi	r26, 0xB5	; 181
    2e6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e70:	fe 01       	movw	r30, r28
    2e72:	e5 5b       	subi	r30, 0xB5	; 181
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 81       	ld	r24, Z
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	11 96       	adiw	r26, 0x01	; 1
    2e7e:	9c 93       	st	X, r25
    2e80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e82:	fe 01       	movw	r30, r28
    2e84:	e5 5b       	subi	r30, 0xB5	; 181
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	80 81       	ld	r24, Z
    2e8a:	91 81       	ldd	r25, Z+1	; 0x01
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	d1 f6       	brne	.-76     	; 0x2e44 <lcd_init+0x594>
    2e90:	27 c0       	rjmp	.+78     	; 0x2ee0 <lcd_init+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e92:	8e 01       	movw	r16, r28
    2e94:	05 5b       	subi	r16, 0xB5	; 181
    2e96:	1f 4f       	sbci	r17, 0xFF	; 255
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e3 5b       	subi	r30, 0xB3	; 179
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	60 81       	ld	r22, Z
    2ea0:	71 81       	ldd	r23, Z+1	; 0x01
    2ea2:	82 81       	ldd	r24, Z+2	; 0x02
    2ea4:	93 81       	ldd	r25, Z+3	; 0x03
    2ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	f8 01       	movw	r30, r16
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	80 83       	st	Z, r24
    2eb4:	de 01       	movw	r26, r28
    2eb6:	a9 5b       	subi	r26, 0xB9	; 185
    2eb8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eba:	fe 01       	movw	r30, r28
    2ebc:	e5 5b       	subi	r30, 0xB5	; 181
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	80 81       	ld	r24, Z
    2ec2:	91 81       	ldd	r25, Z+1	; 0x01
    2ec4:	8d 93       	st	X+, r24
    2ec6:	9c 93       	st	X, r25
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e9 5b       	subi	r30, 0xB9	; 185
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 81       	ld	r24, Z
    2ed0:	91 81       	ldd	r25, Z+1	; 0x01
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <lcd_init+0x622>
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e9 5b       	subi	r30, 0xB9	; 185
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	91 83       	std	Z+1, r25	; 0x01
    2ede:	80 83       	st	Z, r24
    _delay_ms(2);	
    lcd_command(0x32);    
    2ee0:	82 e3       	ldi	r24, 0x32	; 50
    2ee2:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <lcd_command>
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ed 5b       	subi	r30, 0xBD	; 189
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	a0 e0       	ldi	r26, 0x00	; 0
    2ef2:	b0 e4       	ldi	r27, 0x40	; 64
    2ef4:	80 83       	st	Z, r24
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	a2 83       	std	Z+2, r26	; 0x02
    2efa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efc:	8e 01       	movw	r16, r28
    2efe:	01 5c       	subi	r16, 0xC1	; 193
    2f00:	1f 4f       	sbci	r17, 0xFF	; 255
    2f02:	fe 01       	movw	r30, r28
    2f04:	ed 5b       	subi	r30, 0xBD	; 189
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	60 81       	ld	r22, Z
    2f0a:	71 81       	ldd	r23, Z+1	; 0x01
    2f0c:	82 81       	ldd	r24, Z+2	; 0x02
    2f0e:	93 81       	ldd	r25, Z+3	; 0x03
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	4a ef       	ldi	r20, 0xFA	; 250
    2f16:	54 e4       	ldi	r21, 0x44	; 68
    2f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	f8 01       	movw	r30, r16
    2f22:	80 83       	st	Z, r24
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	a2 83       	std	Z+2, r26	; 0x02
    2f28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ff 96       	adiw	r30, 0x3f	; 63
    2f2e:	60 81       	ld	r22, Z
    2f30:	71 81       	ldd	r23, Z+1	; 0x01
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e8       	ldi	r20, 0x80	; 128
    2f3c:	5f e3       	ldi	r21, 0x3F	; 63
    2f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f42:	88 23       	and	r24, r24
    2f44:	2c f4       	brge	.+10     	; 0x2f50 <lcd_init+0x6a0>
		__ticks = 1;
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	9e af       	std	Y+62, r25	; 0x3e
    2f4c:	8d af       	std	Y+61, r24	; 0x3d
    2f4e:	46 c0       	rjmp	.+140    	; 0x2fdc <lcd_init+0x72c>
	else if (__tmp > 65535)
    2f50:	fe 01       	movw	r30, r28
    2f52:	ff 96       	adiw	r30, 0x3f	; 63
    2f54:	60 81       	ld	r22, Z
    2f56:	71 81       	ldd	r23, Z+1	; 0x01
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	93 81       	ldd	r25, Z+3	; 0x03
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	3f ef       	ldi	r19, 0xFF	; 255
    2f60:	4f e7       	ldi	r20, 0x7F	; 127
    2f62:	57 e4       	ldi	r21, 0x47	; 71
    2f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f68:	18 16       	cp	r1, r24
    2f6a:	64 f5       	brge	.+88     	; 0x2fc4 <lcd_init+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	ed 5b       	subi	r30, 0xBD	; 189
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	60 81       	ld	r22, Z
    2f74:	71 81       	ldd	r23, Z+1	; 0x01
    2f76:	82 81       	ldd	r24, Z+2	; 0x02
    2f78:	93 81       	ldd	r25, Z+3	; 0x03
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e2       	ldi	r20, 0x20	; 32
    2f80:	51 e4       	ldi	r21, 0x41	; 65
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	9e af       	std	Y+62, r25	; 0x3e
    2f98:	8d af       	std	Y+61, r24	; 0x3d
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <lcd_init+0x70a>
    2f9c:	88 ec       	ldi	r24, 0xC8	; 200
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9c af       	std	Y+60, r25	; 0x3c
    2fa2:	8b af       	std	Y+59, r24	; 0x3b
    2fa4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fa6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <lcd_init+0x6f8>
    2fac:	9c af       	std	Y+60, r25	; 0x3c
    2fae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	9e af       	std	Y+62, r25	; 0x3e
    2fb8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fba:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fbc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	69 f7       	brne	.-38     	; 0x2f9c <lcd_init+0x6ec>
    2fc2:	16 c0       	rjmp	.+44     	; 0x2ff0 <lcd_init+0x740>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	ff 96       	adiw	r30, 0x3f	; 63
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	9e af       	std	Y+62, r25	; 0x3e
    2fda:	8d af       	std	Y+61, r24	; 0x3d
    2fdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fde:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fe0:	9a af       	std	Y+58, r25	; 0x3a
    2fe2:	89 af       	std	Y+57, r24	; 0x39
    2fe4:	89 ad       	ldd	r24, Y+57	; 0x39
    2fe6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <lcd_init+0x738>
    2fec:	9a af       	std	Y+58, r25	; 0x3a
    2fee:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
    lcd_command(TWO_LINES_5X7_DOT_MATRIX);
    2ff0:	88 e2       	ldi	r24, 0x28	; 40
    2ff2:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <lcd_command>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	a0 e0       	ldi	r26, 0x00	; 0
    2ffc:	b0 e4       	ldi	r27, 0x40	; 64
    2ffe:	8d ab       	std	Y+53, r24	; 0x35
    3000:	9e ab       	std	Y+54, r25	; 0x36
    3002:	af ab       	std	Y+55, r26	; 0x37
    3004:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3006:	6d a9       	ldd	r22, Y+53	; 0x35
    3008:	7e a9       	ldd	r23, Y+54	; 0x36
    300a:	8f a9       	ldd	r24, Y+55	; 0x37
    300c:	98 ad       	ldd	r25, Y+56	; 0x38
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	4a ef       	ldi	r20, 0xFA	; 250
    3014:	54 e4       	ldi	r21, 0x44	; 68
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	89 ab       	std	Y+49, r24	; 0x31
    3020:	9a ab       	std	Y+50, r25	; 0x32
    3022:	ab ab       	std	Y+51, r26	; 0x33
    3024:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3026:	69 a9       	ldd	r22, Y+49	; 0x31
    3028:	7a a9       	ldd	r23, Y+50	; 0x32
    302a:	8b a9       	ldd	r24, Y+51	; 0x33
    302c:	9c a9       	ldd	r25, Y+52	; 0x34
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    303a:	88 23       	and	r24, r24
    303c:	2c f4       	brge	.+10     	; 0x3048 <lcd_init+0x798>
		__ticks = 1;
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	98 ab       	std	Y+48, r25	; 0x30
    3044:	8f a7       	std	Y+47, r24	; 0x2f
    3046:	3f c0       	rjmp	.+126    	; 0x30c6 <lcd_init+0x816>
	else if (__tmp > 65535)
    3048:	69 a9       	ldd	r22, Y+49	; 0x31
    304a:	7a a9       	ldd	r23, Y+50	; 0x32
    304c:	8b a9       	ldd	r24, Y+51	; 0x33
    304e:	9c a9       	ldd	r25, Y+52	; 0x34
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	3f ef       	ldi	r19, 0xFF	; 255
    3054:	4f e7       	ldi	r20, 0x7F	; 127
    3056:	57 e4       	ldi	r21, 0x47	; 71
    3058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    305c:	18 16       	cp	r1, r24
    305e:	4c f5       	brge	.+82     	; 0x30b2 <lcd_init+0x802>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3060:	6d a9       	ldd	r22, Y+53	; 0x35
    3062:	7e a9       	ldd	r23, Y+54	; 0x36
    3064:	8f a9       	ldd	r24, Y+55	; 0x37
    3066:	98 ad       	ldd	r25, Y+56	; 0x38
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e2       	ldi	r20, 0x20	; 32
    306e:	51 e4       	ldi	r21, 0x41	; 65
    3070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	98 ab       	std	Y+48, r25	; 0x30
    3086:	8f a7       	std	Y+47, r24	; 0x2f
    3088:	0f c0       	rjmp	.+30     	; 0x30a8 <lcd_init+0x7f8>
    308a:	88 ec       	ldi	r24, 0xC8	; 200
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9e a7       	std	Y+46, r25	; 0x2e
    3090:	8d a7       	std	Y+45, r24	; 0x2d
    3092:	8d a5       	ldd	r24, Y+45	; 0x2d
    3094:	9e a5       	ldd	r25, Y+46	; 0x2e
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	f1 f7       	brne	.-4      	; 0x3096 <lcd_init+0x7e6>
    309a:	9e a7       	std	Y+46, r25	; 0x2e
    309c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309e:	8f a5       	ldd	r24, Y+47	; 0x2f
    30a0:	98 a9       	ldd	r25, Y+48	; 0x30
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	98 ab       	std	Y+48, r25	; 0x30
    30a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30aa:	98 a9       	ldd	r25, Y+48	; 0x30
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	69 f7       	brne	.-38     	; 0x308a <lcd_init+0x7da>
    30b0:	14 c0       	rjmp	.+40     	; 0x30da <lcd_init+0x82a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b2:	69 a9       	ldd	r22, Y+49	; 0x31
    30b4:	7a a9       	ldd	r23, Y+50	; 0x32
    30b6:	8b a9       	ldd	r24, Y+51	; 0x33
    30b8:	9c a9       	ldd	r25, Y+52	; 0x34
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	98 ab       	std	Y+48, r25	; 0x30
    30c4:	8f a7       	std	Y+47, r24	; 0x2f
    30c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    30c8:	98 a9       	ldd	r25, Y+48	; 0x30
    30ca:	9c a7       	std	Y+44, r25	; 0x2c
    30cc:	8b a7       	std	Y+43, r24	; 0x2b
    30ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    30d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <lcd_init+0x822>
    30d6:	9c a7       	std	Y+44, r25	; 0x2c
    30d8:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);
    lcd_command(DISPLAY_ON_CURSOR_OFF);
    30da:	8c e0       	ldi	r24, 0x0C	; 12
    30dc:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <lcd_command>
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	a0 e0       	ldi	r26, 0x00	; 0
    30e6:	b0 e4       	ldi	r27, 0x40	; 64
    30e8:	8f a3       	std	Y+39, r24	; 0x27
    30ea:	98 a7       	std	Y+40, r25	; 0x28
    30ec:	a9 a7       	std	Y+41, r26	; 0x29
    30ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f0:	6f a1       	ldd	r22, Y+39	; 0x27
    30f2:	78 a5       	ldd	r23, Y+40	; 0x28
    30f4:	89 a5       	ldd	r24, Y+41	; 0x29
    30f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	4a ef       	ldi	r20, 0xFA	; 250
    30fe:	54 e4       	ldi	r21, 0x44	; 68
    3100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	8b a3       	std	Y+35, r24	; 0x23
    310a:	9c a3       	std	Y+36, r25	; 0x24
    310c:	ad a3       	std	Y+37, r26	; 0x25
    310e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3110:	6b a1       	ldd	r22, Y+35	; 0x23
    3112:	7c a1       	ldd	r23, Y+36	; 0x24
    3114:	8d a1       	ldd	r24, Y+37	; 0x25
    3116:	9e a1       	ldd	r25, Y+38	; 0x26
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	40 e8       	ldi	r20, 0x80	; 128
    311e:	5f e3       	ldi	r21, 0x3F	; 63
    3120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3124:	88 23       	and	r24, r24
    3126:	2c f4       	brge	.+10     	; 0x3132 <lcd_init+0x882>
		__ticks = 1;
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	9a a3       	std	Y+34, r25	; 0x22
    312e:	89 a3       	std	Y+33, r24	; 0x21
    3130:	3f c0       	rjmp	.+126    	; 0x31b0 <lcd_init+0x900>
	else if (__tmp > 65535)
    3132:	6b a1       	ldd	r22, Y+35	; 0x23
    3134:	7c a1       	ldd	r23, Y+36	; 0x24
    3136:	8d a1       	ldd	r24, Y+37	; 0x25
    3138:	9e a1       	ldd	r25, Y+38	; 0x26
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	3f ef       	ldi	r19, 0xFF	; 255
    313e:	4f e7       	ldi	r20, 0x7F	; 127
    3140:	57 e4       	ldi	r21, 0x47	; 71
    3142:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3146:	18 16       	cp	r1, r24
    3148:	4c f5       	brge	.+82     	; 0x319c <lcd_init+0x8ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314a:	6f a1       	ldd	r22, Y+39	; 0x27
    314c:	78 a5       	ldd	r23, Y+40	; 0x28
    314e:	89 a5       	ldd	r24, Y+41	; 0x29
    3150:	9a a5       	ldd	r25, Y+42	; 0x2a
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e2       	ldi	r20, 0x20	; 32
    3158:	51 e4       	ldi	r21, 0x41	; 65
    315a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	bc 01       	movw	r22, r24
    3164:	cd 01       	movw	r24, r26
    3166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	9a a3       	std	Y+34, r25	; 0x22
    3170:	89 a3       	std	Y+33, r24	; 0x21
    3172:	0f c0       	rjmp	.+30     	; 0x3192 <lcd_init+0x8e2>
    3174:	88 ec       	ldi	r24, 0xC8	; 200
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	98 a3       	std	Y+32, r25	; 0x20
    317a:	8f 8f       	std	Y+31, r24	; 0x1f
    317c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    317e:	98 a1       	ldd	r25, Y+32	; 0x20
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	f1 f7       	brne	.-4      	; 0x3180 <lcd_init+0x8d0>
    3184:	98 a3       	std	Y+32, r25	; 0x20
    3186:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3188:	89 a1       	ldd	r24, Y+33	; 0x21
    318a:	9a a1       	ldd	r25, Y+34	; 0x22
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	9a a3       	std	Y+34, r25	; 0x22
    3190:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3192:	89 a1       	ldd	r24, Y+33	; 0x21
    3194:	9a a1       	ldd	r25, Y+34	; 0x22
    3196:	00 97       	sbiw	r24, 0x00	; 0
    3198:	69 f7       	brne	.-38     	; 0x3174 <lcd_init+0x8c4>
    319a:	14 c0       	rjmp	.+40     	; 0x31c4 <lcd_init+0x914>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    319c:	6b a1       	ldd	r22, Y+35	; 0x23
    319e:	7c a1       	ldd	r23, Y+36	; 0x24
    31a0:	8d a1       	ldd	r24, Y+37	; 0x25
    31a2:	9e a1       	ldd	r25, Y+38	; 0x26
    31a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	9a a3       	std	Y+34, r25	; 0x22
    31ae:	89 a3       	std	Y+33, r24	; 0x21
    31b0:	89 a1       	ldd	r24, Y+33	; 0x21
    31b2:	9a a1       	ldd	r25, Y+34	; 0x22
    31b4:	9e 8f       	std	Y+30, r25	; 0x1e
    31b6:	8d 8f       	std	Y+29, r24	; 0x1d
    31b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	f1 f7       	brne	.-4      	; 0x31bc <lcd_init+0x90c>
    31c0:	9e 8f       	std	Y+30, r25	; 0x1e
    31c2:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);	
    lcd_command(INCREMENT_CURSOR);
    31c4:	86 e0       	ldi	r24, 0x06	; 6
    31c6:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <lcd_command>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a0 e0       	ldi	r26, 0x00	; 0
    31d0:	b0 e4       	ldi	r27, 0x40	; 64
    31d2:	89 8f       	std	Y+25, r24	; 0x19
    31d4:	9a 8f       	std	Y+26, r25	; 0x1a
    31d6:	ab 8f       	std	Y+27, r26	; 0x1b
    31d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31da:	69 8d       	ldd	r22, Y+25	; 0x19
    31dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4a ef       	ldi	r20, 0xFA	; 250
    31e8:	54 e4       	ldi	r21, 0x44	; 68
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	8d 8b       	std	Y+21, r24	; 0x15
    31f4:	9e 8b       	std	Y+22, r25	; 0x16
    31f6:	af 8b       	std	Y+23, r26	; 0x17
    31f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31fa:	6d 89       	ldd	r22, Y+21	; 0x15
    31fc:	7e 89       	ldd	r23, Y+22	; 0x16
    31fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3200:	98 8d       	ldd	r25, Y+24	; 0x18
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <lcd_init+0x96c>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9c 8b       	std	Y+20, r25	; 0x14
    3218:	8b 8b       	std	Y+19, r24	; 0x13
    321a:	3f c0       	rjmp	.+126    	; 0x329a <lcd_init+0x9ea>
	else if (__tmp > 65535)
    321c:	6d 89       	ldd	r22, Y+21	; 0x15
    321e:	7e 89       	ldd	r23, Y+22	; 0x16
    3220:	8f 89       	ldd	r24, Y+23	; 0x17
    3222:	98 8d       	ldd	r25, Y+24	; 0x18
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	4c f5       	brge	.+82     	; 0x3286 <lcd_init+0x9d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3234:	69 8d       	ldd	r22, Y+25	; 0x19
    3236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    323a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	51 e4       	ldi	r21, 0x41	; 65
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9c 8b       	std	Y+20, r25	; 0x14
    325a:	8b 8b       	std	Y+19, r24	; 0x13
    325c:	0f c0       	rjmp	.+30     	; 0x327c <lcd_init+0x9cc>
    325e:	88 ec       	ldi	r24, 0xC8	; 200
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	9a 8b       	std	Y+18, r25	; 0x12
    3264:	89 8b       	std	Y+17, r24	; 0x11
    3266:	89 89       	ldd	r24, Y+17	; 0x11
    3268:	9a 89       	ldd	r25, Y+18	; 0x12
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <lcd_init+0x9ba>
    326e:	9a 8b       	std	Y+18, r25	; 0x12
    3270:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	8b 89       	ldd	r24, Y+19	; 0x13
    3274:	9c 89       	ldd	r25, Y+20	; 0x14
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9c 8b       	std	Y+20, r25	; 0x14
    327a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327c:	8b 89       	ldd	r24, Y+19	; 0x13
    327e:	9c 89       	ldd	r25, Y+20	; 0x14
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	69 f7       	brne	.-38     	; 0x325e <lcd_init+0x9ae>
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <lcd_init+0x9fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	6d 89       	ldd	r22, Y+21	; 0x15
    3288:	7e 89       	ldd	r23, Y+22	; 0x16
    328a:	8f 89       	ldd	r24, Y+23	; 0x17
    328c:	98 8d       	ldd	r25, Y+24	; 0x18
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9c 8b       	std	Y+20, r25	; 0x14
    3298:	8b 8b       	std	Y+19, r24	; 0x13
    329a:	8b 89       	ldd	r24, Y+19	; 0x13
    329c:	9c 89       	ldd	r25, Y+20	; 0x14
    329e:	98 8b       	std	Y+16, r25	; 0x10
    32a0:	8f 87       	std	Y+15, r24	; 0x0f
    32a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a4:	98 89       	ldd	r25, Y+16	; 0x10
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <lcd_init+0x9f6>
    32aa:	98 8b       	std	Y+16, r25	; 0x10
    32ac:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);   	
    lcd_command(DISPLAY_CLEAR);
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <lcd_command>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	a0 e0       	ldi	r26, 0x00	; 0
    32ba:	b0 e4       	ldi	r27, 0x40	; 64
    32bc:	8b 87       	std	Y+11, r24	; 0x0b
    32be:	9c 87       	std	Y+12, r25	; 0x0c
    32c0:	ad 87       	std	Y+13, r26	; 0x0d
    32c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4a ef       	ldi	r20, 0xFA	; 250
    32d2:	54 e4       	ldi	r21, 0x44	; 68
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8f 83       	std	Y+7, r24	; 0x07
    32de:	98 87       	std	Y+8, r25	; 0x08
    32e0:	a9 87       	std	Y+9, r26	; 0x09
    32e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32e4:	6f 81       	ldd	r22, Y+7	; 0x07
    32e6:	78 85       	ldd	r23, Y+8	; 0x08
    32e8:	89 85       	ldd	r24, Y+9	; 0x09
    32ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	2c f4       	brge	.+10     	; 0x3306 <lcd_init+0xa56>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	9e 83       	std	Y+6, r25	; 0x06
    3302:	8d 83       	std	Y+5, r24	; 0x05
    3304:	3f c0       	rjmp	.+126    	; 0x3384 <lcd_init+0xad4>
	else if (__tmp > 65535)
    3306:	6f 81       	ldd	r22, Y+7	; 0x07
    3308:	78 85       	ldd	r23, Y+8	; 0x08
    330a:	89 85       	ldd	r24, Y+9	; 0x09
    330c:	9a 85       	ldd	r25, Y+10	; 0x0a
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	57 e4       	ldi	r21, 0x47	; 71
    3316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    331a:	18 16       	cp	r1, r24
    331c:	4c f5       	brge	.+82     	; 0x3370 <lcd_init+0xac0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3320:	7c 85       	ldd	r23, Y+12	; 0x0c
    3322:	8d 85       	ldd	r24, Y+13	; 0x0d
    3324:	9e 85       	ldd	r25, Y+14	; 0x0e
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e2       	ldi	r20, 0x20	; 32
    332c:	51 e4       	ldi	r21, 0x41	; 65
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
    3346:	0f c0       	rjmp	.+30     	; 0x3366 <lcd_init+0xab6>
    3348:	88 ec       	ldi	r24, 0xC8	; 200
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9c 83       	std	Y+4, r25	; 0x04
    334e:	8b 83       	std	Y+3, r24	; 0x03
    3350:	8b 81       	ldd	r24, Y+3	; 0x03
    3352:	9c 81       	ldd	r25, Y+4	; 0x04
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	f1 f7       	brne	.-4      	; 0x3354 <lcd_init+0xaa4>
    3358:	9c 83       	std	Y+4, r25	; 0x04
    335a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335c:	8d 81       	ldd	r24, Y+5	; 0x05
    335e:	9e 81       	ldd	r25, Y+6	; 0x06
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	9e 83       	std	Y+6, r25	; 0x06
    3364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	9e 81       	ldd	r25, Y+6	; 0x06
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	69 f7       	brne	.-38     	; 0x3348 <lcd_init+0xa98>
    336e:	14 c0       	rjmp	.+40     	; 0x3398 <lcd_init+0xae8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	6f 81       	ldd	r22, Y+7	; 0x07
    3372:	78 85       	ldd	r23, Y+8	; 0x08
    3374:	89 85       	ldd	r24, Y+9	; 0x09
    3376:	9a 85       	ldd	r25, Y+10	; 0x0a
    3378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	9e 83       	std	Y+6, r25	; 0x06
    3382:	8d 83       	std	Y+5, r24	; 0x05
    3384:	8d 81       	ldd	r24, Y+5	; 0x05
    3386:	9e 81       	ldd	r25, Y+6	; 0x06
    3388:	9a 83       	std	Y+2, r25	; 0x02
    338a:	89 83       	std	Y+1, r24	; 0x01
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	9a 81       	ldd	r25, Y+2	; 0x02
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <lcd_init+0xae0>
    3394:	9a 83       	std	Y+2, r25	; 0x02
    3396:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    3398:	c8 57       	subi	r28, 0x78	; 120
    339a:	df 4f       	sbci	r29, 0xFF	; 255
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	1f 91       	pop	r17
    33ac:	0f 91       	pop	r16
    33ae:	08 95       	ret

000033b0 <lcd_command>:
void lcd_command(uint8_t cmd)
{
    33b0:	0f 93       	push	r16
    33b2:	1f 93       	push	r17
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	c7 54       	subi	r28, 0x47	; 71
    33be:	d0 40       	sbci	r29, 0x00	; 0
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	f8 94       	cli
    33c4:	de bf       	out	0x3e, r29	; 62
    33c6:	0f be       	out	0x3f, r0	; 63
    33c8:	cd bf       	out	0x3d, r28	; 61
    33ca:	fe 01       	movw	r30, r28
    33cc:	e9 5b       	subi	r30, 0xB9	; 185
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	80 83       	st	Z, r24
    DIO_VidSetPortValue(LCD_DATA_PORT, (cmd&0xf0));
    33d2:	fe 01       	movw	r30, r28
    33d4:	e9 5b       	subi	r30, 0xB9	; 185
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	80 81       	ld	r24, Z
    33da:	98 2f       	mov	r25, r24
    33dc:	90 7f       	andi	r25, 0xF0	; 240
    33de:	82 e0       	ldi	r24, 0x02	; 2
    33e0:	69 2f       	mov	r22, r25
    33e2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <DIO_VidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,LOW);
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	60 e0       	ldi	r22, 0x00	; 0
    33ea:	40 e0       	ldi	r20, 0x00	; 0
    33ec:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(R_W_PIN,LOW);    
    33f0:	82 e0       	ldi	r24, 0x02	; 2
    33f2:	61 e0       	ldi	r22, 0x01	; 1
    33f4:	40 e0       	ldi	r20, 0x00	; 0
    33f6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);    
    33fa:	82 e0       	ldi	r24, 0x02	; 2
    33fc:	62 e0       	ldi	r22, 0x02	; 2
    33fe:	41 e0       	ldi	r20, 0x01	; 1
    3400:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    3404:	fe 01       	movw	r30, r28
    3406:	ed 5b       	subi	r30, 0xBD	; 189
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a0 e0       	ldi	r26, 0x00	; 0
    3410:	b0 e4       	ldi	r27, 0x40	; 64
    3412:	80 83       	st	Z, r24
    3414:	91 83       	std	Z+1, r25	; 0x01
    3416:	a2 83       	std	Z+2, r26	; 0x02
    3418:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341a:	8e 01       	movw	r16, r28
    341c:	01 5c       	subi	r16, 0xC1	; 193
    341e:	1f 4f       	sbci	r17, 0xFF	; 255
    3420:	fe 01       	movw	r30, r28
    3422:	ed 5b       	subi	r30, 0xBD	; 189
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	60 81       	ld	r22, Z
    3428:	71 81       	ldd	r23, Z+1	; 0x01
    342a:	82 81       	ldd	r24, Z+2	; 0x02
    342c:	93 81       	ldd	r25, Z+3	; 0x03
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	4a ef       	ldi	r20, 0xFA	; 250
    3434:	54 e4       	ldi	r21, 0x44	; 68
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	f8 01       	movw	r30, r16
    3440:	80 83       	st	Z, r24
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	a2 83       	std	Z+2, r26	; 0x02
    3446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3448:	fe 01       	movw	r30, r28
    344a:	ff 96       	adiw	r30, 0x3f	; 63
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e8       	ldi	r20, 0x80	; 128
    345a:	5f e3       	ldi	r21, 0x3F	; 63
    345c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3460:	88 23       	and	r24, r24
    3462:	2c f4       	brge	.+10     	; 0x346e <lcd_command+0xbe>
		__ticks = 1;
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	9e af       	std	Y+62, r25	; 0x3e
    346a:	8d af       	std	Y+61, r24	; 0x3d
    346c:	46 c0       	rjmp	.+140    	; 0x34fa <lcd_command+0x14a>
	else if (__tmp > 65535)
    346e:	fe 01       	movw	r30, r28
    3470:	ff 96       	adiw	r30, 0x3f	; 63
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	3f ef       	ldi	r19, 0xFF	; 255
    347e:	4f e7       	ldi	r20, 0x7F	; 127
    3480:	57 e4       	ldi	r21, 0x47	; 71
    3482:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3486:	18 16       	cp	r1, r24
    3488:	64 f5       	brge	.+88     	; 0x34e2 <lcd_command+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    348a:	fe 01       	movw	r30, r28
    348c:	ed 5b       	subi	r30, 0xBD	; 189
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	60 81       	ld	r22, Z
    3492:	71 81       	ldd	r23, Z+1	; 0x01
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	93 81       	ldd	r25, Z+3	; 0x03
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e2       	ldi	r20, 0x20	; 32
    349e:	51 e4       	ldi	r21, 0x41	; 65
    34a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	9e af       	std	Y+62, r25	; 0x3e
    34b6:	8d af       	std	Y+61, r24	; 0x3d
    34b8:	0f c0       	rjmp	.+30     	; 0x34d8 <lcd_command+0x128>
    34ba:	88 ec       	ldi	r24, 0xC8	; 200
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	9c af       	std	Y+60, r25	; 0x3c
    34c0:	8b af       	std	Y+59, r24	; 0x3b
    34c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    34c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <lcd_command+0x116>
    34ca:	9c af       	std	Y+60, r25	; 0x3c
    34cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    34d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	9e af       	std	Y+62, r25	; 0x3e
    34d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    34da:	9e ad       	ldd	r25, Y+62	; 0x3e
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	69 f7       	brne	.-38     	; 0x34ba <lcd_command+0x10a>
    34e0:	16 c0       	rjmp	.+44     	; 0x350e <lcd_command+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e2:	fe 01       	movw	r30, r28
    34e4:	ff 96       	adiw	r30, 0x3f	; 63
    34e6:	60 81       	ld	r22, Z
    34e8:	71 81       	ldd	r23, Z+1	; 0x01
    34ea:	82 81       	ldd	r24, Z+2	; 0x02
    34ec:	93 81       	ldd	r25, Z+3	; 0x03
    34ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	9e af       	std	Y+62, r25	; 0x3e
    34f8:	8d af       	std	Y+61, r24	; 0x3d
    34fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    34fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    34fe:	9a af       	std	Y+58, r25	; 0x3a
    3500:	89 af       	std	Y+57, r24	; 0x39
    3502:	89 ad       	ldd	r24, Y+57	; 0x39
    3504:	9a ad       	ldd	r25, Y+58	; 0x3a
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	f1 f7       	brne	.-4      	; 0x3506 <lcd_command+0x156>
    350a:	9a af       	std	Y+58, r25	; 0x3a
    350c:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2);    
    DIO_voidSetPinValue(EN_PIN,LOW);
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	62 e0       	ldi	r22, 0x02	; 2
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	a0 e0       	ldi	r26, 0x00	; 0
    351e:	b0 e4       	ldi	r27, 0x40	; 64
    3520:	8d ab       	std	Y+53, r24	; 0x35
    3522:	9e ab       	std	Y+54, r25	; 0x36
    3524:	af ab       	std	Y+55, r26	; 0x37
    3526:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3528:	6d a9       	ldd	r22, Y+53	; 0x35
    352a:	7e a9       	ldd	r23, Y+54	; 0x36
    352c:	8f a9       	ldd	r24, Y+55	; 0x37
    352e:	98 ad       	ldd	r25, Y+56	; 0x38
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	4a ef       	ldi	r20, 0xFA	; 250
    3536:	54 e4       	ldi	r21, 0x44	; 68
    3538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	89 ab       	std	Y+49, r24	; 0x31
    3542:	9a ab       	std	Y+50, r25	; 0x32
    3544:	ab ab       	std	Y+51, r26	; 0x33
    3546:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3548:	69 a9       	ldd	r22, Y+49	; 0x31
    354a:	7a a9       	ldd	r23, Y+50	; 0x32
    354c:	8b a9       	ldd	r24, Y+51	; 0x33
    354e:	9c a9       	ldd	r25, Y+52	; 0x34
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e8       	ldi	r20, 0x80	; 128
    3556:	5f e3       	ldi	r21, 0x3F	; 63
    3558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    355c:	88 23       	and	r24, r24
    355e:	2c f4       	brge	.+10     	; 0x356a <lcd_command+0x1ba>
		__ticks = 1;
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	98 ab       	std	Y+48, r25	; 0x30
    3566:	8f a7       	std	Y+47, r24	; 0x2f
    3568:	3f c0       	rjmp	.+126    	; 0x35e8 <lcd_command+0x238>
	else if (__tmp > 65535)
    356a:	69 a9       	ldd	r22, Y+49	; 0x31
    356c:	7a a9       	ldd	r23, Y+50	; 0x32
    356e:	8b a9       	ldd	r24, Y+51	; 0x33
    3570:	9c a9       	ldd	r25, Y+52	; 0x34
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	3f ef       	ldi	r19, 0xFF	; 255
    3576:	4f e7       	ldi	r20, 0x7F	; 127
    3578:	57 e4       	ldi	r21, 0x47	; 71
    357a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    357e:	18 16       	cp	r1, r24
    3580:	4c f5       	brge	.+82     	; 0x35d4 <lcd_command+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3582:	6d a9       	ldd	r22, Y+53	; 0x35
    3584:	7e a9       	ldd	r23, Y+54	; 0x36
    3586:	8f a9       	ldd	r24, Y+55	; 0x37
    3588:	98 ad       	ldd	r25, Y+56	; 0x38
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e2       	ldi	r20, 0x20	; 32
    3590:	51 e4       	ldi	r21, 0x41	; 65
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	bc 01       	movw	r22, r24
    359c:	cd 01       	movw	r24, r26
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	98 ab       	std	Y+48, r25	; 0x30
    35a8:	8f a7       	std	Y+47, r24	; 0x2f
    35aa:	0f c0       	rjmp	.+30     	; 0x35ca <lcd_command+0x21a>
    35ac:	88 ec       	ldi	r24, 0xC8	; 200
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	9e a7       	std	Y+46, r25	; 0x2e
    35b2:	8d a7       	std	Y+45, r24	; 0x2d
    35b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    35b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <lcd_command+0x208>
    35bc:	9e a7       	std	Y+46, r25	; 0x2e
    35be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    35c2:	98 a9       	ldd	r25, Y+48	; 0x30
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	98 ab       	std	Y+48, r25	; 0x30
    35c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    35cc:	98 a9       	ldd	r25, Y+48	; 0x30
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	69 f7       	brne	.-38     	; 0x35ac <lcd_command+0x1fc>
    35d2:	14 c0       	rjmp	.+40     	; 0x35fc <lcd_command+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d4:	69 a9       	ldd	r22, Y+49	; 0x31
    35d6:	7a a9       	ldd	r23, Y+50	; 0x32
    35d8:	8b a9       	ldd	r24, Y+51	; 0x33
    35da:	9c a9       	ldd	r25, Y+52	; 0x34
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	98 ab       	std	Y+48, r25	; 0x30
    35e6:	8f a7       	std	Y+47, r24	; 0x2f
    35e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    35ea:	98 a9       	ldd	r25, Y+48	; 0x30
    35ec:	9c a7       	std	Y+44, r25	; 0x2c
    35ee:	8b a7       	std	Y+43, r24	; 0x2b
    35f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    35f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	f1 f7       	brne	.-4      	; 0x35f4 <lcd_command+0x244>
    35f8:	9c a7       	std	Y+44, r25	; 0x2c
    35fa:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);     
    DIO_VidSetPortValue(LCD_DATA_PORT, (cmd<<4));
    35fc:	fe 01       	movw	r30, r28
    35fe:	e9 5b       	subi	r30, 0xB9	; 185
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	80 81       	ld	r24, Z
    3604:	98 2f       	mov	r25, r24
    3606:	92 95       	swap	r25
    3608:	90 7f       	andi	r25, 0xF0	; 240
    360a:	82 e0       	ldi	r24, 0x02	; 2
    360c:	69 2f       	mov	r22, r25
    360e:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <DIO_VidSetPortValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);  
    3612:	82 e0       	ldi	r24, 0x02	; 2
    3614:	62 e0       	ldi	r22, 0x02	; 2
    3616:	41 e0       	ldi	r20, 0x01	; 1
    3618:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	a0 e0       	ldi	r26, 0x00	; 0
    3622:	b0 e4       	ldi	r27, 0x40	; 64
    3624:	8f a3       	std	Y+39, r24	; 0x27
    3626:	98 a7       	std	Y+40, r25	; 0x28
    3628:	a9 a7       	std	Y+41, r26	; 0x29
    362a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362c:	6f a1       	ldd	r22, Y+39	; 0x27
    362e:	78 a5       	ldd	r23, Y+40	; 0x28
    3630:	89 a5       	ldd	r24, Y+41	; 0x29
    3632:	9a a5       	ldd	r25, Y+42	; 0x2a
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	4a ef       	ldi	r20, 0xFA	; 250
    363a:	54 e4       	ldi	r21, 0x44	; 68
    363c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	8b a3       	std	Y+35, r24	; 0x23
    3646:	9c a3       	std	Y+36, r25	; 0x24
    3648:	ad a3       	std	Y+37, r26	; 0x25
    364a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    364c:	6b a1       	ldd	r22, Y+35	; 0x23
    364e:	7c a1       	ldd	r23, Y+36	; 0x24
    3650:	8d a1       	ldd	r24, Y+37	; 0x25
    3652:	9e a1       	ldd	r25, Y+38	; 0x26
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	40 e8       	ldi	r20, 0x80	; 128
    365a:	5f e3       	ldi	r21, 0x3F	; 63
    365c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3660:	88 23       	and	r24, r24
    3662:	2c f4       	brge	.+10     	; 0x366e <lcd_command+0x2be>
		__ticks = 1;
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	9a a3       	std	Y+34, r25	; 0x22
    366a:	89 a3       	std	Y+33, r24	; 0x21
    366c:	3f c0       	rjmp	.+126    	; 0x36ec <lcd_command+0x33c>
	else if (__tmp > 65535)
    366e:	6b a1       	ldd	r22, Y+35	; 0x23
    3670:	7c a1       	ldd	r23, Y+36	; 0x24
    3672:	8d a1       	ldd	r24, Y+37	; 0x25
    3674:	9e a1       	ldd	r25, Y+38	; 0x26
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	3f ef       	ldi	r19, 0xFF	; 255
    367a:	4f e7       	ldi	r20, 0x7F	; 127
    367c:	57 e4       	ldi	r21, 0x47	; 71
    367e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3682:	18 16       	cp	r1, r24
    3684:	4c f5       	brge	.+82     	; 0x36d8 <lcd_command+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3686:	6f a1       	ldd	r22, Y+39	; 0x27
    3688:	78 a5       	ldd	r23, Y+40	; 0x28
    368a:	89 a5       	ldd	r24, Y+41	; 0x29
    368c:	9a a5       	ldd	r25, Y+42	; 0x2a
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e2       	ldi	r20, 0x20	; 32
    3694:	51 e4       	ldi	r21, 0x41	; 65
    3696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	9a a3       	std	Y+34, r25	; 0x22
    36ac:	89 a3       	std	Y+33, r24	; 0x21
    36ae:	0f c0       	rjmp	.+30     	; 0x36ce <lcd_command+0x31e>
    36b0:	88 ec       	ldi	r24, 0xC8	; 200
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	98 a3       	std	Y+32, r25	; 0x20
    36b6:	8f 8f       	std	Y+31, r24	; 0x1f
    36b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36ba:	98 a1       	ldd	r25, Y+32	; 0x20
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <lcd_command+0x30c>
    36c0:	98 a3       	std	Y+32, r25	; 0x20
    36c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c4:	89 a1       	ldd	r24, Y+33	; 0x21
    36c6:	9a a1       	ldd	r25, Y+34	; 0x22
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	9a a3       	std	Y+34, r25	; 0x22
    36cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ce:	89 a1       	ldd	r24, Y+33	; 0x21
    36d0:	9a a1       	ldd	r25, Y+34	; 0x22
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	69 f7       	brne	.-38     	; 0x36b0 <lcd_command+0x300>
    36d6:	14 c0       	rjmp	.+40     	; 0x3700 <lcd_command+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d8:	6b a1       	ldd	r22, Y+35	; 0x23
    36da:	7c a1       	ldd	r23, Y+36	; 0x24
    36dc:	8d a1       	ldd	r24, Y+37	; 0x25
    36de:	9e a1       	ldd	r25, Y+38	; 0x26
    36e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	9a a3       	std	Y+34, r25	; 0x22
    36ea:	89 a3       	std	Y+33, r24	; 0x21
    36ec:	89 a1       	ldd	r24, Y+33	; 0x21
    36ee:	9a a1       	ldd	r25, Y+34	; 0x22
    36f0:	9e 8f       	std	Y+30, r25	; 0x1e
    36f2:	8d 8f       	std	Y+29, r24	; 0x1d
    36f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	f1 f7       	brne	.-4      	; 0x36f8 <lcd_command+0x348>
    36fc:	9e 8f       	std	Y+30, r25	; 0x1e
    36fe:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);   
    DIO_voidSetPinValue(EN_PIN,LOW);
    3700:	82 e0       	ldi	r24, 0x02	; 2
    3702:	62 e0       	ldi	r22, 0x02	; 2
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	a0 e0       	ldi	r26, 0x00	; 0
    3710:	b0 e4       	ldi	r27, 0x40	; 64
    3712:	89 8f       	std	Y+25, r24	; 0x19
    3714:	9a 8f       	std	Y+26, r25	; 0x1a
    3716:	ab 8f       	std	Y+27, r26	; 0x1b
    3718:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    371a:	69 8d       	ldd	r22, Y+25	; 0x19
    371c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    371e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3720:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	4a ef       	ldi	r20, 0xFA	; 250
    3728:	54 e4       	ldi	r21, 0x44	; 68
    372a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	8d 8b       	std	Y+21, r24	; 0x15
    3734:	9e 8b       	std	Y+22, r25	; 0x16
    3736:	af 8b       	std	Y+23, r26	; 0x17
    3738:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    373a:	6d 89       	ldd	r22, Y+21	; 0x15
    373c:	7e 89       	ldd	r23, Y+22	; 0x16
    373e:	8f 89       	ldd	r24, Y+23	; 0x17
    3740:	98 8d       	ldd	r25, Y+24	; 0x18
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	40 e8       	ldi	r20, 0x80	; 128
    3748:	5f e3       	ldi	r21, 0x3F	; 63
    374a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    374e:	88 23       	and	r24, r24
    3750:	2c f4       	brge	.+10     	; 0x375c <lcd_command+0x3ac>
		__ticks = 1;
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	9c 8b       	std	Y+20, r25	; 0x14
    3758:	8b 8b       	std	Y+19, r24	; 0x13
    375a:	3f c0       	rjmp	.+126    	; 0x37da <lcd_command+0x42a>
	else if (__tmp > 65535)
    375c:	6d 89       	ldd	r22, Y+21	; 0x15
    375e:	7e 89       	ldd	r23, Y+22	; 0x16
    3760:	8f 89       	ldd	r24, Y+23	; 0x17
    3762:	98 8d       	ldd	r25, Y+24	; 0x18
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	3f ef       	ldi	r19, 0xFF	; 255
    3768:	4f e7       	ldi	r20, 0x7F	; 127
    376a:	57 e4       	ldi	r21, 0x47	; 71
    376c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3770:	18 16       	cp	r1, r24
    3772:	4c f5       	brge	.+82     	; 0x37c6 <lcd_command+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3774:	69 8d       	ldd	r22, Y+25	; 0x19
    3776:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    377a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e2       	ldi	r20, 0x20	; 32
    3782:	51 e4       	ldi	r21, 0x41	; 65
    3784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	bc 01       	movw	r22, r24
    378e:	cd 01       	movw	r24, r26
    3790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	9c 8b       	std	Y+20, r25	; 0x14
    379a:	8b 8b       	std	Y+19, r24	; 0x13
    379c:	0f c0       	rjmp	.+30     	; 0x37bc <lcd_command+0x40c>
    379e:	88 ec       	ldi	r24, 0xC8	; 200
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	9a 8b       	std	Y+18, r25	; 0x12
    37a4:	89 8b       	std	Y+17, r24	; 0x11
    37a6:	89 89       	ldd	r24, Y+17	; 0x11
    37a8:	9a 89       	ldd	r25, Y+18	; 0x12
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	f1 f7       	brne	.-4      	; 0x37aa <lcd_command+0x3fa>
    37ae:	9a 8b       	std	Y+18, r25	; 0x12
    37b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b2:	8b 89       	ldd	r24, Y+19	; 0x13
    37b4:	9c 89       	ldd	r25, Y+20	; 0x14
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	9c 8b       	std	Y+20, r25	; 0x14
    37ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37bc:	8b 89       	ldd	r24, Y+19	; 0x13
    37be:	9c 89       	ldd	r25, Y+20	; 0x14
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	69 f7       	brne	.-38     	; 0x379e <lcd_command+0x3ee>
    37c4:	14 c0       	rjmp	.+40     	; 0x37ee <lcd_command+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c6:	6d 89       	ldd	r22, Y+21	; 0x15
    37c8:	7e 89       	ldd	r23, Y+22	; 0x16
    37ca:	8f 89       	ldd	r24, Y+23	; 0x17
    37cc:	98 8d       	ldd	r25, Y+24	; 0x18
    37ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	9c 8b       	std	Y+20, r25	; 0x14
    37d8:	8b 8b       	std	Y+19, r24	; 0x13
    37da:	8b 89       	ldd	r24, Y+19	; 0x13
    37dc:	9c 89       	ldd	r25, Y+20	; 0x14
    37de:	98 8b       	std	Y+16, r25	; 0x10
    37e0:	8f 87       	std	Y+15, r24	; 0x0f
    37e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e4:	98 89       	ldd	r25, Y+16	; 0x10
    37e6:	01 97       	sbiw	r24, 0x01	; 1
    37e8:	f1 f7       	brne	.-4      	; 0x37e6 <lcd_command+0x436>
    37ea:	98 8b       	std	Y+16, r25	; 0x10
    37ec:	8f 87       	std	Y+15, r24	; 0x0f
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	a0 ea       	ldi	r26, 0xA0	; 160
    37f4:	b0 e4       	ldi	r27, 0x40	; 64
    37f6:	8b 87       	std	Y+11, r24	; 0x0b
    37f8:	9c 87       	std	Y+12, r25	; 0x0c
    37fa:	ad 87       	std	Y+13, r26	; 0x0d
    37fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3800:	7c 85       	ldd	r23, Y+12	; 0x0c
    3802:	8d 85       	ldd	r24, Y+13	; 0x0d
    3804:	9e 85       	ldd	r25, Y+14	; 0x0e
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	4a ef       	ldi	r20, 0xFA	; 250
    380c:	54 e4       	ldi	r21, 0x44	; 68
    380e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	8f 83       	std	Y+7, r24	; 0x07
    3818:	98 87       	std	Y+8, r25	; 0x08
    381a:	a9 87       	std	Y+9, r26	; 0x09
    381c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    381e:	6f 81       	ldd	r22, Y+7	; 0x07
    3820:	78 85       	ldd	r23, Y+8	; 0x08
    3822:	89 85       	ldd	r24, Y+9	; 0x09
    3824:	9a 85       	ldd	r25, Y+10	; 0x0a
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	40 e8       	ldi	r20, 0x80	; 128
    382c:	5f e3       	ldi	r21, 0x3F	; 63
    382e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3832:	88 23       	and	r24, r24
    3834:	2c f4       	brge	.+10     	; 0x3840 <lcd_command+0x490>
		__ticks = 1;
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	9e 83       	std	Y+6, r25	; 0x06
    383c:	8d 83       	std	Y+5, r24	; 0x05
    383e:	3f c0       	rjmp	.+126    	; 0x38be <lcd_command+0x50e>
	else if (__tmp > 65535)
    3840:	6f 81       	ldd	r22, Y+7	; 0x07
    3842:	78 85       	ldd	r23, Y+8	; 0x08
    3844:	89 85       	ldd	r24, Y+9	; 0x09
    3846:	9a 85       	ldd	r25, Y+10	; 0x0a
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	3f ef       	ldi	r19, 0xFF	; 255
    384c:	4f e7       	ldi	r20, 0x7F	; 127
    384e:	57 e4       	ldi	r21, 0x47	; 71
    3850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3854:	18 16       	cp	r1, r24
    3856:	4c f5       	brge	.+82     	; 0x38aa <lcd_command+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3858:	6b 85       	ldd	r22, Y+11	; 0x0b
    385a:	7c 85       	ldd	r23, Y+12	; 0x0c
    385c:	8d 85       	ldd	r24, Y+13	; 0x0d
    385e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	40 e2       	ldi	r20, 0x20	; 32
    3866:	51 e4       	ldi	r21, 0x41	; 65
    3868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	bc 01       	movw	r22, r24
    3872:	cd 01       	movw	r24, r26
    3874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	9e 83       	std	Y+6, r25	; 0x06
    387e:	8d 83       	std	Y+5, r24	; 0x05
    3880:	0f c0       	rjmp	.+30     	; 0x38a0 <lcd_command+0x4f0>
    3882:	88 ec       	ldi	r24, 0xC8	; 200
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	9c 83       	std	Y+4, r25	; 0x04
    3888:	8b 83       	std	Y+3, r24	; 0x03
    388a:	8b 81       	ldd	r24, Y+3	; 0x03
    388c:	9c 81       	ldd	r25, Y+4	; 0x04
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	f1 f7       	brne	.-4      	; 0x388e <lcd_command+0x4de>
    3892:	9c 83       	std	Y+4, r25	; 0x04
    3894:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	9e 81       	ldd	r25, Y+6	; 0x06
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	9e 83       	std	Y+6, r25	; 0x06
    389e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a0:	8d 81       	ldd	r24, Y+5	; 0x05
    38a2:	9e 81       	ldd	r25, Y+6	; 0x06
    38a4:	00 97       	sbiw	r24, 0x00	; 0
    38a6:	69 f7       	brne	.-38     	; 0x3882 <lcd_command+0x4d2>
    38a8:	14 c0       	rjmp	.+40     	; 0x38d2 <lcd_command+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38aa:	6f 81       	ldd	r22, Y+7	; 0x07
    38ac:	78 85       	ldd	r23, Y+8	; 0x08
    38ae:	89 85       	ldd	r24, Y+9	; 0x09
    38b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	9e 83       	std	Y+6, r25	; 0x06
    38bc:	8d 83       	std	Y+5, r24	; 0x05
    38be:	8d 81       	ldd	r24, Y+5	; 0x05
    38c0:	9e 81       	ldd	r25, Y+6	; 0x06
    38c2:	9a 83       	std	Y+2, r25	; 0x02
    38c4:	89 83       	std	Y+1, r24	; 0x01
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	9a 81       	ldd	r25, Y+2	; 0x02
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	f1 f7       	brne	.-4      	; 0x38ca <lcd_command+0x51a>
    38ce:	9a 83       	std	Y+2, r25	; 0x02
    38d0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);  
	
    _delay_ms(5); 	 	        
}
    38d2:	c9 5b       	subi	r28, 0xB9	; 185
    38d4:	df 4f       	sbci	r29, 0xFF	; 255
    38d6:	0f b6       	in	r0, 0x3f	; 63
    38d8:	f8 94       	cli
    38da:	de bf       	out	0x3e, r29	; 62
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	cd bf       	out	0x3d, r28	; 61
    38e0:	cf 91       	pop	r28
    38e2:	df 91       	pop	r29
    38e4:	1f 91       	pop	r17
    38e6:	0f 91       	pop	r16
    38e8:	08 95       	ret

000038ea <lcd_sendChar>:
void lcd_sendChar(uint8_t data)
{
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
    38f2:	e9 97       	sbiw	r28, 0x39	; 57
    38f4:	0f b6       	in	r0, 0x3f	; 63
    38f6:	f8 94       	cli
    38f8:	de bf       	out	0x3e, r29	; 62
    38fa:	0f be       	out	0x3f, r0	; 63
    38fc:	cd bf       	out	0x3d, r28	; 61
    38fe:	89 af       	std	Y+57, r24	; 0x39
    DIO_VidSetPortValue(LCD_DATA_PORT,(data&0xf0));
    3900:	89 ad       	ldd	r24, Y+57	; 0x39
    3902:	98 2f       	mov	r25, r24
    3904:	90 7f       	andi	r25, 0xF0	; 240
    3906:	82 e0       	ldi	r24, 0x02	; 2
    3908:	69 2f       	mov	r22, r25
    390a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <DIO_VidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,HIGH);
    390e:	82 e0       	ldi	r24, 0x02	; 2
    3910:	60 e0       	ldi	r22, 0x00	; 0
    3912:	41 e0       	ldi	r20, 0x01	; 1
    3914:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(R_W_PIN,LOW);    
    3918:	82 e0       	ldi	r24, 0x02	; 2
    391a:	61 e0       	ldi	r22, 0x01	; 1
    391c:	40 e0       	ldi	r20, 0x00	; 0
    391e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);    
    3922:	82 e0       	ldi	r24, 0x02	; 2
    3924:	62 e0       	ldi	r22, 0x02	; 2
    3926:	41 e0       	ldi	r20, 0x01	; 1
    3928:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	a0 e0       	ldi	r26, 0x00	; 0
    3932:	b0 e4       	ldi	r27, 0x40	; 64
    3934:	8d ab       	std	Y+53, r24	; 0x35
    3936:	9e ab       	std	Y+54, r25	; 0x36
    3938:	af ab       	std	Y+55, r26	; 0x37
    393a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393c:	6d a9       	ldd	r22, Y+53	; 0x35
    393e:	7e a9       	ldd	r23, Y+54	; 0x36
    3940:	8f a9       	ldd	r24, Y+55	; 0x37
    3942:	98 ad       	ldd	r25, Y+56	; 0x38
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	4a ef       	ldi	r20, 0xFA	; 250
    394a:	54 e4       	ldi	r21, 0x44	; 68
    394c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	89 ab       	std	Y+49, r24	; 0x31
    3956:	9a ab       	std	Y+50, r25	; 0x32
    3958:	ab ab       	std	Y+51, r26	; 0x33
    395a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    395c:	69 a9       	ldd	r22, Y+49	; 0x31
    395e:	7a a9       	ldd	r23, Y+50	; 0x32
    3960:	8b a9       	ldd	r24, Y+51	; 0x33
    3962:	9c a9       	ldd	r25, Y+52	; 0x34
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e8       	ldi	r20, 0x80	; 128
    396a:	5f e3       	ldi	r21, 0x3F	; 63
    396c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3970:	88 23       	and	r24, r24
    3972:	2c f4       	brge	.+10     	; 0x397e <lcd_sendChar+0x94>
		__ticks = 1;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	98 ab       	std	Y+48, r25	; 0x30
    397a:	8f a7       	std	Y+47, r24	; 0x2f
    397c:	3f c0       	rjmp	.+126    	; 0x39fc <lcd_sendChar+0x112>
	else if (__tmp > 65535)
    397e:	69 a9       	ldd	r22, Y+49	; 0x31
    3980:	7a a9       	ldd	r23, Y+50	; 0x32
    3982:	8b a9       	ldd	r24, Y+51	; 0x33
    3984:	9c a9       	ldd	r25, Y+52	; 0x34
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	3f ef       	ldi	r19, 0xFF	; 255
    398a:	4f e7       	ldi	r20, 0x7F	; 127
    398c:	57 e4       	ldi	r21, 0x47	; 71
    398e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3992:	18 16       	cp	r1, r24
    3994:	4c f5       	brge	.+82     	; 0x39e8 <lcd_sendChar+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3996:	6d a9       	ldd	r22, Y+53	; 0x35
    3998:	7e a9       	ldd	r23, Y+54	; 0x36
    399a:	8f a9       	ldd	r24, Y+55	; 0x37
    399c:	98 ad       	ldd	r25, Y+56	; 0x38
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e2       	ldi	r20, 0x20	; 32
    39a4:	51 e4       	ldi	r21, 0x41	; 65
    39a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	98 ab       	std	Y+48, r25	; 0x30
    39bc:	8f a7       	std	Y+47, r24	; 0x2f
    39be:	0f c0       	rjmp	.+30     	; 0x39de <lcd_sendChar+0xf4>
    39c0:	88 ec       	ldi	r24, 0xC8	; 200
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9e a7       	std	Y+46, r25	; 0x2e
    39c6:	8d a7       	std	Y+45, r24	; 0x2d
    39c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    39ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <lcd_sendChar+0xe2>
    39d0:	9e a7       	std	Y+46, r25	; 0x2e
    39d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    39d6:	98 a9       	ldd	r25, Y+48	; 0x30
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	98 ab       	std	Y+48, r25	; 0x30
    39dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39de:	8f a5       	ldd	r24, Y+47	; 0x2f
    39e0:	98 a9       	ldd	r25, Y+48	; 0x30
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	69 f7       	brne	.-38     	; 0x39c0 <lcd_sendChar+0xd6>
    39e6:	14 c0       	rjmp	.+40     	; 0x3a10 <lcd_sendChar+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e8:	69 a9       	ldd	r22, Y+49	; 0x31
    39ea:	7a a9       	ldd	r23, Y+50	; 0x32
    39ec:	8b a9       	ldd	r24, Y+51	; 0x33
    39ee:	9c a9       	ldd	r25, Y+52	; 0x34
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	98 ab       	std	Y+48, r25	; 0x30
    39fa:	8f a7       	std	Y+47, r24	; 0x2f
    39fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    39fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3a00:	9c a7       	std	Y+44, r25	; 0x2c
    3a02:	8b a7       	std	Y+43, r24	; 0x2b
    3a04:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a06:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	f1 f7       	brne	.-4      	; 0x3a08 <lcd_sendChar+0x11e>
    3a0c:	9c a7       	std	Y+44, r25	; 0x2c
    3a0e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);    
    DIO_voidSetPinValue(EN_PIN,LOW);
    3a10:	82 e0       	ldi	r24, 0x02	; 2
    3a12:	62 e0       	ldi	r22, 0x02	; 2
    3a14:	40 e0       	ldi	r20, 0x00	; 0
    3a16:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	a0 e0       	ldi	r26, 0x00	; 0
    3a20:	b0 e4       	ldi	r27, 0x40	; 64
    3a22:	8f a3       	std	Y+39, r24	; 0x27
    3a24:	98 a7       	std	Y+40, r25	; 0x28
    3a26:	a9 a7       	std	Y+41, r26	; 0x29
    3a28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a2c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a2e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a30:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a ef       	ldi	r20, 0xFA	; 250
    3a38:	54 e4       	ldi	r21, 0x44	; 68
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	8b a3       	std	Y+35, r24	; 0x23
    3a44:	9c a3       	std	Y+36, r25	; 0x24
    3a46:	ad a3       	std	Y+37, r26	; 0x25
    3a48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a4a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a4c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a4e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a50:	9e a1       	ldd	r25, Y+38	; 0x26
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	2c f4       	brge	.+10     	; 0x3a6c <lcd_sendChar+0x182>
		__ticks = 1;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9a a3       	std	Y+34, r25	; 0x22
    3a68:	89 a3       	std	Y+33, r24	; 0x21
    3a6a:	3f c0       	rjmp	.+126    	; 0x3aea <lcd_sendChar+0x200>
	else if (__tmp > 65535)
    3a6c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a6e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a70:	8d a1       	ldd	r24, Y+37	; 0x25
    3a72:	9e a1       	ldd	r25, Y+38	; 0x26
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	4c f5       	brge	.+82     	; 0x3ad6 <lcd_sendChar+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a84:	6f a1       	ldd	r22, Y+39	; 0x27
    3a86:	78 a5       	ldd	r23, Y+40	; 0x28
    3a88:	89 a5       	ldd	r24, Y+41	; 0x29
    3a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	51 e4       	ldi	r21, 0x41	; 65
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9a a3       	std	Y+34, r25	; 0x22
    3aaa:	89 a3       	std	Y+33, r24	; 0x21
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <lcd_sendChar+0x1e2>
    3aae:	88 ec       	ldi	r24, 0xC8	; 200
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	98 a3       	std	Y+32, r25	; 0x20
    3ab4:	8f 8f       	std	Y+31, r24	; 0x1f
    3ab6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ab8:	98 a1       	ldd	r25, Y+32	; 0x20
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <lcd_sendChar+0x1d0>
    3abe:	98 a3       	std	Y+32, r25	; 0x20
    3ac0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	9a a3       	std	Y+34, r25	; 0x22
    3aca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3acc:	89 a1       	ldd	r24, Y+33	; 0x21
    3ace:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	69 f7       	brne	.-38     	; 0x3aae <lcd_sendChar+0x1c4>
    3ad4:	14 c0       	rjmp	.+40     	; 0x3afe <lcd_sendChar+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ad8:	7c a1       	ldd	r23, Y+36	; 0x24
    3ada:	8d a1       	ldd	r24, Y+37	; 0x25
    3adc:	9e a1       	ldd	r25, Y+38	; 0x26
    3ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	9a a3       	std	Y+34, r25	; 0x22
    3ae8:	89 a3       	std	Y+33, r24	; 0x21
    3aea:	89 a1       	ldd	r24, Y+33	; 0x21
    3aec:	9a a1       	ldd	r25, Y+34	; 0x22
    3aee:	9e 8f       	std	Y+30, r25	; 0x1e
    3af0:	8d 8f       	std	Y+29, r24	; 0x1d
    3af2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3af4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <lcd_sendChar+0x20c>
    3afa:	9e 8f       	std	Y+30, r25	; 0x1e
    3afc:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);     
    DIO_VidSetPortValue(LCD_DATA_PORT, (data<<4));
    3afe:	89 ad       	ldd	r24, Y+57	; 0x39
    3b00:	98 2f       	mov	r25, r24
    3b02:	92 95       	swap	r25
    3b04:	90 7f       	andi	r25, 0xF0	; 240
    3b06:	82 e0       	ldi	r24, 0x02	; 2
    3b08:	69 2f       	mov	r22, r25
    3b0a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <DIO_VidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,HIGH);    
    3b0e:	82 e0       	ldi	r24, 0x02	; 2
    3b10:	60 e0       	ldi	r22, 0x00	; 0
    3b12:	41 e0       	ldi	r20, 0x01	; 1
    3b14:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(EN_PIN,HIGH);  
    3b18:	82 e0       	ldi	r24, 0x02	; 2
    3b1a:	62 e0       	ldi	r22, 0x02	; 2
    3b1c:	41 e0       	ldi	r20, 0x01	; 1
    3b1e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	a0 e0       	ldi	r26, 0x00	; 0
    3b28:	b0 e4       	ldi	r27, 0x40	; 64
    3b2a:	89 8f       	std	Y+25, r24	; 0x19
    3b2c:	9a 8f       	std	Y+26, r25	; 0x1a
    3b2e:	ab 8f       	std	Y+27, r26	; 0x1b
    3b30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b32:	69 8d       	ldd	r22, Y+25	; 0x19
    3b34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	4a ef       	ldi	r20, 0xFA	; 250
    3b40:	54 e4       	ldi	r21, 0x44	; 68
    3b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	8d 8b       	std	Y+21, r24	; 0x15
    3b4c:	9e 8b       	std	Y+22, r25	; 0x16
    3b4e:	af 8b       	std	Y+23, r26	; 0x17
    3b50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b52:	6d 89       	ldd	r22, Y+21	; 0x15
    3b54:	7e 89       	ldd	r23, Y+22	; 0x16
    3b56:	8f 89       	ldd	r24, Y+23	; 0x17
    3b58:	98 8d       	ldd	r25, Y+24	; 0x18
    3b5a:	20 e0       	ldi	r18, 0x00	; 0
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	40 e8       	ldi	r20, 0x80	; 128
    3b60:	5f e3       	ldi	r21, 0x3F	; 63
    3b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b66:	88 23       	and	r24, r24
    3b68:	2c f4       	brge	.+10     	; 0x3b74 <lcd_sendChar+0x28a>
		__ticks = 1;
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	9c 8b       	std	Y+20, r25	; 0x14
    3b70:	8b 8b       	std	Y+19, r24	; 0x13
    3b72:	3f c0       	rjmp	.+126    	; 0x3bf2 <lcd_sendChar+0x308>
	else if (__tmp > 65535)
    3b74:	6d 89       	ldd	r22, Y+21	; 0x15
    3b76:	7e 89       	ldd	r23, Y+22	; 0x16
    3b78:	8f 89       	ldd	r24, Y+23	; 0x17
    3b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	3f ef       	ldi	r19, 0xFF	; 255
    3b80:	4f e7       	ldi	r20, 0x7F	; 127
    3b82:	57 e4       	ldi	r21, 0x47	; 71
    3b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b88:	18 16       	cp	r1, r24
    3b8a:	4c f5       	brge	.+82     	; 0x3bde <lcd_sendChar+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e2       	ldi	r20, 0x20	; 32
    3b9a:	51 e4       	ldi	r21, 0x41	; 65
    3b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	bc 01       	movw	r22, r24
    3ba6:	cd 01       	movw	r24, r26
    3ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	9c 8b       	std	Y+20, r25	; 0x14
    3bb2:	8b 8b       	std	Y+19, r24	; 0x13
    3bb4:	0f c0       	rjmp	.+30     	; 0x3bd4 <lcd_sendChar+0x2ea>
    3bb6:	88 ec       	ldi	r24, 0xC8	; 200
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	9a 8b       	std	Y+18, r25	; 0x12
    3bbc:	89 8b       	std	Y+17, r24	; 0x11
    3bbe:	89 89       	ldd	r24, Y+17	; 0x11
    3bc0:	9a 89       	ldd	r25, Y+18	; 0x12
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	f1 f7       	brne	.-4      	; 0x3bc2 <lcd_sendChar+0x2d8>
    3bc6:	9a 8b       	std	Y+18, r25	; 0x12
    3bc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bca:	8b 89       	ldd	r24, Y+19	; 0x13
    3bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	9c 8b       	std	Y+20, r25	; 0x14
    3bd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    3bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    3bd8:	00 97       	sbiw	r24, 0x00	; 0
    3bda:	69 f7       	brne	.-38     	; 0x3bb6 <lcd_sendChar+0x2cc>
    3bdc:	14 c0       	rjmp	.+40     	; 0x3c06 <lcd_sendChar+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bde:	6d 89       	ldd	r22, Y+21	; 0x15
    3be0:	7e 89       	ldd	r23, Y+22	; 0x16
    3be2:	8f 89       	ldd	r24, Y+23	; 0x17
    3be4:	98 8d       	ldd	r25, Y+24	; 0x18
    3be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	9c 8b       	std	Y+20, r25	; 0x14
    3bf0:	8b 8b       	std	Y+19, r24	; 0x13
    3bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    3bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    3bf6:	98 8b       	std	Y+16, r25	; 0x10
    3bf8:	8f 87       	std	Y+15, r24	; 0x0f
    3bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bfc:	98 89       	ldd	r25, Y+16	; 0x10
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	f1 f7       	brne	.-4      	; 0x3bfe <lcd_sendChar+0x314>
    3c02:	98 8b       	std	Y+16, r25	; 0x10
    3c04:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);   
    DIO_voidSetPinValue(EN_PIN,LOW);  
    3c06:	82 e0       	ldi	r24, 0x02	; 2
    3c08:	62 e0       	ldi	r22, 0x02	; 2
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	a0 e0       	ldi	r26, 0x00	; 0
    3c16:	b0 e4       	ldi	r27, 0x40	; 64
    3c18:	8b 87       	std	Y+11, r24	; 0x0b
    3c1a:	9c 87       	std	Y+12, r25	; 0x0c
    3c1c:	ad 87       	std	Y+13, r26	; 0x0d
    3c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	4a ef       	ldi	r20, 0xFA	; 250
    3c2e:	54 e4       	ldi	r21, 0x44	; 68
    3c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	8f 83       	std	Y+7, r24	; 0x07
    3c3a:	98 87       	std	Y+8, r25	; 0x08
    3c3c:	a9 87       	std	Y+9, r26	; 0x09
    3c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c40:	6f 81       	ldd	r22, Y+7	; 0x07
    3c42:	78 85       	ldd	r23, Y+8	; 0x08
    3c44:	89 85       	ldd	r24, Y+9	; 0x09
    3c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	40 e8       	ldi	r20, 0x80	; 128
    3c4e:	5f e3       	ldi	r21, 0x3F	; 63
    3c50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c54:	88 23       	and	r24, r24
    3c56:	2c f4       	brge	.+10     	; 0x3c62 <lcd_sendChar+0x378>
		__ticks = 1;
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	9e 83       	std	Y+6, r25	; 0x06
    3c5e:	8d 83       	std	Y+5, r24	; 0x05
    3c60:	3f c0       	rjmp	.+126    	; 0x3ce0 <lcd_sendChar+0x3f6>
	else if (__tmp > 65535)
    3c62:	6f 81       	ldd	r22, Y+7	; 0x07
    3c64:	78 85       	ldd	r23, Y+8	; 0x08
    3c66:	89 85       	ldd	r24, Y+9	; 0x09
    3c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	3f ef       	ldi	r19, 0xFF	; 255
    3c6e:	4f e7       	ldi	r20, 0x7F	; 127
    3c70:	57 e4       	ldi	r21, 0x47	; 71
    3c72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c76:	18 16       	cp	r1, r24
    3c78:	4c f5       	brge	.+82     	; 0x3ccc <lcd_sendChar+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	40 e2       	ldi	r20, 0x20	; 32
    3c88:	51 e4       	ldi	r21, 0x41	; 65
    3c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	bc 01       	movw	r22, r24
    3c94:	cd 01       	movw	r24, r26
    3c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	9e 83       	std	Y+6, r25	; 0x06
    3ca0:	8d 83       	std	Y+5, r24	; 0x05
    3ca2:	0f c0       	rjmp	.+30     	; 0x3cc2 <lcd_sendChar+0x3d8>
    3ca4:	88 ec       	ldi	r24, 0xC8	; 200
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	9c 83       	std	Y+4, r25	; 0x04
    3caa:	8b 83       	std	Y+3, r24	; 0x03
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	01 97       	sbiw	r24, 0x01	; 1
    3cb2:	f1 f7       	brne	.-4      	; 0x3cb0 <lcd_sendChar+0x3c6>
    3cb4:	9c 83       	std	Y+4, r25	; 0x04
    3cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cba:	9e 81       	ldd	r25, Y+6	; 0x06
    3cbc:	01 97       	sbiw	r24, 0x01	; 1
    3cbe:	9e 83       	std	Y+6, r25	; 0x06
    3cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc6:	00 97       	sbiw	r24, 0x00	; 0
    3cc8:	69 f7       	brne	.-38     	; 0x3ca4 <lcd_sendChar+0x3ba>
    3cca:	14 c0       	rjmp	.+40     	; 0x3cf4 <lcd_sendChar+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cce:	78 85       	ldd	r23, Y+8	; 0x08
    3cd0:	89 85       	ldd	r24, Y+9	; 0x09
    3cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	9e 83       	std	Y+6, r25	; 0x06
    3cde:	8d 83       	std	Y+5, r24	; 0x05
    3ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce4:	9a 83       	std	Y+2, r25	; 0x02
    3ce6:	89 83       	std	Y+1, r24	; 0x01
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	9a 81       	ldd	r25, Y+2	; 0x02
    3cec:	01 97       	sbiw	r24, 0x01	; 1
    3cee:	f1 f7       	brne	.-4      	; 0x3cec <lcd_sendChar+0x402>
    3cf0:	9a 83       	std	Y+2, r25	; 0x02
    3cf2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);   	

}
    3cf4:	e9 96       	adiw	r28, 0x39	; 57
    3cf6:	0f b6       	in	r0, 0x3f	; 63
    3cf8:	f8 94       	cli
    3cfa:	de bf       	out	0x3e, r29	; 62
    3cfc:	0f be       	out	0x3f, r0	; 63
    3cfe:	cd bf       	out	0x3d, r28	; 61
    3d00:	cf 91       	pop	r28
    3d02:	df 91       	pop	r29
    3d04:	08 95       	ret

00003d06 <lcd_sendString>:
void lcd_sendString(uint8_t * data)
{
    3d06:	df 93       	push	r29
    3d08:	cf 93       	push	r28
    3d0a:	00 d0       	rcall	.+0      	; 0x3d0c <lcd_sendString+0x6>
    3d0c:	0f 92       	push	r0
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    3d12:	9b 83       	std	Y+3, r25	; 0x03
    3d14:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
    3d16:	19 82       	std	Y+1, r1	; 0x01
    3d18:	0e c0       	rjmp	.+28     	; 0x3d36 <lcd_sendString+0x30>

	while(data[i] != '\0')
	{

		lcd_sendChar(data[i]);
    3d1a:	89 81       	ldd	r24, Y+1	; 0x01
    3d1c:	28 2f       	mov	r18, r24
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	8a 81       	ldd	r24, Y+2	; 0x02
    3d22:	9b 81       	ldd	r25, Y+3	; 0x03
    3d24:	fc 01       	movw	r30, r24
    3d26:	e2 0f       	add	r30, r18
    3d28:	f3 1f       	adc	r31, r19
    3d2a:	80 81       	ld	r24, Z
    3d2c:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
		i++;
    3d30:	89 81       	ldd	r24, Y+1	; 0x01
    3d32:	8f 5f       	subi	r24, 0xFF	; 255
    3d34:	89 83       	std	Y+1, r24	; 0x01
}
void lcd_sendString(uint8_t * data)
{
	uint8_t i=0;

	while(data[i] != '\0')
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	28 2f       	mov	r18, r24
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d40:	fc 01       	movw	r30, r24
    3d42:	e2 0f       	add	r30, r18
    3d44:	f3 1f       	adc	r31, r19
    3d46:	80 81       	ld	r24, Z
    3d48:	88 23       	and	r24, r24
    3d4a:	39 f7       	brne	.-50     	; 0x3d1a <lcd_sendString+0x14>
	{

		lcd_sendChar(data[i]);
		i++;
	}
}
    3d4c:	0f 90       	pop	r0
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	cf 91       	pop	r28
    3d54:	df 91       	pop	r29
    3d56:	08 95       	ret

00003d58 <lcd_sendNum>:
void lcd_sendNum( uint16_t copy_u16number)
{
    3d58:	df 93       	push	r29
    3d5a:	cf 93       	push	r28
    3d5c:	cd b7       	in	r28, 0x3d	; 61
    3d5e:	de b7       	in	r29, 0x3e	; 62
    3d60:	2a 97       	sbiw	r28, 0x0a	; 10
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	f8 94       	cli
    3d66:	de bf       	out	0x3e, r29	; 62
    3d68:	0f be       	out	0x3f, r0	; 63
    3d6a:	cd bf       	out	0x3d, r28	; 61
    3d6c:	98 87       	std	Y+8, r25	; 0x08
    3d6e:	8f 83       	std	Y+7, r24	; 0x07

	if (copy_u16number==0)
    3d70:	8f 81       	ldd	r24, Y+7	; 0x07
    3d72:	98 85       	ldd	r25, Y+8	; 0x08
    3d74:	00 97       	sbiw	r24, 0x00	; 0
    3d76:	19 f4       	brne	.+6      	; 0x3d7e <lcd_sendNum+0x26>
	{
		lcd_sendChar('0');
    3d78:	80 e3       	ldi	r24, 0x30	; 48
    3d7a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
	}
	sint8_t i=0;
    3d7e:	19 82       	std	Y+1, r1	; 0x01
    3d80:	1f c0       	rjmp	.+62     	; 0x3dc0 <lcd_sendNum+0x68>
	uint8_t str_num[5];
	while(copy_u16number>0)
	{
		str_num[i]=copy_u16number%10;
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	e8 2f       	mov	r30, r24
    3d86:	ff 27       	eor	r31, r31
    3d88:	e7 fd       	sbrc	r30, 7
    3d8a:	f0 95       	com	r31
    3d8c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d8e:	98 85       	ldd	r25, Y+8	; 0x08
    3d90:	2a e0       	ldi	r18, 0x0A	; 10
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	b9 01       	movw	r22, r18
    3d96:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodhi4>
    3d9a:	28 2f       	mov	r18, r24
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	02 96       	adiw	r24, 0x02	; 2
    3da0:	e8 0f       	add	r30, r24
    3da2:	f9 1f       	adc	r31, r25
    3da4:	20 83       	st	Z, r18
		copy_u16number/=10;
    3da6:	8f 81       	ldd	r24, Y+7	; 0x07
    3da8:	98 85       	ldd	r25, Y+8	; 0x08
    3daa:	2a e0       	ldi	r18, 0x0A	; 10
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	b9 01       	movw	r22, r18
    3db0:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodhi4>
    3db4:	cb 01       	movw	r24, r22
    3db6:	98 87       	std	Y+8, r25	; 0x08
    3db8:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	8f 5f       	subi	r24, 0xFF	; 255
    3dbe:	89 83       	std	Y+1, r24	; 0x01
	{
		lcd_sendChar('0');
	}
	sint8_t i=0;
	uint8_t str_num[5];
	while(copy_u16number>0)
    3dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    3dc2:	98 85       	ldd	r25, Y+8	; 0x08
    3dc4:	00 97       	sbiw	r24, 0x00	; 0
    3dc6:	e9 f6       	brne	.-70     	; 0x3d82 <lcd_sendNum+0x2a>
	{
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	81 50       	subi	r24, 0x01	; 1
    3dcc:	89 83       	std	Y+1, r24	; 0x01
    3dce:	7e c0       	rjmp	.+252    	; 0x3ecc <lcd_sendNum+0x174>
	while(i>=0)
	{
		switch(str_num[i])
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	28 2f       	mov	r18, r24
    3dd4:	33 27       	eor	r19, r19
    3dd6:	27 fd       	sbrc	r18, 7
    3dd8:	30 95       	com	r19
    3dda:	ce 01       	movw	r24, r28
    3ddc:	02 96       	adiw	r24, 0x02	; 2
    3dde:	fc 01       	movw	r30, r24
    3de0:	e2 0f       	add	r30, r18
    3de2:	f3 1f       	adc	r31, r19
    3de4:	80 81       	ld	r24, Z
    3de6:	28 2f       	mov	r18, r24
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	3a 87       	std	Y+10, r19	; 0x0a
    3dec:	29 87       	std	Y+9, r18	; 0x09
    3dee:	89 85       	ldd	r24, Y+9	; 0x09
    3df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df2:	84 30       	cpi	r24, 0x04	; 4
    3df4:	91 05       	cpc	r25, r1
    3df6:	09 f4       	brne	.+2      	; 0x3dfa <lcd_sendNum+0xa2>
    3df8:	4f c0       	rjmp	.+158    	; 0x3e98 <lcd_sendNum+0x140>
    3dfa:	29 85       	ldd	r18, Y+9	; 0x09
    3dfc:	3a 85       	ldd	r19, Y+10	; 0x0a
    3dfe:	25 30       	cpi	r18, 0x05	; 5
    3e00:	31 05       	cpc	r19, r1
    3e02:	d4 f4       	brge	.+52     	; 0x3e38 <lcd_sendNum+0xe0>
    3e04:	89 85       	ldd	r24, Y+9	; 0x09
    3e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e08:	81 30       	cpi	r24, 0x01	; 1
    3e0a:	91 05       	cpc	r25, r1
    3e0c:	c9 f1       	breq	.+114    	; 0x3e80 <lcd_sendNum+0x128>
    3e0e:	29 85       	ldd	r18, Y+9	; 0x09
    3e10:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e12:	22 30       	cpi	r18, 0x02	; 2
    3e14:	31 05       	cpc	r19, r1
    3e16:	2c f4       	brge	.+10     	; 0x3e22 <lcd_sendNum+0xca>
    3e18:	89 85       	ldd	r24, Y+9	; 0x09
    3e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e1c:	00 97       	sbiw	r24, 0x00	; 0
    3e1e:	61 f1       	breq	.+88     	; 0x3e78 <lcd_sendNum+0x120>
    3e20:	52 c0       	rjmp	.+164    	; 0x3ec6 <lcd_sendNum+0x16e>
    3e22:	29 85       	ldd	r18, Y+9	; 0x09
    3e24:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e26:	22 30       	cpi	r18, 0x02	; 2
    3e28:	31 05       	cpc	r19, r1
    3e2a:	71 f1       	breq	.+92     	; 0x3e88 <lcd_sendNum+0x130>
    3e2c:	89 85       	ldd	r24, Y+9	; 0x09
    3e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e30:	83 30       	cpi	r24, 0x03	; 3
    3e32:	91 05       	cpc	r25, r1
    3e34:	69 f1       	breq	.+90     	; 0x3e90 <lcd_sendNum+0x138>
    3e36:	47 c0       	rjmp	.+142    	; 0x3ec6 <lcd_sendNum+0x16e>
    3e38:	29 85       	ldd	r18, Y+9	; 0x09
    3e3a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e3c:	27 30       	cpi	r18, 0x07	; 7
    3e3e:	31 05       	cpc	r19, r1
    3e40:	b9 f1       	breq	.+110    	; 0x3eb0 <lcd_sendNum+0x158>
    3e42:	89 85       	ldd	r24, Y+9	; 0x09
    3e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e46:	88 30       	cpi	r24, 0x08	; 8
    3e48:	91 05       	cpc	r25, r1
    3e4a:	5c f4       	brge	.+22     	; 0x3e62 <lcd_sendNum+0x10a>
    3e4c:	29 85       	ldd	r18, Y+9	; 0x09
    3e4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e50:	25 30       	cpi	r18, 0x05	; 5
    3e52:	31 05       	cpc	r19, r1
    3e54:	29 f1       	breq	.+74     	; 0x3ea0 <lcd_sendNum+0x148>
    3e56:	89 85       	ldd	r24, Y+9	; 0x09
    3e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e5a:	86 30       	cpi	r24, 0x06	; 6
    3e5c:	91 05       	cpc	r25, r1
    3e5e:	21 f1       	breq	.+72     	; 0x3ea8 <lcd_sendNum+0x150>
    3e60:	32 c0       	rjmp	.+100    	; 0x3ec6 <lcd_sendNum+0x16e>
    3e62:	29 85       	ldd	r18, Y+9	; 0x09
    3e64:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e66:	28 30       	cpi	r18, 0x08	; 8
    3e68:	31 05       	cpc	r19, r1
    3e6a:	31 f1       	breq	.+76     	; 0x3eb8 <lcd_sendNum+0x160>
    3e6c:	89 85       	ldd	r24, Y+9	; 0x09
    3e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e70:	89 30       	cpi	r24, 0x09	; 9
    3e72:	91 05       	cpc	r25, r1
    3e74:	29 f1       	breq	.+74     	; 0x3ec0 <lcd_sendNum+0x168>
    3e76:	27 c0       	rjmp	.+78     	; 0x3ec6 <lcd_sendNum+0x16e>
		{
		case 0 : lcd_sendChar('0');break;
    3e78:	80 e3       	ldi	r24, 0x30	; 48
    3e7a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
    3e7e:	23 c0       	rjmp	.+70     	; 0x3ec6 <lcd_sendNum+0x16e>
		case 1 : lcd_sendChar('1');break;
    3e80:	81 e3       	ldi	r24, 0x31	; 49
    3e82:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
    3e86:	1f c0       	rjmp	.+62     	; 0x3ec6 <lcd_sendNum+0x16e>
		case 2 : lcd_sendChar('2');break;
    3e88:	82 e3       	ldi	r24, 0x32	; 50
    3e8a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
    3e8e:	1b c0       	rjmp	.+54     	; 0x3ec6 <lcd_sendNum+0x16e>
		case 3 : lcd_sendChar('3');break;
    3e90:	83 e3       	ldi	r24, 0x33	; 51
    3e92:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
    3e96:	17 c0       	rjmp	.+46     	; 0x3ec6 <lcd_sendNum+0x16e>
		case 4 : lcd_sendChar('4');break;
    3e98:	84 e3       	ldi	r24, 0x34	; 52
    3e9a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
    3e9e:	13 c0       	rjmp	.+38     	; 0x3ec6 <lcd_sendNum+0x16e>
		case 5 : lcd_sendChar('5');break;
    3ea0:	85 e3       	ldi	r24, 0x35	; 53
    3ea2:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
    3ea6:	0f c0       	rjmp	.+30     	; 0x3ec6 <lcd_sendNum+0x16e>
		case 6 : lcd_sendChar('6');break;
    3ea8:	86 e3       	ldi	r24, 0x36	; 54
    3eaa:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
    3eae:	0b c0       	rjmp	.+22     	; 0x3ec6 <lcd_sendNum+0x16e>
		case 7 : lcd_sendChar('7');break;
    3eb0:	87 e3       	ldi	r24, 0x37	; 55
    3eb2:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
    3eb6:	07 c0       	rjmp	.+14     	; 0x3ec6 <lcd_sendNum+0x16e>
		case 8 : lcd_sendChar('8');break;
    3eb8:	88 e3       	ldi	r24, 0x38	; 56
    3eba:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
    3ebe:	03 c0       	rjmp	.+6      	; 0x3ec6 <lcd_sendNum+0x16e>
		case 9 : lcd_sendChar('9');break;
    3ec0:	89 e3       	ldi	r24, 0x39	; 57
    3ec2:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>
		}

		i--;
    3ec6:	89 81       	ldd	r24, Y+1	; 0x01
    3ec8:	81 50       	subi	r24, 0x01	; 1
    3eca:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
	while(i>=0)
    3ecc:	89 81       	ldd	r24, Y+1	; 0x01
    3ece:	88 23       	and	r24, r24
    3ed0:	0c f0       	brlt	.+2      	; 0x3ed4 <lcd_sendNum+0x17c>
    3ed2:	7e cf       	rjmp	.-260    	; 0x3dd0 <lcd_sendNum+0x78>

		i--;
	}


}
    3ed4:	2a 96       	adiw	r28, 0x0a	; 10
    3ed6:	0f b6       	in	r0, 0x3f	; 63
    3ed8:	f8 94       	cli
    3eda:	de bf       	out	0x3e, r29	; 62
    3edc:	0f be       	out	0x3f, r0	; 63
    3ede:	cd bf       	out	0x3d, r28	; 61
    3ee0:	cf 91       	pop	r28
    3ee2:	df 91       	pop	r29
    3ee4:	08 95       	ret

00003ee6 <lcd_clear>:

void lcd_clear(void)
{
    3ee6:	df 93       	push	r29
    3ee8:	cf 93       	push	r28
    3eea:	cd b7       	in	r28, 0x3d	; 61
    3eec:	de b7       	in	r29, 0x3e	; 62
    3eee:	2e 97       	sbiw	r28, 0x0e	; 14
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	f8 94       	cli
    3ef4:	de bf       	out	0x3e, r29	; 62
    3ef6:	0f be       	out	0x3f, r0	; 63
    3ef8:	cd bf       	out	0x3d, r28	; 61
    lcd_command(DISPLAY_CLEAR);
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <lcd_command>
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	a0 e0       	ldi	r26, 0x00	; 0
    3f06:	b0 e4       	ldi	r27, 0x40	; 64
    3f08:	8b 87       	std	Y+11, r24	; 0x0b
    3f0a:	9c 87       	std	Y+12, r25	; 0x0c
    3f0c:	ad 87       	std	Y+13, r26	; 0x0d
    3f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	4a ef       	ldi	r20, 0xFA	; 250
    3f1e:	54 e4       	ldi	r21, 0x44	; 68
    3f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f24:	dc 01       	movw	r26, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	8f 83       	std	Y+7, r24	; 0x07
    3f2a:	98 87       	std	Y+8, r25	; 0x08
    3f2c:	a9 87       	std	Y+9, r26	; 0x09
    3f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f30:	6f 81       	ldd	r22, Y+7	; 0x07
    3f32:	78 85       	ldd	r23, Y+8	; 0x08
    3f34:	89 85       	ldd	r24, Y+9	; 0x09
    3f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	40 e8       	ldi	r20, 0x80	; 128
    3f3e:	5f e3       	ldi	r21, 0x3F	; 63
    3f40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f44:	88 23       	and	r24, r24
    3f46:	2c f4       	brge	.+10     	; 0x3f52 <lcd_clear+0x6c>
		__ticks = 1;
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	9e 83       	std	Y+6, r25	; 0x06
    3f4e:	8d 83       	std	Y+5, r24	; 0x05
    3f50:	3f c0       	rjmp	.+126    	; 0x3fd0 <lcd_clear+0xea>
	else if (__tmp > 65535)
    3f52:	6f 81       	ldd	r22, Y+7	; 0x07
    3f54:	78 85       	ldd	r23, Y+8	; 0x08
    3f56:	89 85       	ldd	r24, Y+9	; 0x09
    3f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	3f ef       	ldi	r19, 0xFF	; 255
    3f5e:	4f e7       	ldi	r20, 0x7F	; 127
    3f60:	57 e4       	ldi	r21, 0x47	; 71
    3f62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f66:	18 16       	cp	r1, r24
    3f68:	4c f5       	brge	.+82     	; 0x3fbc <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e2       	ldi	r20, 0x20	; 32
    3f78:	51 e4       	ldi	r21, 0x41	; 65
    3f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	bc 01       	movw	r22, r24
    3f84:	cd 01       	movw	r24, r26
    3f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	9e 83       	std	Y+6, r25	; 0x06
    3f90:	8d 83       	std	Y+5, r24	; 0x05
    3f92:	0f c0       	rjmp	.+30     	; 0x3fb2 <lcd_clear+0xcc>
    3f94:	88 ec       	ldi	r24, 0xC8	; 200
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	9c 83       	std	Y+4, r25	; 0x04
    3f9a:	8b 83       	std	Y+3, r24	; 0x03
    3f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
    3fa2:	f1 f7       	brne	.-4      	; 0x3fa0 <lcd_clear+0xba>
    3fa4:	9c 83       	std	Y+4, r25	; 0x04
    3fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3faa:	9e 81       	ldd	r25, Y+6	; 0x06
    3fac:	01 97       	sbiw	r24, 0x01	; 1
    3fae:	9e 83       	std	Y+6, r25	; 0x06
    3fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb6:	00 97       	sbiw	r24, 0x00	; 0
    3fb8:	69 f7       	brne	.-38     	; 0x3f94 <lcd_clear+0xae>
    3fba:	14 c0       	rjmp	.+40     	; 0x3fe4 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3fbe:	78 85       	ldd	r23, Y+8	; 0x08
    3fc0:	89 85       	ldd	r24, Y+9	; 0x09
    3fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	9e 83       	std	Y+6, r25	; 0x06
    3fce:	8d 83       	std	Y+5, r24	; 0x05
    3fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd4:	9a 83       	std	Y+2, r25	; 0x02
    3fd6:	89 83       	std	Y+1, r24	; 0x01
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	9a 81       	ldd	r25, Y+2	; 0x02
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	f1 f7       	brne	.-4      	; 0x3fdc <lcd_clear+0xf6>
    3fe0:	9a 83       	std	Y+2, r25	; 0x02
    3fe2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    3fe4:	2e 96       	adiw	r28, 0x0e	; 14
    3fe6:	0f b6       	in	r0, 0x3f	; 63
    3fe8:	f8 94       	cli
    3fea:	de bf       	out	0x3e, r29	; 62
    3fec:	0f be       	out	0x3f, r0	; 63
    3fee:	cd bf       	out	0x3d, r28	; 61
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <ConvertFromAscitoInt>:
#include"LCD16x2.h"
#include "Keypad4x4.h"
#include <avr/delay.h>

uint8_t ConvertFromAscitoInt(uint8_t * data)
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <ConvertFromAscitoInt+0x6>
    3ffc:	0f 92       	push	r0
    3ffe:	cd b7       	in	r28, 0x3d	; 61
    4000:	de b7       	in	r29, 0x3e	; 62
    4002:	9b 83       	std	Y+3, r25	; 0x03
    4004:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t address = 0;
    4006:	19 82       	std	Y+1, r1	; 0x01
	address = (data[0]-'0')*10 + (data[1]-'0');
    4008:	ea 81       	ldd	r30, Y+2	; 0x02
    400a:	fb 81       	ldd	r31, Y+3	; 0x03
    400c:	80 81       	ld	r24, Z
    400e:	88 2f       	mov	r24, r24
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	9c 01       	movw	r18, r24
    4014:	22 0f       	add	r18, r18
    4016:	33 1f       	adc	r19, r19
    4018:	c9 01       	movw	r24, r18
    401a:	88 0f       	add	r24, r24
    401c:	99 1f       	adc	r25, r25
    401e:	88 0f       	add	r24, r24
    4020:	99 1f       	adc	r25, r25
    4022:	82 0f       	add	r24, r18
    4024:	93 1f       	adc	r25, r19
    4026:	28 2f       	mov	r18, r24
    4028:	8a 81       	ldd	r24, Y+2	; 0x02
    402a:	9b 81       	ldd	r25, Y+3	; 0x03
    402c:	fc 01       	movw	r30, r24
    402e:	31 96       	adiw	r30, 0x01	; 1
    4030:	80 81       	ld	r24, Z
    4032:	82 0f       	add	r24, r18
    4034:	80 51       	subi	r24, 0x10	; 16
    4036:	89 83       	std	Y+1, r24	; 0x01

	return address;
    4038:	89 81       	ldd	r24, Y+1	; 0x01
}
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	0f 90       	pop	r0
    4040:	cf 91       	pop	r28
    4042:	df 91       	pop	r29
    4044:	08 95       	ret

00004046 <main>:



void main(void)
{
    4046:	df 93       	push	r29
    4048:	cf 93       	push	r28
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	cc 55       	subi	r28, 0x5C	; 92
    4050:	d0 40       	sbci	r29, 0x00	; 0
    4052:	0f b6       	in	r0, 0x3f	; 63
    4054:	f8 94       	cli
    4056:	de bf       	out	0x3e, r29	; 62
    4058:	0f be       	out	0x3f, r0	; 63
    405a:	cd bf       	out	0x3d, r28	; 61
	uint8_t KeyRead[5];
    uint8_t buffer[50];
    uint16_t digital_value = 0;
    405c:	1b 8a       	std	Y+19, r1	; 0x13
    405e:	1a 8a       	std	Y+18, r1	; 0x12
    ST_DIO_config_t PB0 = {PORTB,PIN0,OUTPUT};
    4060:	ce 01       	movw	r24, r28
    4062:	85 5b       	subi	r24, 0xB5	; 181
    4064:	9f 4f       	sbci	r25, 0xFF	; 255
    4066:	65 96       	adiw	r28, 0x15	; 21
    4068:	9f af       	std	Y+63, r25	; 0x3f
    406a:	8e af       	std	Y+62, r24	; 0x3e
    406c:	65 97       	sbiw	r28, 0x15	; 21
    406e:	83 eb       	ldi	r24, 0xB3	; 179
    4070:	91 e0       	ldi	r25, 0x01	; 1
    4072:	67 96       	adiw	r28, 0x17	; 23
    4074:	9f af       	std	Y+63, r25	; 0x3f
    4076:	8e af       	std	Y+62, r24	; 0x3e
    4078:	67 97       	sbiw	r28, 0x17	; 23
    407a:	93 e0       	ldi	r25, 0x03	; 3
    407c:	68 96       	adiw	r28, 0x18	; 24
    407e:	9f af       	std	Y+63, r25	; 0x3f
    4080:	68 97       	sbiw	r28, 0x18	; 24
    4082:	67 96       	adiw	r28, 0x17	; 23
    4084:	ee ad       	ldd	r30, Y+62	; 0x3e
    4086:	ff ad       	ldd	r31, Y+63	; 0x3f
    4088:	67 97       	sbiw	r28, 0x17	; 23
    408a:	00 80       	ld	r0, Z
    408c:	67 96       	adiw	r28, 0x17	; 23
    408e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4090:	9f ad       	ldd	r25, Y+63	; 0x3f
    4092:	67 97       	sbiw	r28, 0x17	; 23
    4094:	01 96       	adiw	r24, 0x01	; 1
    4096:	67 96       	adiw	r28, 0x17	; 23
    4098:	9f af       	std	Y+63, r25	; 0x3f
    409a:	8e af       	std	Y+62, r24	; 0x3e
    409c:	67 97       	sbiw	r28, 0x17	; 23
    409e:	65 96       	adiw	r28, 0x15	; 21
    40a0:	ee ad       	ldd	r30, Y+62	; 0x3e
    40a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    40a4:	65 97       	sbiw	r28, 0x15	; 21
    40a6:	00 82       	st	Z, r0
    40a8:	65 96       	adiw	r28, 0x15	; 21
    40aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    40ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    40ae:	65 97       	sbiw	r28, 0x15	; 21
    40b0:	01 96       	adiw	r24, 0x01	; 1
    40b2:	65 96       	adiw	r28, 0x15	; 21
    40b4:	9f af       	std	Y+63, r25	; 0x3f
    40b6:	8e af       	std	Y+62, r24	; 0x3e
    40b8:	65 97       	sbiw	r28, 0x15	; 21
    40ba:	68 96       	adiw	r28, 0x18	; 24
    40bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    40be:	68 97       	sbiw	r28, 0x18	; 24
    40c0:	91 50       	subi	r25, 0x01	; 1
    40c2:	68 96       	adiw	r28, 0x18	; 24
    40c4:	9f af       	std	Y+63, r25	; 0x3f
    40c6:	68 97       	sbiw	r28, 0x18	; 24
    40c8:	68 96       	adiw	r28, 0x18	; 24
    40ca:	ef ad       	ldd	r30, Y+63	; 0x3f
    40cc:	68 97       	sbiw	r28, 0x18	; 24
    40ce:	ee 23       	and	r30, r30
    40d0:	c1 f6       	brne	.-80     	; 0x4082 <main+0x3c>
    DIO_voidSetPinDirection(&PB0);
    40d2:	ce 01       	movw	r24, r28
    40d4:	85 5b       	subi	r24, 0xB5	; 181
    40d6:	9f 4f       	sbci	r25, 0xFF	; 255
    40d8:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <DIO_voidSetPinDirection>
    ST_ADC__config_t ch0 = {DISABLE,ACCC_PIN_SAMEVCC,ADJUST_RIGHT,ADC_C0,F_128};
    40dc:	ce 01       	movw	r24, r28
    40de:	82 5b       	subi	r24, 0xB2	; 178
    40e0:	9f 4f       	sbci	r25, 0xFF	; 255
    40e2:	6a 96       	adiw	r28, 0x1a	; 26
    40e4:	9f af       	std	Y+63, r25	; 0x3f
    40e6:	8e af       	std	Y+62, r24	; 0x3e
    40e8:	6a 97       	sbiw	r28, 0x1a	; 26
    40ea:	8e ea       	ldi	r24, 0xAE	; 174
    40ec:	91 e0       	ldi	r25, 0x01	; 1
    40ee:	6c 96       	adiw	r28, 0x1c	; 28
    40f0:	9f af       	std	Y+63, r25	; 0x3f
    40f2:	8e af       	std	Y+62, r24	; 0x3e
    40f4:	6c 97       	sbiw	r28, 0x1c	; 28
    40f6:	95 e0       	ldi	r25, 0x05	; 5
    40f8:	6d 96       	adiw	r28, 0x1d	; 29
    40fa:	9f af       	std	Y+63, r25	; 0x3f
    40fc:	6d 97       	sbiw	r28, 0x1d	; 29
    40fe:	6c 96       	adiw	r28, 0x1c	; 28
    4100:	ee ad       	ldd	r30, Y+62	; 0x3e
    4102:	ff ad       	ldd	r31, Y+63	; 0x3f
    4104:	6c 97       	sbiw	r28, 0x1c	; 28
    4106:	00 80       	ld	r0, Z
    4108:	6c 96       	adiw	r28, 0x1c	; 28
    410a:	8e ad       	ldd	r24, Y+62	; 0x3e
    410c:	9f ad       	ldd	r25, Y+63	; 0x3f
    410e:	6c 97       	sbiw	r28, 0x1c	; 28
    4110:	01 96       	adiw	r24, 0x01	; 1
    4112:	6c 96       	adiw	r28, 0x1c	; 28
    4114:	9f af       	std	Y+63, r25	; 0x3f
    4116:	8e af       	std	Y+62, r24	; 0x3e
    4118:	6c 97       	sbiw	r28, 0x1c	; 28
    411a:	6a 96       	adiw	r28, 0x1a	; 26
    411c:	ee ad       	ldd	r30, Y+62	; 0x3e
    411e:	ff ad       	ldd	r31, Y+63	; 0x3f
    4120:	6a 97       	sbiw	r28, 0x1a	; 26
    4122:	00 82       	st	Z, r0
    4124:	6a 96       	adiw	r28, 0x1a	; 26
    4126:	8e ad       	ldd	r24, Y+62	; 0x3e
    4128:	9f ad       	ldd	r25, Y+63	; 0x3f
    412a:	6a 97       	sbiw	r28, 0x1a	; 26
    412c:	01 96       	adiw	r24, 0x01	; 1
    412e:	6a 96       	adiw	r28, 0x1a	; 26
    4130:	9f af       	std	Y+63, r25	; 0x3f
    4132:	8e af       	std	Y+62, r24	; 0x3e
    4134:	6a 97       	sbiw	r28, 0x1a	; 26
    4136:	6d 96       	adiw	r28, 0x1d	; 29
    4138:	9f ad       	ldd	r25, Y+63	; 0x3f
    413a:	6d 97       	sbiw	r28, 0x1d	; 29
    413c:	91 50       	subi	r25, 0x01	; 1
    413e:	6d 96       	adiw	r28, 0x1d	; 29
    4140:	9f af       	std	Y+63, r25	; 0x3f
    4142:	6d 97       	sbiw	r28, 0x1d	; 29
    4144:	6d 96       	adiw	r28, 0x1d	; 29
    4146:	ef ad       	ldd	r30, Y+63	; 0x3f
    4148:	6d 97       	sbiw	r28, 0x1d	; 29
    414a:	ee 23       	and	r30, r30
    414c:	c1 f6       	brne	.-80     	; 0x40fe <main+0xb8>
    lcd_init();
    414e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <lcd_init>
    adc_Init(&ch0);
    4152:	ce 01       	movw	r24, r28
    4154:	82 5b       	subi	r24, 0xB2	; 178
    4156:	9f 4f       	sbci	r25, 0xFF	; 255
    4158:	0e 94 87 06 	call	0xd0e	; 0xd0e <adc_Init>
    adc_Enable();
    415c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <adc_Enable>
    Keypad_init();
    4160:	0e 94 11 12 	call	0x2422	; 0x2422 <Keypad_init>
    uint8_t i = 0;
    4164:	19 8a       	std	Y+17, r1	; 0x11
    lcd_sendString("Set Temp:");
    4166:	80 e6       	ldi	r24, 0x60	; 96
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <lcd_sendString>
    uint8_t data = 0;
    416e:	18 8a       	std	Y+16, r1	; 0x10
    while(1)
    {
    	data = Keypad_u8ReadPin();
    4170:	0e 94 76 13 	call	0x26ec	; 0x26ec <Keypad_u8ReadPin>
    4174:	88 8b       	std	Y+16, r24	; 0x10
    	if(data != DEFAULT_KEY)
    4176:	88 89       	ldd	r24, Y+16	; 0x10
    4178:	83 34       	cpi	r24, 0x43	; 67
    417a:	81 f0       	breq	.+32     	; 0x419c <main+0x156>
    	{
    		KeyRead[i]= data;
    417c:	89 89       	ldd	r24, Y+17	; 0x11
    417e:	28 2f       	mov	r18, r24
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	ce 01       	movw	r24, r28
    4184:	44 96       	adiw	r24, 0x14	; 20
    4186:	fc 01       	movw	r30, r24
    4188:	e2 0f       	add	r30, r18
    418a:	f3 1f       	adc	r31, r19
    418c:	88 89       	ldd	r24, Y+16	; 0x10
    418e:	80 83       	st	Z, r24
    		lcd_sendChar(data);
    4190:	88 89       	ldd	r24, Y+16	; 0x10
    4192:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcd_sendChar>

    		i++;
    4196:	89 89       	ldd	r24, Y+17	; 0x11
    4198:	8f 5f       	subi	r24, 0xFF	; 255
    419a:	89 8b       	std	Y+17, r24	; 0x11
    	}
    	if(data == '=')
    419c:	88 89       	ldd	r24, Y+16	; 0x10
    419e:	8d 33       	cpi	r24, 0x3D	; 61
    41a0:	39 f7       	brne	.-50     	; 0x4170 <main+0x12a>
    		break;
    	}

    }

    lcd_clear();
    41a2:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <lcd_clear>
    uint8_t Value_set = ConvertFromAscitoInt(KeyRead);
    41a6:	ce 01       	movw	r24, r28
    41a8:	44 96       	adiw	r24, 0x14	; 20
    41aa:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <ConvertFromAscitoInt>
    41ae:	8f 87       	std	Y+15, r24	; 0x0f
    while(1)
    {


        digital_value = adc_Read(&ch0);
    41b0:	ce 01       	movw	r24, r28
    41b2:	82 5b       	subi	r24, 0xB2	; 178
    41b4:	9f 4f       	sbci	r25, 0xFF	; 255
    41b6:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <adc_Read>
    41ba:	9b 8b       	std	Y+19, r25	; 0x13
    41bc:	8a 8b       	std	Y+18, r24	; 0x12
        digital_value *= 4.88;
    41be:	8a 89       	ldd	r24, Y+18	; 0x12
    41c0:	9b 89       	ldd	r25, Y+19	; 0x13
    41c2:	cc 01       	movw	r24, r24
    41c4:	a0 e0       	ldi	r26, 0x00	; 0
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	bc 01       	movw	r22, r24
    41ca:	cd 01       	movw	r24, r26
    41cc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    41d0:	dc 01       	movw	r26, r24
    41d2:	cb 01       	movw	r24, r22
    41d4:	bc 01       	movw	r22, r24
    41d6:	cd 01       	movw	r24, r26
    41d8:	26 ef       	ldi	r18, 0xF6	; 246
    41da:	38 e2       	ldi	r19, 0x28	; 40
    41dc:	4c e9       	ldi	r20, 0x9C	; 156
    41de:	50 e4       	ldi	r21, 0x40	; 64
    41e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	bc 01       	movw	r22, r24
    41ea:	cd 01       	movw	r24, r26
    41ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	9b 8b       	std	Y+19, r25	; 0x13
    41f6:	8a 8b       	std	Y+18, r24	; 0x12
        digital_value/=10;
    41f8:	8a 89       	ldd	r24, Y+18	; 0x12
    41fa:	9b 89       	ldd	r25, Y+19	; 0x13
    41fc:	2a e0       	ldi	r18, 0x0A	; 10
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	b9 01       	movw	r22, r18
    4202:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodhi4>
    4206:	cb 01       	movw	r24, r22
    4208:	9b 8b       	std	Y+19, r25	; 0x13
    420a:	8a 8b       	std	Y+18, r24	; 0x12

        sprintf(buffer,"%d",digital_value);
    420c:	00 d0       	rcall	.+0      	; 0x420e <main+0x1c8>
    420e:	00 d0       	rcall	.+0      	; 0x4210 <main+0x1ca>
    4210:	00 d0       	rcall	.+0      	; 0x4212 <main+0x1cc>
    4212:	ed b7       	in	r30, 0x3d	; 61
    4214:	fe b7       	in	r31, 0x3e	; 62
    4216:	31 96       	adiw	r30, 0x01	; 1
    4218:	ce 01       	movw	r24, r28
    421a:	49 96       	adiw	r24, 0x19	; 25
    421c:	91 83       	std	Z+1, r25	; 0x01
    421e:	80 83       	st	Z, r24
    4220:	8a e6       	ldi	r24, 0x6A	; 106
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	93 83       	std	Z+3, r25	; 0x03
    4226:	82 83       	std	Z+2, r24	; 0x02
    4228:	8a 89       	ldd	r24, Y+18	; 0x12
    422a:	9b 89       	ldd	r25, Y+19	; 0x13
    422c:	95 83       	std	Z+5, r25	; 0x05
    422e:	84 83       	std	Z+4, r24	; 0x04
    4230:	0e 94 fd 21 	call	0x43fa	; 0x43fa <sprintf>
    4234:	8d b7       	in	r24, 0x3d	; 61
    4236:	9e b7       	in	r25, 0x3e	; 62
    4238:	06 96       	adiw	r24, 0x06	; 6
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	f8 94       	cli
    423e:	9e bf       	out	0x3e, r25	; 62
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	8d bf       	out	0x3d, r24	; 61
        lcd_sendString("Temp = ");
    4244:	8d e6       	ldi	r24, 0x6D	; 109
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <lcd_sendString>
        lcd_sendString(buffer);
    424c:	ce 01       	movw	r24, r28
    424e:	49 96       	adiw	r24, 0x19	; 25
    4250:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <lcd_sendString>
        if(digital_value > Value_set)
    4254:	8f 85       	ldd	r24, Y+15	; 0x0f
    4256:	28 2f       	mov	r18, r24
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	8a 89       	ldd	r24, Y+18	; 0x12
    425c:	9b 89       	ldd	r25, Y+19	; 0x13
    425e:	28 17       	cp	r18, r24
    4260:	39 07       	cpc	r19, r25
    4262:	30 f4       	brcc	.+12     	; 0x4270 <main+0x22a>
        {
        	DIO_voidSetPinValue(PORTB,PIN0,HIGH);
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	60 e0       	ldi	r22, 0x00	; 0
    4268:	41 e0       	ldi	r20, 0x01	; 1
    426a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    426e:	05 c0       	rjmp	.+10     	; 0x427a <main+0x234>
        }
        else
        {
        	DIO_voidSetPinValue(PORTB,PIN0,LOW);
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	60 e0       	ldi	r22, 0x00	; 0
    4274:	40 e0       	ldi	r20, 0x00	; 0
    4276:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPinValue>
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	aa e7       	ldi	r26, 0x7A	; 122
    4280:	b4 e4       	ldi	r27, 0x44	; 68
    4282:	8b 87       	std	Y+11, r24	; 0x0b
    4284:	9c 87       	std	Y+12, r25	; 0x0c
    4286:	ad 87       	std	Y+13, r26	; 0x0d
    4288:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428a:	6b 85       	ldd	r22, Y+11	; 0x0b
    428c:	7c 85       	ldd	r23, Y+12	; 0x0c
    428e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4290:	9e 85       	ldd	r25, Y+14	; 0x0e
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	4a ef       	ldi	r20, 0xFA	; 250
    4298:	54 e4       	ldi	r21, 0x44	; 68
    429a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	8f 83       	std	Y+7, r24	; 0x07
    42a4:	98 87       	std	Y+8, r25	; 0x08
    42a6:	a9 87       	std	Y+9, r26	; 0x09
    42a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42aa:	6f 81       	ldd	r22, Y+7	; 0x07
    42ac:	78 85       	ldd	r23, Y+8	; 0x08
    42ae:	89 85       	ldd	r24, Y+9	; 0x09
    42b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	40 e8       	ldi	r20, 0x80	; 128
    42b8:	5f e3       	ldi	r21, 0x3F	; 63
    42ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42be:	88 23       	and	r24, r24
    42c0:	2c f4       	brge	.+10     	; 0x42cc <main+0x286>
		__ticks = 1;
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	9e 83       	std	Y+6, r25	; 0x06
    42c8:	8d 83       	std	Y+5, r24	; 0x05
    42ca:	3f c0       	rjmp	.+126    	; 0x434a <main+0x304>
	else if (__tmp > 65535)
    42cc:	6f 81       	ldd	r22, Y+7	; 0x07
    42ce:	78 85       	ldd	r23, Y+8	; 0x08
    42d0:	89 85       	ldd	r24, Y+9	; 0x09
    42d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	3f ef       	ldi	r19, 0xFF	; 255
    42d8:	4f e7       	ldi	r20, 0x7F	; 127
    42da:	57 e4       	ldi	r21, 0x47	; 71
    42dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42e0:	18 16       	cp	r1, r24
    42e2:	4c f5       	brge	.+82     	; 0x4336 <main+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ec:	20 e0       	ldi	r18, 0x00	; 0
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	40 e2       	ldi	r20, 0x20	; 32
    42f2:	51 e4       	ldi	r21, 0x41	; 65
    42f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f8:	dc 01       	movw	r26, r24
    42fa:	cb 01       	movw	r24, r22
    42fc:	bc 01       	movw	r22, r24
    42fe:	cd 01       	movw	r24, r26
    4300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	9e 83       	std	Y+6, r25	; 0x06
    430a:	8d 83       	std	Y+5, r24	; 0x05
    430c:	0f c0       	rjmp	.+30     	; 0x432c <main+0x2e6>
    430e:	88 ec       	ldi	r24, 0xC8	; 200
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	9c 83       	std	Y+4, r25	; 0x04
    4314:	8b 83       	std	Y+3, r24	; 0x03
    4316:	8b 81       	ldd	r24, Y+3	; 0x03
    4318:	9c 81       	ldd	r25, Y+4	; 0x04
    431a:	01 97       	sbiw	r24, 0x01	; 1
    431c:	f1 f7       	brne	.-4      	; 0x431a <main+0x2d4>
    431e:	9c 83       	std	Y+4, r25	; 0x04
    4320:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4322:	8d 81       	ldd	r24, Y+5	; 0x05
    4324:	9e 81       	ldd	r25, Y+6	; 0x06
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	9e 83       	std	Y+6, r25	; 0x06
    432a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432c:	8d 81       	ldd	r24, Y+5	; 0x05
    432e:	9e 81       	ldd	r25, Y+6	; 0x06
    4330:	00 97       	sbiw	r24, 0x00	; 0
    4332:	69 f7       	brne	.-38     	; 0x430e <main+0x2c8>
    4334:	14 c0       	rjmp	.+40     	; 0x435e <main+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4336:	6f 81       	ldd	r22, Y+7	; 0x07
    4338:	78 85       	ldd	r23, Y+8	; 0x08
    433a:	89 85       	ldd	r24, Y+9	; 0x09
    433c:	9a 85       	ldd	r25, Y+10	; 0x0a
    433e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	9e 83       	std	Y+6, r25	; 0x06
    4348:	8d 83       	std	Y+5, r24	; 0x05
    434a:	8d 81       	ldd	r24, Y+5	; 0x05
    434c:	9e 81       	ldd	r25, Y+6	; 0x06
    434e:	9a 83       	std	Y+2, r25	; 0x02
    4350:	89 83       	std	Y+1, r24	; 0x01
    4352:	89 81       	ldd	r24, Y+1	; 0x01
    4354:	9a 81       	ldd	r25, Y+2	; 0x02
    4356:	01 97       	sbiw	r24, 0x01	; 1
    4358:	f1 f7       	brne	.-4      	; 0x4356 <main+0x310>
    435a:	9a 83       	std	Y+2, r25	; 0x02
    435c:	89 83       	std	Y+1, r24	; 0x01
        }
		_delay_ms(1000);
		lcd_clear();
    435e:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <lcd_clear>
    4362:	26 cf       	rjmp	.-436    	; 0x41b0 <main+0x16a>

00004364 <__udivmodhi4>:
    4364:	aa 1b       	sub	r26, r26
    4366:	bb 1b       	sub	r27, r27
    4368:	51 e1       	ldi	r21, 0x11	; 17
    436a:	07 c0       	rjmp	.+14     	; 0x437a <__udivmodhi4_ep>

0000436c <__udivmodhi4_loop>:
    436c:	aa 1f       	adc	r26, r26
    436e:	bb 1f       	adc	r27, r27
    4370:	a6 17       	cp	r26, r22
    4372:	b7 07       	cpc	r27, r23
    4374:	10 f0       	brcs	.+4      	; 0x437a <__udivmodhi4_ep>
    4376:	a6 1b       	sub	r26, r22
    4378:	b7 0b       	sbc	r27, r23

0000437a <__udivmodhi4_ep>:
    437a:	88 1f       	adc	r24, r24
    437c:	99 1f       	adc	r25, r25
    437e:	5a 95       	dec	r21
    4380:	a9 f7       	brne	.-22     	; 0x436c <__udivmodhi4_loop>
    4382:	80 95       	com	r24
    4384:	90 95       	com	r25
    4386:	bc 01       	movw	r22, r24
    4388:	cd 01       	movw	r24, r26
    438a:	08 95       	ret

0000438c <__prologue_saves__>:
    438c:	2f 92       	push	r2
    438e:	3f 92       	push	r3
    4390:	4f 92       	push	r4
    4392:	5f 92       	push	r5
    4394:	6f 92       	push	r6
    4396:	7f 92       	push	r7
    4398:	8f 92       	push	r8
    439a:	9f 92       	push	r9
    439c:	af 92       	push	r10
    439e:	bf 92       	push	r11
    43a0:	cf 92       	push	r12
    43a2:	df 92       	push	r13
    43a4:	ef 92       	push	r14
    43a6:	ff 92       	push	r15
    43a8:	0f 93       	push	r16
    43aa:	1f 93       	push	r17
    43ac:	cf 93       	push	r28
    43ae:	df 93       	push	r29
    43b0:	cd b7       	in	r28, 0x3d	; 61
    43b2:	de b7       	in	r29, 0x3e	; 62
    43b4:	ca 1b       	sub	r28, r26
    43b6:	db 0b       	sbc	r29, r27
    43b8:	0f b6       	in	r0, 0x3f	; 63
    43ba:	f8 94       	cli
    43bc:	de bf       	out	0x3e, r29	; 62
    43be:	0f be       	out	0x3f, r0	; 63
    43c0:	cd bf       	out	0x3d, r28	; 61
    43c2:	09 94       	ijmp

000043c4 <__epilogue_restores__>:
    43c4:	2a 88       	ldd	r2, Y+18	; 0x12
    43c6:	39 88       	ldd	r3, Y+17	; 0x11
    43c8:	48 88       	ldd	r4, Y+16	; 0x10
    43ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    43cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    43ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    43d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    43d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    43d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    43d6:	b9 84       	ldd	r11, Y+9	; 0x09
    43d8:	c8 84       	ldd	r12, Y+8	; 0x08
    43da:	df 80       	ldd	r13, Y+7	; 0x07
    43dc:	ee 80       	ldd	r14, Y+6	; 0x06
    43de:	fd 80       	ldd	r15, Y+5	; 0x05
    43e0:	0c 81       	ldd	r16, Y+4	; 0x04
    43e2:	1b 81       	ldd	r17, Y+3	; 0x03
    43e4:	aa 81       	ldd	r26, Y+2	; 0x02
    43e6:	b9 81       	ldd	r27, Y+1	; 0x01
    43e8:	ce 0f       	add	r28, r30
    43ea:	d1 1d       	adc	r29, r1
    43ec:	0f b6       	in	r0, 0x3f	; 63
    43ee:	f8 94       	cli
    43f0:	de bf       	out	0x3e, r29	; 62
    43f2:	0f be       	out	0x3f, r0	; 63
    43f4:	cd bf       	out	0x3d, r28	; 61
    43f6:	ed 01       	movw	r28, r26
    43f8:	08 95       	ret

000043fa <sprintf>:
    43fa:	ae e0       	ldi	r26, 0x0E	; 14
    43fc:	b0 e0       	ldi	r27, 0x00	; 0
    43fe:	e3 e0       	ldi	r30, 0x03	; 3
    4400:	f2 e2       	ldi	r31, 0x22	; 34
    4402:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__prologue_saves__+0x1c>
    4406:	0d 89       	ldd	r16, Y+21	; 0x15
    4408:	1e 89       	ldd	r17, Y+22	; 0x16
    440a:	86 e0       	ldi	r24, 0x06	; 6
    440c:	8c 83       	std	Y+4, r24	; 0x04
    440e:	1a 83       	std	Y+2, r17	; 0x02
    4410:	09 83       	std	Y+1, r16	; 0x01
    4412:	8f ef       	ldi	r24, 0xFF	; 255
    4414:	9f e7       	ldi	r25, 0x7F	; 127
    4416:	9e 83       	std	Y+6, r25	; 0x06
    4418:	8d 83       	std	Y+5, r24	; 0x05
    441a:	9e 01       	movw	r18, r28
    441c:	27 5e       	subi	r18, 0xE7	; 231
    441e:	3f 4f       	sbci	r19, 0xFF	; 255
    4420:	ce 01       	movw	r24, r28
    4422:	01 96       	adiw	r24, 0x01	; 1
    4424:	6f 89       	ldd	r22, Y+23	; 0x17
    4426:	78 8d       	ldd	r23, Y+24	; 0x18
    4428:	a9 01       	movw	r20, r18
    442a:	0e 94 21 22 	call	0x4442	; 0x4442 <vfprintf>
    442e:	2f 81       	ldd	r18, Y+7	; 0x07
    4430:	38 85       	ldd	r19, Y+8	; 0x08
    4432:	02 0f       	add	r16, r18
    4434:	13 1f       	adc	r17, r19
    4436:	f8 01       	movw	r30, r16
    4438:	10 82       	st	Z, r1
    443a:	2e 96       	adiw	r28, 0x0e	; 14
    443c:	e4 e0       	ldi	r30, 0x04	; 4
    443e:	0c 94 f0 21 	jmp	0x43e0	; 0x43e0 <__epilogue_restores__+0x1c>

00004442 <vfprintf>:
    4442:	ab e0       	ldi	r26, 0x0B	; 11
    4444:	b0 e0       	ldi	r27, 0x00	; 0
    4446:	e7 e2       	ldi	r30, 0x27	; 39
    4448:	f2 e2       	ldi	r31, 0x22	; 34
    444a:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__prologue_saves__>
    444e:	3c 01       	movw	r6, r24
    4450:	2b 01       	movw	r4, r22
    4452:	5a 01       	movw	r10, r20
    4454:	fc 01       	movw	r30, r24
    4456:	17 82       	std	Z+7, r1	; 0x07
    4458:	16 82       	std	Z+6, r1	; 0x06
    445a:	83 81       	ldd	r24, Z+3	; 0x03
    445c:	81 fd       	sbrc	r24, 1
    445e:	03 c0       	rjmp	.+6      	; 0x4466 <vfprintf+0x24>
    4460:	6f ef       	ldi	r22, 0xFF	; 255
    4462:	7f ef       	ldi	r23, 0xFF	; 255
    4464:	c6 c1       	rjmp	.+908    	; 0x47f2 <vfprintf+0x3b0>
    4466:	9a e0       	ldi	r25, 0x0A	; 10
    4468:	89 2e       	mov	r8, r25
    446a:	1e 01       	movw	r2, r28
    446c:	08 94       	sec
    446e:	21 1c       	adc	r2, r1
    4470:	31 1c       	adc	r3, r1
    4472:	f3 01       	movw	r30, r6
    4474:	23 81       	ldd	r18, Z+3	; 0x03
    4476:	f2 01       	movw	r30, r4
    4478:	23 fd       	sbrc	r18, 3
    447a:	85 91       	lpm	r24, Z+
    447c:	23 ff       	sbrs	r18, 3
    447e:	81 91       	ld	r24, Z+
    4480:	2f 01       	movw	r4, r30
    4482:	88 23       	and	r24, r24
    4484:	09 f4       	brne	.+2      	; 0x4488 <vfprintf+0x46>
    4486:	b2 c1       	rjmp	.+868    	; 0x47ec <vfprintf+0x3aa>
    4488:	85 32       	cpi	r24, 0x25	; 37
    448a:	39 f4       	brne	.+14     	; 0x449a <vfprintf+0x58>
    448c:	23 fd       	sbrc	r18, 3
    448e:	85 91       	lpm	r24, Z+
    4490:	23 ff       	sbrs	r18, 3
    4492:	81 91       	ld	r24, Z+
    4494:	2f 01       	movw	r4, r30
    4496:	85 32       	cpi	r24, 0x25	; 37
    4498:	29 f4       	brne	.+10     	; 0x44a4 <vfprintf+0x62>
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	b3 01       	movw	r22, r6
    449e:	0e 94 14 24 	call	0x4828	; 0x4828 <fputc>
    44a2:	e7 cf       	rjmp	.-50     	; 0x4472 <vfprintf+0x30>
    44a4:	98 2f       	mov	r25, r24
    44a6:	ff 24       	eor	r15, r15
    44a8:	ee 24       	eor	r14, r14
    44aa:	99 24       	eor	r9, r9
    44ac:	ff e1       	ldi	r31, 0x1F	; 31
    44ae:	ff 15       	cp	r31, r15
    44b0:	d0 f0       	brcs	.+52     	; 0x44e6 <vfprintf+0xa4>
    44b2:	9b 32       	cpi	r25, 0x2B	; 43
    44b4:	69 f0       	breq	.+26     	; 0x44d0 <vfprintf+0x8e>
    44b6:	9c 32       	cpi	r25, 0x2C	; 44
    44b8:	28 f4       	brcc	.+10     	; 0x44c4 <vfprintf+0x82>
    44ba:	90 32       	cpi	r25, 0x20	; 32
    44bc:	59 f0       	breq	.+22     	; 0x44d4 <vfprintf+0x92>
    44be:	93 32       	cpi	r25, 0x23	; 35
    44c0:	91 f4       	brne	.+36     	; 0x44e6 <vfprintf+0xa4>
    44c2:	0e c0       	rjmp	.+28     	; 0x44e0 <vfprintf+0x9e>
    44c4:	9d 32       	cpi	r25, 0x2D	; 45
    44c6:	49 f0       	breq	.+18     	; 0x44da <vfprintf+0x98>
    44c8:	90 33       	cpi	r25, 0x30	; 48
    44ca:	69 f4       	brne	.+26     	; 0x44e6 <vfprintf+0xa4>
    44cc:	41 e0       	ldi	r20, 0x01	; 1
    44ce:	24 c0       	rjmp	.+72     	; 0x4518 <vfprintf+0xd6>
    44d0:	52 e0       	ldi	r21, 0x02	; 2
    44d2:	f5 2a       	or	r15, r21
    44d4:	84 e0       	ldi	r24, 0x04	; 4
    44d6:	f8 2a       	or	r15, r24
    44d8:	28 c0       	rjmp	.+80     	; 0x452a <vfprintf+0xe8>
    44da:	98 e0       	ldi	r25, 0x08	; 8
    44dc:	f9 2a       	or	r15, r25
    44de:	25 c0       	rjmp	.+74     	; 0x452a <vfprintf+0xe8>
    44e0:	e0 e1       	ldi	r30, 0x10	; 16
    44e2:	fe 2a       	or	r15, r30
    44e4:	22 c0       	rjmp	.+68     	; 0x452a <vfprintf+0xe8>
    44e6:	f7 fc       	sbrc	r15, 7
    44e8:	29 c0       	rjmp	.+82     	; 0x453c <vfprintf+0xfa>
    44ea:	89 2f       	mov	r24, r25
    44ec:	80 53       	subi	r24, 0x30	; 48
    44ee:	8a 30       	cpi	r24, 0x0A	; 10
    44f0:	70 f4       	brcc	.+28     	; 0x450e <vfprintf+0xcc>
    44f2:	f6 fe       	sbrs	r15, 6
    44f4:	05 c0       	rjmp	.+10     	; 0x4500 <vfprintf+0xbe>
    44f6:	98 9c       	mul	r9, r8
    44f8:	90 2c       	mov	r9, r0
    44fa:	11 24       	eor	r1, r1
    44fc:	98 0e       	add	r9, r24
    44fe:	15 c0       	rjmp	.+42     	; 0x452a <vfprintf+0xe8>
    4500:	e8 9c       	mul	r14, r8
    4502:	e0 2c       	mov	r14, r0
    4504:	11 24       	eor	r1, r1
    4506:	e8 0e       	add	r14, r24
    4508:	f0 e2       	ldi	r31, 0x20	; 32
    450a:	ff 2a       	or	r15, r31
    450c:	0e c0       	rjmp	.+28     	; 0x452a <vfprintf+0xe8>
    450e:	9e 32       	cpi	r25, 0x2E	; 46
    4510:	29 f4       	brne	.+10     	; 0x451c <vfprintf+0xda>
    4512:	f6 fc       	sbrc	r15, 6
    4514:	6b c1       	rjmp	.+726    	; 0x47ec <vfprintf+0x3aa>
    4516:	40 e4       	ldi	r20, 0x40	; 64
    4518:	f4 2a       	or	r15, r20
    451a:	07 c0       	rjmp	.+14     	; 0x452a <vfprintf+0xe8>
    451c:	9c 36       	cpi	r25, 0x6C	; 108
    451e:	19 f4       	brne	.+6      	; 0x4526 <vfprintf+0xe4>
    4520:	50 e8       	ldi	r21, 0x80	; 128
    4522:	f5 2a       	or	r15, r21
    4524:	02 c0       	rjmp	.+4      	; 0x452a <vfprintf+0xe8>
    4526:	98 36       	cpi	r25, 0x68	; 104
    4528:	49 f4       	brne	.+18     	; 0x453c <vfprintf+0xfa>
    452a:	f2 01       	movw	r30, r4
    452c:	23 fd       	sbrc	r18, 3
    452e:	95 91       	lpm	r25, Z+
    4530:	23 ff       	sbrs	r18, 3
    4532:	91 91       	ld	r25, Z+
    4534:	2f 01       	movw	r4, r30
    4536:	99 23       	and	r25, r25
    4538:	09 f0       	breq	.+2      	; 0x453c <vfprintf+0xfa>
    453a:	b8 cf       	rjmp	.-144    	; 0x44ac <vfprintf+0x6a>
    453c:	89 2f       	mov	r24, r25
    453e:	85 54       	subi	r24, 0x45	; 69
    4540:	83 30       	cpi	r24, 0x03	; 3
    4542:	18 f0       	brcs	.+6      	; 0x454a <vfprintf+0x108>
    4544:	80 52       	subi	r24, 0x20	; 32
    4546:	83 30       	cpi	r24, 0x03	; 3
    4548:	38 f4       	brcc	.+14     	; 0x4558 <vfprintf+0x116>
    454a:	44 e0       	ldi	r20, 0x04	; 4
    454c:	50 e0       	ldi	r21, 0x00	; 0
    454e:	a4 0e       	add	r10, r20
    4550:	b5 1e       	adc	r11, r21
    4552:	5f e3       	ldi	r21, 0x3F	; 63
    4554:	59 83       	std	Y+1, r21	; 0x01
    4556:	0f c0       	rjmp	.+30     	; 0x4576 <vfprintf+0x134>
    4558:	93 36       	cpi	r25, 0x63	; 99
    455a:	31 f0       	breq	.+12     	; 0x4568 <vfprintf+0x126>
    455c:	93 37       	cpi	r25, 0x73	; 115
    455e:	79 f0       	breq	.+30     	; 0x457e <vfprintf+0x13c>
    4560:	93 35       	cpi	r25, 0x53	; 83
    4562:	09 f0       	breq	.+2      	; 0x4566 <vfprintf+0x124>
    4564:	56 c0       	rjmp	.+172    	; 0x4612 <vfprintf+0x1d0>
    4566:	20 c0       	rjmp	.+64     	; 0x45a8 <vfprintf+0x166>
    4568:	f5 01       	movw	r30, r10
    456a:	80 81       	ld	r24, Z
    456c:	89 83       	std	Y+1, r24	; 0x01
    456e:	42 e0       	ldi	r20, 0x02	; 2
    4570:	50 e0       	ldi	r21, 0x00	; 0
    4572:	a4 0e       	add	r10, r20
    4574:	b5 1e       	adc	r11, r21
    4576:	61 01       	movw	r12, r2
    4578:	01 e0       	ldi	r16, 0x01	; 1
    457a:	10 e0       	ldi	r17, 0x00	; 0
    457c:	12 c0       	rjmp	.+36     	; 0x45a2 <vfprintf+0x160>
    457e:	f5 01       	movw	r30, r10
    4580:	c0 80       	ld	r12, Z
    4582:	d1 80       	ldd	r13, Z+1	; 0x01
    4584:	f6 fc       	sbrc	r15, 6
    4586:	03 c0       	rjmp	.+6      	; 0x458e <vfprintf+0x14c>
    4588:	6f ef       	ldi	r22, 0xFF	; 255
    458a:	7f ef       	ldi	r23, 0xFF	; 255
    458c:	02 c0       	rjmp	.+4      	; 0x4592 <vfprintf+0x150>
    458e:	69 2d       	mov	r22, r9
    4590:	70 e0       	ldi	r23, 0x00	; 0
    4592:	42 e0       	ldi	r20, 0x02	; 2
    4594:	50 e0       	ldi	r21, 0x00	; 0
    4596:	a4 0e       	add	r10, r20
    4598:	b5 1e       	adc	r11, r21
    459a:	c6 01       	movw	r24, r12
    459c:	0e 94 09 24 	call	0x4812	; 0x4812 <strnlen>
    45a0:	8c 01       	movw	r16, r24
    45a2:	5f e7       	ldi	r21, 0x7F	; 127
    45a4:	f5 22       	and	r15, r21
    45a6:	14 c0       	rjmp	.+40     	; 0x45d0 <vfprintf+0x18e>
    45a8:	f5 01       	movw	r30, r10
    45aa:	c0 80       	ld	r12, Z
    45ac:	d1 80       	ldd	r13, Z+1	; 0x01
    45ae:	f6 fc       	sbrc	r15, 6
    45b0:	03 c0       	rjmp	.+6      	; 0x45b8 <vfprintf+0x176>
    45b2:	6f ef       	ldi	r22, 0xFF	; 255
    45b4:	7f ef       	ldi	r23, 0xFF	; 255
    45b6:	02 c0       	rjmp	.+4      	; 0x45bc <vfprintf+0x17a>
    45b8:	69 2d       	mov	r22, r9
    45ba:	70 e0       	ldi	r23, 0x00	; 0
    45bc:	42 e0       	ldi	r20, 0x02	; 2
    45be:	50 e0       	ldi	r21, 0x00	; 0
    45c0:	a4 0e       	add	r10, r20
    45c2:	b5 1e       	adc	r11, r21
    45c4:	c6 01       	movw	r24, r12
    45c6:	0e 94 fe 23 	call	0x47fc	; 0x47fc <strnlen_P>
    45ca:	8c 01       	movw	r16, r24
    45cc:	50 e8       	ldi	r21, 0x80	; 128
    45ce:	f5 2a       	or	r15, r21
    45d0:	f3 fe       	sbrs	r15, 3
    45d2:	07 c0       	rjmp	.+14     	; 0x45e2 <vfprintf+0x1a0>
    45d4:	1a c0       	rjmp	.+52     	; 0x460a <vfprintf+0x1c8>
    45d6:	80 e2       	ldi	r24, 0x20	; 32
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	b3 01       	movw	r22, r6
    45dc:	0e 94 14 24 	call	0x4828	; 0x4828 <fputc>
    45e0:	ea 94       	dec	r14
    45e2:	8e 2d       	mov	r24, r14
    45e4:	90 e0       	ldi	r25, 0x00	; 0
    45e6:	08 17       	cp	r16, r24
    45e8:	19 07       	cpc	r17, r25
    45ea:	a8 f3       	brcs	.-22     	; 0x45d6 <vfprintf+0x194>
    45ec:	0e c0       	rjmp	.+28     	; 0x460a <vfprintf+0x1c8>
    45ee:	f6 01       	movw	r30, r12
    45f0:	f7 fc       	sbrc	r15, 7
    45f2:	85 91       	lpm	r24, Z+
    45f4:	f7 fe       	sbrs	r15, 7
    45f6:	81 91       	ld	r24, Z+
    45f8:	6f 01       	movw	r12, r30
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	b3 01       	movw	r22, r6
    45fe:	0e 94 14 24 	call	0x4828	; 0x4828 <fputc>
    4602:	e1 10       	cpse	r14, r1
    4604:	ea 94       	dec	r14
    4606:	01 50       	subi	r16, 0x01	; 1
    4608:	10 40       	sbci	r17, 0x00	; 0
    460a:	01 15       	cp	r16, r1
    460c:	11 05       	cpc	r17, r1
    460e:	79 f7       	brne	.-34     	; 0x45ee <vfprintf+0x1ac>
    4610:	ea c0       	rjmp	.+468    	; 0x47e6 <vfprintf+0x3a4>
    4612:	94 36       	cpi	r25, 0x64	; 100
    4614:	11 f0       	breq	.+4      	; 0x461a <vfprintf+0x1d8>
    4616:	99 36       	cpi	r25, 0x69	; 105
    4618:	69 f5       	brne	.+90     	; 0x4674 <vfprintf+0x232>
    461a:	f7 fe       	sbrs	r15, 7
    461c:	08 c0       	rjmp	.+16     	; 0x462e <vfprintf+0x1ec>
    461e:	f5 01       	movw	r30, r10
    4620:	20 81       	ld	r18, Z
    4622:	31 81       	ldd	r19, Z+1	; 0x01
    4624:	42 81       	ldd	r20, Z+2	; 0x02
    4626:	53 81       	ldd	r21, Z+3	; 0x03
    4628:	84 e0       	ldi	r24, 0x04	; 4
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	0a c0       	rjmp	.+20     	; 0x4642 <vfprintf+0x200>
    462e:	f5 01       	movw	r30, r10
    4630:	80 81       	ld	r24, Z
    4632:	91 81       	ldd	r25, Z+1	; 0x01
    4634:	9c 01       	movw	r18, r24
    4636:	44 27       	eor	r20, r20
    4638:	37 fd       	sbrc	r19, 7
    463a:	40 95       	com	r20
    463c:	54 2f       	mov	r21, r20
    463e:	82 e0       	ldi	r24, 0x02	; 2
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	a8 0e       	add	r10, r24
    4644:	b9 1e       	adc	r11, r25
    4646:	9f e6       	ldi	r25, 0x6F	; 111
    4648:	f9 22       	and	r15, r25
    464a:	57 ff       	sbrs	r21, 7
    464c:	09 c0       	rjmp	.+18     	; 0x4660 <vfprintf+0x21e>
    464e:	50 95       	com	r21
    4650:	40 95       	com	r20
    4652:	30 95       	com	r19
    4654:	21 95       	neg	r18
    4656:	3f 4f       	sbci	r19, 0xFF	; 255
    4658:	4f 4f       	sbci	r20, 0xFF	; 255
    465a:	5f 4f       	sbci	r21, 0xFF	; 255
    465c:	e0 e8       	ldi	r30, 0x80	; 128
    465e:	fe 2a       	or	r15, r30
    4660:	ca 01       	movw	r24, r20
    4662:	b9 01       	movw	r22, r18
    4664:	a1 01       	movw	r20, r2
    4666:	2a e0       	ldi	r18, 0x0A	; 10
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	0e 94 40 24 	call	0x4880	; 0x4880 <__ultoa_invert>
    466e:	d8 2e       	mov	r13, r24
    4670:	d2 18       	sub	r13, r2
    4672:	40 c0       	rjmp	.+128    	; 0x46f4 <vfprintf+0x2b2>
    4674:	95 37       	cpi	r25, 0x75	; 117
    4676:	29 f4       	brne	.+10     	; 0x4682 <vfprintf+0x240>
    4678:	1f 2d       	mov	r17, r15
    467a:	1f 7e       	andi	r17, 0xEF	; 239
    467c:	2a e0       	ldi	r18, 0x0A	; 10
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	1d c0       	rjmp	.+58     	; 0x46bc <vfprintf+0x27a>
    4682:	1f 2d       	mov	r17, r15
    4684:	19 7f       	andi	r17, 0xF9	; 249
    4686:	9f 36       	cpi	r25, 0x6F	; 111
    4688:	61 f0       	breq	.+24     	; 0x46a2 <vfprintf+0x260>
    468a:	90 37       	cpi	r25, 0x70	; 112
    468c:	20 f4       	brcc	.+8      	; 0x4696 <vfprintf+0x254>
    468e:	98 35       	cpi	r25, 0x58	; 88
    4690:	09 f0       	breq	.+2      	; 0x4694 <vfprintf+0x252>
    4692:	ac c0       	rjmp	.+344    	; 0x47ec <vfprintf+0x3aa>
    4694:	0f c0       	rjmp	.+30     	; 0x46b4 <vfprintf+0x272>
    4696:	90 37       	cpi	r25, 0x70	; 112
    4698:	39 f0       	breq	.+14     	; 0x46a8 <vfprintf+0x266>
    469a:	98 37       	cpi	r25, 0x78	; 120
    469c:	09 f0       	breq	.+2      	; 0x46a0 <vfprintf+0x25e>
    469e:	a6 c0       	rjmp	.+332    	; 0x47ec <vfprintf+0x3aa>
    46a0:	04 c0       	rjmp	.+8      	; 0x46aa <vfprintf+0x268>
    46a2:	28 e0       	ldi	r18, 0x08	; 8
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	0a c0       	rjmp	.+20     	; 0x46bc <vfprintf+0x27a>
    46a8:	10 61       	ori	r17, 0x10	; 16
    46aa:	14 fd       	sbrc	r17, 4
    46ac:	14 60       	ori	r17, 0x04	; 4
    46ae:	20 e1       	ldi	r18, 0x10	; 16
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	04 c0       	rjmp	.+8      	; 0x46bc <vfprintf+0x27a>
    46b4:	14 fd       	sbrc	r17, 4
    46b6:	16 60       	ori	r17, 0x06	; 6
    46b8:	20 e1       	ldi	r18, 0x10	; 16
    46ba:	32 e0       	ldi	r19, 0x02	; 2
    46bc:	17 ff       	sbrs	r17, 7
    46be:	08 c0       	rjmp	.+16     	; 0x46d0 <vfprintf+0x28e>
    46c0:	f5 01       	movw	r30, r10
    46c2:	60 81       	ld	r22, Z
    46c4:	71 81       	ldd	r23, Z+1	; 0x01
    46c6:	82 81       	ldd	r24, Z+2	; 0x02
    46c8:	93 81       	ldd	r25, Z+3	; 0x03
    46ca:	44 e0       	ldi	r20, 0x04	; 4
    46cc:	50 e0       	ldi	r21, 0x00	; 0
    46ce:	08 c0       	rjmp	.+16     	; 0x46e0 <vfprintf+0x29e>
    46d0:	f5 01       	movw	r30, r10
    46d2:	80 81       	ld	r24, Z
    46d4:	91 81       	ldd	r25, Z+1	; 0x01
    46d6:	bc 01       	movw	r22, r24
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	42 e0       	ldi	r20, 0x02	; 2
    46de:	50 e0       	ldi	r21, 0x00	; 0
    46e0:	a4 0e       	add	r10, r20
    46e2:	b5 1e       	adc	r11, r21
    46e4:	a1 01       	movw	r20, r2
    46e6:	0e 94 40 24 	call	0x4880	; 0x4880 <__ultoa_invert>
    46ea:	d8 2e       	mov	r13, r24
    46ec:	d2 18       	sub	r13, r2
    46ee:	8f e7       	ldi	r24, 0x7F	; 127
    46f0:	f8 2e       	mov	r15, r24
    46f2:	f1 22       	and	r15, r17
    46f4:	f6 fe       	sbrs	r15, 6
    46f6:	0b c0       	rjmp	.+22     	; 0x470e <vfprintf+0x2cc>
    46f8:	5e ef       	ldi	r21, 0xFE	; 254
    46fa:	f5 22       	and	r15, r21
    46fc:	d9 14       	cp	r13, r9
    46fe:	38 f4       	brcc	.+14     	; 0x470e <vfprintf+0x2cc>
    4700:	f4 fe       	sbrs	r15, 4
    4702:	07 c0       	rjmp	.+14     	; 0x4712 <vfprintf+0x2d0>
    4704:	f2 fc       	sbrc	r15, 2
    4706:	05 c0       	rjmp	.+10     	; 0x4712 <vfprintf+0x2d0>
    4708:	8f ee       	ldi	r24, 0xEF	; 239
    470a:	f8 22       	and	r15, r24
    470c:	02 c0       	rjmp	.+4      	; 0x4712 <vfprintf+0x2d0>
    470e:	1d 2d       	mov	r17, r13
    4710:	01 c0       	rjmp	.+2      	; 0x4714 <vfprintf+0x2d2>
    4712:	19 2d       	mov	r17, r9
    4714:	f4 fe       	sbrs	r15, 4
    4716:	0d c0       	rjmp	.+26     	; 0x4732 <vfprintf+0x2f0>
    4718:	fe 01       	movw	r30, r28
    471a:	ed 0d       	add	r30, r13
    471c:	f1 1d       	adc	r31, r1
    471e:	80 81       	ld	r24, Z
    4720:	80 33       	cpi	r24, 0x30	; 48
    4722:	19 f4       	brne	.+6      	; 0x472a <vfprintf+0x2e8>
    4724:	99 ee       	ldi	r25, 0xE9	; 233
    4726:	f9 22       	and	r15, r25
    4728:	08 c0       	rjmp	.+16     	; 0x473a <vfprintf+0x2f8>
    472a:	1f 5f       	subi	r17, 0xFF	; 255
    472c:	f2 fe       	sbrs	r15, 2
    472e:	05 c0       	rjmp	.+10     	; 0x473a <vfprintf+0x2f8>
    4730:	03 c0       	rjmp	.+6      	; 0x4738 <vfprintf+0x2f6>
    4732:	8f 2d       	mov	r24, r15
    4734:	86 78       	andi	r24, 0x86	; 134
    4736:	09 f0       	breq	.+2      	; 0x473a <vfprintf+0x2f8>
    4738:	1f 5f       	subi	r17, 0xFF	; 255
    473a:	0f 2d       	mov	r16, r15
    473c:	f3 fc       	sbrc	r15, 3
    473e:	14 c0       	rjmp	.+40     	; 0x4768 <vfprintf+0x326>
    4740:	f0 fe       	sbrs	r15, 0
    4742:	0f c0       	rjmp	.+30     	; 0x4762 <vfprintf+0x320>
    4744:	1e 15       	cp	r17, r14
    4746:	10 f0       	brcs	.+4      	; 0x474c <vfprintf+0x30a>
    4748:	9d 2c       	mov	r9, r13
    474a:	0b c0       	rjmp	.+22     	; 0x4762 <vfprintf+0x320>
    474c:	9d 2c       	mov	r9, r13
    474e:	9e 0c       	add	r9, r14
    4750:	91 1a       	sub	r9, r17
    4752:	1e 2d       	mov	r17, r14
    4754:	06 c0       	rjmp	.+12     	; 0x4762 <vfprintf+0x320>
    4756:	80 e2       	ldi	r24, 0x20	; 32
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	b3 01       	movw	r22, r6
    475c:	0e 94 14 24 	call	0x4828	; 0x4828 <fputc>
    4760:	1f 5f       	subi	r17, 0xFF	; 255
    4762:	1e 15       	cp	r17, r14
    4764:	c0 f3       	brcs	.-16     	; 0x4756 <vfprintf+0x314>
    4766:	04 c0       	rjmp	.+8      	; 0x4770 <vfprintf+0x32e>
    4768:	1e 15       	cp	r17, r14
    476a:	10 f4       	brcc	.+4      	; 0x4770 <vfprintf+0x32e>
    476c:	e1 1a       	sub	r14, r17
    476e:	01 c0       	rjmp	.+2      	; 0x4772 <vfprintf+0x330>
    4770:	ee 24       	eor	r14, r14
    4772:	04 ff       	sbrs	r16, 4
    4774:	0f c0       	rjmp	.+30     	; 0x4794 <vfprintf+0x352>
    4776:	80 e3       	ldi	r24, 0x30	; 48
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	b3 01       	movw	r22, r6
    477c:	0e 94 14 24 	call	0x4828	; 0x4828 <fputc>
    4780:	02 ff       	sbrs	r16, 2
    4782:	1d c0       	rjmp	.+58     	; 0x47be <vfprintf+0x37c>
    4784:	01 fd       	sbrc	r16, 1
    4786:	03 c0       	rjmp	.+6      	; 0x478e <vfprintf+0x34c>
    4788:	88 e7       	ldi	r24, 0x78	; 120
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	0e c0       	rjmp	.+28     	; 0x47aa <vfprintf+0x368>
    478e:	88 e5       	ldi	r24, 0x58	; 88
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	0b c0       	rjmp	.+22     	; 0x47aa <vfprintf+0x368>
    4794:	80 2f       	mov	r24, r16
    4796:	86 78       	andi	r24, 0x86	; 134
    4798:	91 f0       	breq	.+36     	; 0x47be <vfprintf+0x37c>
    479a:	01 ff       	sbrs	r16, 1
    479c:	02 c0       	rjmp	.+4      	; 0x47a2 <vfprintf+0x360>
    479e:	8b e2       	ldi	r24, 0x2B	; 43
    47a0:	01 c0       	rjmp	.+2      	; 0x47a4 <vfprintf+0x362>
    47a2:	80 e2       	ldi	r24, 0x20	; 32
    47a4:	f7 fc       	sbrc	r15, 7
    47a6:	8d e2       	ldi	r24, 0x2D	; 45
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	b3 01       	movw	r22, r6
    47ac:	0e 94 14 24 	call	0x4828	; 0x4828 <fputc>
    47b0:	06 c0       	rjmp	.+12     	; 0x47be <vfprintf+0x37c>
    47b2:	80 e3       	ldi	r24, 0x30	; 48
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	b3 01       	movw	r22, r6
    47b8:	0e 94 14 24 	call	0x4828	; 0x4828 <fputc>
    47bc:	9a 94       	dec	r9
    47be:	d9 14       	cp	r13, r9
    47c0:	c0 f3       	brcs	.-16     	; 0x47b2 <vfprintf+0x370>
    47c2:	da 94       	dec	r13
    47c4:	f1 01       	movw	r30, r2
    47c6:	ed 0d       	add	r30, r13
    47c8:	f1 1d       	adc	r31, r1
    47ca:	80 81       	ld	r24, Z
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	b3 01       	movw	r22, r6
    47d0:	0e 94 14 24 	call	0x4828	; 0x4828 <fputc>
    47d4:	dd 20       	and	r13, r13
    47d6:	a9 f7       	brne	.-22     	; 0x47c2 <vfprintf+0x380>
    47d8:	06 c0       	rjmp	.+12     	; 0x47e6 <vfprintf+0x3a4>
    47da:	80 e2       	ldi	r24, 0x20	; 32
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	b3 01       	movw	r22, r6
    47e0:	0e 94 14 24 	call	0x4828	; 0x4828 <fputc>
    47e4:	ea 94       	dec	r14
    47e6:	ee 20       	and	r14, r14
    47e8:	c1 f7       	brne	.-16     	; 0x47da <vfprintf+0x398>
    47ea:	43 ce       	rjmp	.-890    	; 0x4472 <vfprintf+0x30>
    47ec:	f3 01       	movw	r30, r6
    47ee:	66 81       	ldd	r22, Z+6	; 0x06
    47f0:	77 81       	ldd	r23, Z+7	; 0x07
    47f2:	cb 01       	movw	r24, r22
    47f4:	2b 96       	adiw	r28, 0x0b	; 11
    47f6:	e2 e1       	ldi	r30, 0x12	; 18
    47f8:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__epilogue_restores__>

000047fc <strnlen_P>:
    47fc:	fc 01       	movw	r30, r24
    47fe:	05 90       	lpm	r0, Z+
    4800:	61 50       	subi	r22, 0x01	; 1
    4802:	70 40       	sbci	r23, 0x00	; 0
    4804:	01 10       	cpse	r0, r1
    4806:	d8 f7       	brcc	.-10     	; 0x47fe <strnlen_P+0x2>
    4808:	80 95       	com	r24
    480a:	90 95       	com	r25
    480c:	8e 0f       	add	r24, r30
    480e:	9f 1f       	adc	r25, r31
    4810:	08 95       	ret

00004812 <strnlen>:
    4812:	fc 01       	movw	r30, r24
    4814:	61 50       	subi	r22, 0x01	; 1
    4816:	70 40       	sbci	r23, 0x00	; 0
    4818:	01 90       	ld	r0, Z+
    481a:	01 10       	cpse	r0, r1
    481c:	d8 f7       	brcc	.-10     	; 0x4814 <strnlen+0x2>
    481e:	80 95       	com	r24
    4820:	90 95       	com	r25
    4822:	8e 0f       	add	r24, r30
    4824:	9f 1f       	adc	r25, r31
    4826:	08 95       	ret

00004828 <fputc>:
    4828:	0f 93       	push	r16
    482a:	1f 93       	push	r17
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
    4830:	8c 01       	movw	r16, r24
    4832:	eb 01       	movw	r28, r22
    4834:	8b 81       	ldd	r24, Y+3	; 0x03
    4836:	81 ff       	sbrs	r24, 1
    4838:	1b c0       	rjmp	.+54     	; 0x4870 <fputc+0x48>
    483a:	82 ff       	sbrs	r24, 2
    483c:	0d c0       	rjmp	.+26     	; 0x4858 <fputc+0x30>
    483e:	2e 81       	ldd	r18, Y+6	; 0x06
    4840:	3f 81       	ldd	r19, Y+7	; 0x07
    4842:	8c 81       	ldd	r24, Y+4	; 0x04
    4844:	9d 81       	ldd	r25, Y+5	; 0x05
    4846:	28 17       	cp	r18, r24
    4848:	39 07       	cpc	r19, r25
    484a:	64 f4       	brge	.+24     	; 0x4864 <fputc+0x3c>
    484c:	e8 81       	ld	r30, Y
    484e:	f9 81       	ldd	r31, Y+1	; 0x01
    4850:	01 93       	st	Z+, r16
    4852:	f9 83       	std	Y+1, r31	; 0x01
    4854:	e8 83       	st	Y, r30
    4856:	06 c0       	rjmp	.+12     	; 0x4864 <fputc+0x3c>
    4858:	e8 85       	ldd	r30, Y+8	; 0x08
    485a:	f9 85       	ldd	r31, Y+9	; 0x09
    485c:	80 2f       	mov	r24, r16
    485e:	09 95       	icall
    4860:	89 2b       	or	r24, r25
    4862:	31 f4       	brne	.+12     	; 0x4870 <fputc+0x48>
    4864:	8e 81       	ldd	r24, Y+6	; 0x06
    4866:	9f 81       	ldd	r25, Y+7	; 0x07
    4868:	01 96       	adiw	r24, 0x01	; 1
    486a:	9f 83       	std	Y+7, r25	; 0x07
    486c:	8e 83       	std	Y+6, r24	; 0x06
    486e:	02 c0       	rjmp	.+4      	; 0x4874 <fputc+0x4c>
    4870:	0f ef       	ldi	r16, 0xFF	; 255
    4872:	1f ef       	ldi	r17, 0xFF	; 255
    4874:	c8 01       	movw	r24, r16
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	1f 91       	pop	r17
    487c:	0f 91       	pop	r16
    487e:	08 95       	ret

00004880 <__ultoa_invert>:
    4880:	fa 01       	movw	r30, r20
    4882:	aa 27       	eor	r26, r26
    4884:	28 30       	cpi	r18, 0x08	; 8
    4886:	51 f1       	breq	.+84     	; 0x48dc <__ultoa_invert+0x5c>
    4888:	20 31       	cpi	r18, 0x10	; 16
    488a:	81 f1       	breq	.+96     	; 0x48ec <__ultoa_invert+0x6c>
    488c:	e8 94       	clt
    488e:	6f 93       	push	r22
    4890:	6e 7f       	andi	r22, 0xFE	; 254
    4892:	6e 5f       	subi	r22, 0xFE	; 254
    4894:	7f 4f       	sbci	r23, 0xFF	; 255
    4896:	8f 4f       	sbci	r24, 0xFF	; 255
    4898:	9f 4f       	sbci	r25, 0xFF	; 255
    489a:	af 4f       	sbci	r26, 0xFF	; 255
    489c:	b1 e0       	ldi	r27, 0x01	; 1
    489e:	3e d0       	rcall	.+124    	; 0x491c <__ultoa_invert+0x9c>
    48a0:	b4 e0       	ldi	r27, 0x04	; 4
    48a2:	3c d0       	rcall	.+120    	; 0x491c <__ultoa_invert+0x9c>
    48a4:	67 0f       	add	r22, r23
    48a6:	78 1f       	adc	r23, r24
    48a8:	89 1f       	adc	r24, r25
    48aa:	9a 1f       	adc	r25, r26
    48ac:	a1 1d       	adc	r26, r1
    48ae:	68 0f       	add	r22, r24
    48b0:	79 1f       	adc	r23, r25
    48b2:	8a 1f       	adc	r24, r26
    48b4:	91 1d       	adc	r25, r1
    48b6:	a1 1d       	adc	r26, r1
    48b8:	6a 0f       	add	r22, r26
    48ba:	71 1d       	adc	r23, r1
    48bc:	81 1d       	adc	r24, r1
    48be:	91 1d       	adc	r25, r1
    48c0:	a1 1d       	adc	r26, r1
    48c2:	20 d0       	rcall	.+64     	; 0x4904 <__ultoa_invert+0x84>
    48c4:	09 f4       	brne	.+2      	; 0x48c8 <__ultoa_invert+0x48>
    48c6:	68 94       	set
    48c8:	3f 91       	pop	r19
    48ca:	2a e0       	ldi	r18, 0x0A	; 10
    48cc:	26 9f       	mul	r18, r22
    48ce:	11 24       	eor	r1, r1
    48d0:	30 19       	sub	r19, r0
    48d2:	30 5d       	subi	r19, 0xD0	; 208
    48d4:	31 93       	st	Z+, r19
    48d6:	de f6       	brtc	.-74     	; 0x488e <__ultoa_invert+0xe>
    48d8:	cf 01       	movw	r24, r30
    48da:	08 95       	ret
    48dc:	46 2f       	mov	r20, r22
    48de:	47 70       	andi	r20, 0x07	; 7
    48e0:	40 5d       	subi	r20, 0xD0	; 208
    48e2:	41 93       	st	Z+, r20
    48e4:	b3 e0       	ldi	r27, 0x03	; 3
    48e6:	0f d0       	rcall	.+30     	; 0x4906 <__ultoa_invert+0x86>
    48e8:	c9 f7       	brne	.-14     	; 0x48dc <__ultoa_invert+0x5c>
    48ea:	f6 cf       	rjmp	.-20     	; 0x48d8 <__ultoa_invert+0x58>
    48ec:	46 2f       	mov	r20, r22
    48ee:	4f 70       	andi	r20, 0x0F	; 15
    48f0:	40 5d       	subi	r20, 0xD0	; 208
    48f2:	4a 33       	cpi	r20, 0x3A	; 58
    48f4:	18 f0       	brcs	.+6      	; 0x48fc <__ultoa_invert+0x7c>
    48f6:	49 5d       	subi	r20, 0xD9	; 217
    48f8:	31 fd       	sbrc	r19, 1
    48fa:	40 52       	subi	r20, 0x20	; 32
    48fc:	41 93       	st	Z+, r20
    48fe:	02 d0       	rcall	.+4      	; 0x4904 <__ultoa_invert+0x84>
    4900:	a9 f7       	brne	.-22     	; 0x48ec <__ultoa_invert+0x6c>
    4902:	ea cf       	rjmp	.-44     	; 0x48d8 <__ultoa_invert+0x58>
    4904:	b4 e0       	ldi	r27, 0x04	; 4
    4906:	a6 95       	lsr	r26
    4908:	97 95       	ror	r25
    490a:	87 95       	ror	r24
    490c:	77 95       	ror	r23
    490e:	67 95       	ror	r22
    4910:	ba 95       	dec	r27
    4912:	c9 f7       	brne	.-14     	; 0x4906 <__ultoa_invert+0x86>
    4914:	00 97       	sbiw	r24, 0x00	; 0
    4916:	61 05       	cpc	r22, r1
    4918:	71 05       	cpc	r23, r1
    491a:	08 95       	ret
    491c:	9b 01       	movw	r18, r22
    491e:	ac 01       	movw	r20, r24
    4920:	0a 2e       	mov	r0, r26
    4922:	06 94       	lsr	r0
    4924:	57 95       	ror	r21
    4926:	47 95       	ror	r20
    4928:	37 95       	ror	r19
    492a:	27 95       	ror	r18
    492c:	ba 95       	dec	r27
    492e:	c9 f7       	brne	.-14     	; 0x4922 <__ultoa_invert+0xa2>
    4930:	62 0f       	add	r22, r18
    4932:	73 1f       	adc	r23, r19
    4934:	84 1f       	adc	r24, r20
    4936:	95 1f       	adc	r25, r21
    4938:	a0 1d       	adc	r26, r0
    493a:	08 95       	ret

0000493c <_exit>:
    493c:	f8 94       	cli

0000493e <__stop_program>:
    493e:	ff cf       	rjmp	.-2      	; 0x493e <__stop_program>
