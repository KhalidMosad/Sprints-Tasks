
AVR_EEPROM_SPRINTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eaa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00001eaa  00001f1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001bf0  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001190  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000088ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009467  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e7 09 	call	0x13ce	; 0x13ce <main>
      7a:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 ec       	ldi	r26, 0xC5	; 197
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 ec       	ldi	r24, 0xC5	; 197
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidSetPinDirection>:
#include"BIT_MATH.h"
#include"DIO_register.h"
#include"DIO_interface.h"

void DIO_voidSetPinDirection		(ST_DIO_config_t * configurations)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_voidSetPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_voidSetPinDirection+0x8>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <DIO_voidSetPinDirection+0xa>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	89 83       	std	Y+1, r24	; 0x01
	if(OUTPUT==configurations->state)
     b48:	e9 81       	ldd	r30, Y+1	; 0x01
     b4a:	fa 81       	ldd	r31, Y+2	; 0x02
     b4c:	82 81       	ldd	r24, Z+2	; 0x02
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	09 f0       	breq	.+2      	; 0xb54 <DIO_voidSetPinDirection+0x1e>
     b52:	7a c0       	rjmp	.+244    	; 0xc48 <DIO_voidSetPinDirection+0x112>
	{
		switch (configurations->port_no)
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	80 81       	ld	r24, Z
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3e 83       	std	Y+6, r19	; 0x06
     b60:	2d 83       	std	Y+5, r18	; 0x05
     b62:	8d 81       	ldd	r24, Y+5	; 0x05
     b64:	9e 81       	ldd	r25, Y+6	; 0x06
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	91 05       	cpc	r25, r1
     b6a:	61 f1       	breq	.+88     	; 0xbc4 <DIO_voidSetPinDirection+0x8e>
     b6c:	2d 81       	ldd	r18, Y+5	; 0x05
     b6e:	3e 81       	ldd	r19, Y+6	; 0x06
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	31 05       	cpc	r19, r1
     b74:	2c f4       	brge	.+10     	; 0xb80 <DIO_voidSetPinDirection+0x4a>
     b76:	8d 81       	ldd	r24, Y+5	; 0x05
     b78:	9e 81       	ldd	r25, Y+6	; 0x06
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	69 f0       	breq	.+26     	; 0xb98 <DIO_voidSetPinDirection+0x62>
     b7e:	e7 c0       	rjmp	.+462    	; 0xd4e <DIO_voidSetPinDirection+0x218>
     b80:	2d 81       	ldd	r18, Y+5	; 0x05
     b82:	3e 81       	ldd	r19, Y+6	; 0x06
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	99 f1       	breq	.+102    	; 0xbf0 <DIO_voidSetPinDirection+0xba>
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	9e 81       	ldd	r25, Y+6	; 0x06
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <DIO_voidSetPinDirection+0x60>
     b94:	43 c0       	rjmp	.+134    	; 0xc1c <DIO_voidSetPinDirection+0xe6>
     b96:	db c0       	rjmp	.+438    	; 0xd4e <DIO_voidSetPinDirection+0x218>
		{
			case PORTA:SET_BIT(DDRA, configurations->pin_no); break;
     b98:	aa e3       	ldi	r26, 0x3A	; 58
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	ea e3       	ldi	r30, 0x3A	; 58
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	48 2f       	mov	r20, r24
     ba4:	e9 81       	ldd	r30, Y+1	; 0x01
     ba6:	fa 81       	ldd	r31, Y+2	; 0x02
     ba8:	81 81       	ldd	r24, Z+1	; 0x01
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 2e       	mov	r0, r18
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_voidSetPinDirection+0x84>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	0a 94       	dec	r0
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_voidSetPinDirection+0x80>
     bbe:	84 2b       	or	r24, r20
     bc0:	8c 93       	st	X, r24
     bc2:	c5 c0       	rjmp	.+394    	; 0xd4e <DIO_voidSetPinDirection+0x218>
			case PORTB:SET_BIT(DDRB,  configurations->pin_no); break;
     bc4:	a7 e3       	ldi	r26, 0x37	; 55
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e7 e3       	ldi	r30, 0x37	; 55
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	48 2f       	mov	r20, r24
     bd0:	e9 81       	ldd	r30, Y+1	; 0x01
     bd2:	fa 81       	ldd	r31, Y+2	; 0x02
     bd4:	81 81       	ldd	r24, Z+1	; 0x01
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	02 2e       	mov	r0, r18
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <DIO_voidSetPinDirection+0xb0>
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	0a 94       	dec	r0
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <DIO_voidSetPinDirection+0xac>
     bea:	84 2b       	or	r24, r20
     bec:	8c 93       	st	X, r24
     bee:	af c0       	rjmp	.+350    	; 0xd4e <DIO_voidSetPinDirection+0x218>
			case PORTC:SET_BIT(DDRC,  configurations->pin_no); break;
     bf0:	a4 e3       	ldi	r26, 0x34	; 52
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e4 e3       	ldi	r30, 0x34	; 52
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	48 2f       	mov	r20, r24
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	02 2e       	mov	r0, r18
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <DIO_voidSetPinDirection+0xdc>
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	0a 94       	dec	r0
     c14:	e2 f7       	brpl	.-8      	; 0xc0e <DIO_voidSetPinDirection+0xd8>
     c16:	84 2b       	or	r24, r20
     c18:	8c 93       	st	X, r24
     c1a:	99 c0       	rjmp	.+306    	; 0xd4e <DIO_voidSetPinDirection+0x218>
			case PORTD:SET_BIT(DDRD,  configurations->pin_no); break;
     c1c:	a1 e3       	ldi	r26, 0x31	; 49
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e1 e3       	ldi	r30, 0x31	; 49
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	48 2f       	mov	r20, r24
     c28:	e9 81       	ldd	r30, Y+1	; 0x01
     c2a:	fa 81       	ldd	r31, Y+2	; 0x02
     c2c:	81 81       	ldd	r24, Z+1	; 0x01
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 2e       	mov	r0, r18
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <DIO_voidSetPinDirection+0x108>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	0a 94       	dec	r0
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <DIO_voidSetPinDirection+0x104>
     c42:	84 2b       	or	r24, r20
     c44:	8c 93       	st	X, r24
     c46:	83 c0       	rjmp	.+262    	; 0xd4e <DIO_voidSetPinDirection+0x218>
	
		}	
	}
	else if(INPUT==configurations->state)
     c48:	e9 81       	ldd	r30, Y+1	; 0x01
     c4a:	fa 81       	ldd	r31, Y+2	; 0x02
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	88 23       	and	r24, r24
     c50:	09 f0       	breq	.+2      	; 0xc54 <DIO_voidSetPinDirection+0x11e>
     c52:	7d c0       	rjmp	.+250    	; 0xd4e <DIO_voidSetPinDirection+0x218>
	{
		switch(configurations->port_no)
     c54:	e9 81       	ldd	r30, Y+1	; 0x01
     c56:	fa 81       	ldd	r31, Y+2	; 0x02
     c58:	80 81       	ld	r24, Z
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	3c 83       	std	Y+4, r19	; 0x04
     c60:	2b 83       	std	Y+3, r18	; 0x03
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	9c 81       	ldd	r25, Y+4	; 0x04
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	91 05       	cpc	r25, r1
     c6a:	69 f1       	breq	.+90     	; 0xcc6 <DIO_voidSetPinDirection+0x190>
     c6c:	2b 81       	ldd	r18, Y+3	; 0x03
     c6e:	3c 81       	ldd	r19, Y+4	; 0x04
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	2c f4       	brge	.+10     	; 0xc80 <DIO_voidSetPinDirection+0x14a>
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	69 f0       	breq	.+26     	; 0xc98 <DIO_voidSetPinDirection+0x162>
     c7e:	67 c0       	rjmp	.+206    	; 0xd4e <DIO_voidSetPinDirection+0x218>
     c80:	2b 81       	ldd	r18, Y+3	; 0x03
     c82:	3c 81       	ldd	r19, Y+4	; 0x04
     c84:	22 30       	cpi	r18, 0x02	; 2
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f1       	breq	.+106    	; 0xcf4 <DIO_voidSetPinDirection+0x1be>
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	9c 81       	ldd	r25, Y+4	; 0x04
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <DIO_voidSetPinDirection+0x160>
     c94:	46 c0       	rjmp	.+140    	; 0xd22 <DIO_voidSetPinDirection+0x1ec>
     c96:	5b c0       	rjmp	.+182    	; 0xd4e <DIO_voidSetPinDirection+0x218>
		{
			case PORTA:CLR_BIT(DDRA,  configurations->pin_no); break;
     c98:	aa e3       	ldi	r26, 0x3A	; 58
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	ea e3       	ldi	r30, 0x3A	; 58
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	48 2f       	mov	r20, r24
     ca4:	e9 81       	ldd	r30, Y+1	; 0x01
     ca6:	fa 81       	ldd	r31, Y+2	; 0x02
     ca8:	81 81       	ldd	r24, Z+1	; 0x01
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	02 2e       	mov	r0, r18
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <DIO_voidSetPinDirection+0x184>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	0a 94       	dec	r0
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <DIO_voidSetPinDirection+0x180>
     cbe:	80 95       	com	r24
     cc0:	84 23       	and	r24, r20
     cc2:	8c 93       	st	X, r24
     cc4:	44 c0       	rjmp	.+136    	; 0xd4e <DIO_voidSetPinDirection+0x218>
			case PORTB:CLR_BIT(DDRB,  configurations->pin_no); break;
     cc6:	a7 e3       	ldi	r26, 0x37	; 55
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e7 e3       	ldi	r30, 0x37	; 55
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	e9 81       	ldd	r30, Y+1	; 0x01
     cd4:	fa 81       	ldd	r31, Y+2	; 0x02
     cd6:	81 81       	ldd	r24, Z+1	; 0x01
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_voidSetPinDirection+0x1b2>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_voidSetPinDirection+0x1ae>
     cec:	80 95       	com	r24
     cee:	84 23       	and	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	2d c0       	rjmp	.+90     	; 0xd4e <DIO_voidSetPinDirection+0x218>
		    case PORTC:CLR_BIT(DDRC,  configurations->pin_no); break;
     cf4:	a4 e3       	ldi	r26, 0x34	; 52
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e4 e3       	ldi	r30, 0x34	; 52
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	e9 81       	ldd	r30, Y+1	; 0x01
     d02:	fa 81       	ldd	r31, Y+2	; 0x02
     d04:	81 81       	ldd	r24, Z+1	; 0x01
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 2e       	mov	r0, r18
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <DIO_voidSetPinDirection+0x1e0>
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <DIO_voidSetPinDirection+0x1dc>
     d1a:	80 95       	com	r24
     d1c:	84 23       	and	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	16 c0       	rjmp	.+44     	; 0xd4e <DIO_voidSetPinDirection+0x218>
		    case PORTD:CLR_BIT(DDRD,  configurations->pin_no); break;
     d22:	a1 e3       	ldi	r26, 0x31	; 49
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e1 e3       	ldi	r30, 0x31	; 49
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	e9 81       	ldd	r30, Y+1	; 0x01
     d30:	fa 81       	ldd	r31, Y+2	; 0x02
     d32:	81 81       	ldd	r24, Z+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_voidSetPinDirection+0x20e>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_voidSetPinDirection+0x20a>
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8c 93       	st	X, r24
	else
	{
		
	}
	
}
     d4e:	26 96       	adiw	r28, 0x06	; 6
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue			(uint8_t copy_uint8_tport, uint8_t copy_uint8_tpin, uint8_t copy_uint8_tvalue)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	27 97       	sbiw	r28, 0x07	; 7
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	89 83       	std	Y+1, r24	; 0x01
     d76:	6a 83       	std	Y+2, r22	; 0x02
     d78:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==copy_uint8_tvalue)
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	09 f0       	breq	.+2      	; 0xd82 <DIO_voidSetPinValue+0x22>
     d80:	6f c0       	rjmp	.+222    	; 0xe60 <DIO_voidSetPinValue+0x100>
	{
		switch (copy_uint8_tport)
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	3f 83       	std	Y+7, r19	; 0x07
     d8a:	2e 83       	std	Y+6, r18	; 0x06
     d8c:	8e 81       	ldd	r24, Y+6	; 0x06
     d8e:	9f 81       	ldd	r25, Y+7	; 0x07
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	91 05       	cpc	r25, r1
     d94:	49 f1       	breq	.+82     	; 0xde8 <DIO_voidSetPinValue+0x88>
     d96:	2e 81       	ldd	r18, Y+6	; 0x06
     d98:	3f 81       	ldd	r19, Y+7	; 0x07
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	2c f4       	brge	.+10     	; 0xdaa <DIO_voidSetPinValue+0x4a>
     da0:	8e 81       	ldd	r24, Y+6	; 0x06
     da2:	9f 81       	ldd	r25, Y+7	; 0x07
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	61 f0       	breq	.+24     	; 0xdc0 <DIO_voidSetPinValue+0x60>
     da8:	d2 c0       	rjmp	.+420    	; 0xf4e <DIO_voidSetPinValue+0x1ee>
     daa:	2e 81       	ldd	r18, Y+6	; 0x06
     dac:	3f 81       	ldd	r19, Y+7	; 0x07
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	71 f1       	breq	.+92     	; 0xe10 <DIO_voidSetPinValue+0xb0>
     db4:	8e 81       	ldd	r24, Y+6	; 0x06
     db6:	9f 81       	ldd	r25, Y+7	; 0x07
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	91 05       	cpc	r25, r1
     dbc:	e9 f1       	breq	.+122    	; 0xe38 <DIO_voidSetPinValue+0xd8>
     dbe:	c7 c0       	rjmp	.+398    	; 0xf4e <DIO_voidSetPinValue+0x1ee>
		{
			case PORTA:SET_BIT(PORT_A, copy_uint8_tpin); break;
     dc0:	ab e3       	ldi	r26, 0x3B	; 59
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	eb e3       	ldi	r30, 0x3B	; 59
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	48 2f       	mov	r20, r24
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 2e       	mov	r0, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_voidSetPinValue+0x7e>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	0a 94       	dec	r0
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_voidSetPinValue+0x7a>
     de2:	84 2b       	or	r24, r20
     de4:	8c 93       	st	X, r24
     de6:	b3 c0       	rjmp	.+358    	; 0xf4e <DIO_voidSetPinValue+0x1ee>
			case PORTB:SET_BIT(PORT_B, copy_uint8_tpin); break;
     de8:	a8 e3       	ldi	r26, 0x38	; 56
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e8 e3       	ldi	r30, 0x38	; 56
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_voidSetPinValue+0xa6>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_voidSetPinValue+0xa2>
     e0a:	84 2b       	or	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	9f c0       	rjmp	.+318    	; 0xf4e <DIO_voidSetPinValue+0x1ee>
			case PORTC:SET_BIT(PORT_C, copy_uint8_tpin); break;
     e10:	a5 e3       	ldi	r26, 0x35	; 53
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e5 e3       	ldi	r30, 0x35	; 53
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_voidSetPinValue+0xce>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_voidSetPinValue+0xca>
     e32:	84 2b       	or	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	8b c0       	rjmp	.+278    	; 0xf4e <DIO_voidSetPinValue+0x1ee>
			case PORTD:SET_BIT(PORT_D, copy_uint8_tpin); break;
     e38:	a2 e3       	ldi	r26, 0x32	; 50
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e2 e3       	ldi	r30, 0x32	; 50
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_voidSetPinValue+0xf6>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_voidSetPinValue+0xf2>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	77 c0       	rjmp	.+238    	; 0xf4e <DIO_voidSetPinValue+0x1ee>
	
		}	
	}
	else if(LOW==copy_uint8_tvalue)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	88 23       	and	r24, r24
     e64:	09 f0       	breq	.+2      	; 0xe68 <DIO_voidSetPinValue+0x108>
     e66:	73 c0       	rjmp	.+230    	; 0xf4e <DIO_voidSetPinValue+0x1ee>
	{
		switch(copy_uint8_tport)
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	3d 83       	std	Y+5, r19	; 0x05
     e70:	2c 83       	std	Y+4, r18	; 0x04
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	91 05       	cpc	r25, r1
     e7a:	59 f1       	breq	.+86     	; 0xed2 <DIO_voidSetPinValue+0x172>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	2c f4       	brge	.+10     	; 0xe90 <DIO_voidSetPinValue+0x130>
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	69 f0       	breq	.+26     	; 0xea8 <DIO_voidSetPinValue+0x148>
     e8e:	5f c0       	rjmp	.+190    	; 0xf4e <DIO_voidSetPinValue+0x1ee>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	31 05       	cpc	r19, r1
     e98:	89 f1       	breq	.+98     	; 0xefc <DIO_voidSetPinValue+0x19c>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	83 30       	cpi	r24, 0x03	; 3
     ea0:	91 05       	cpc	r25, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <DIO_voidSetPinValue+0x146>
     ea4:	40 c0       	rjmp	.+128    	; 0xf26 <DIO_voidSetPinValue+0x1c6>
     ea6:	53 c0       	rjmp	.+166    	; 0xf4e <DIO_voidSetPinValue+0x1ee>
		{
			case PORTA:CLR_BIT(PORT_A, copy_uint8_tpin); break;
     ea8:	ab e3       	ldi	r26, 0x3B	; 59
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	eb e3       	ldi	r30, 0x3B	; 59
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_voidSetPinValue+0x166>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_voidSetPinValue+0x162>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	3e c0       	rjmp	.+124    	; 0xf4e <DIO_voidSetPinValue+0x1ee>
			case PORTB:CLR_BIT(PORT_B, copy_uint8_tpin); break;
     ed2:	a8 e3       	ldi	r26, 0x38	; 56
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e8 e3       	ldi	r30, 0x38	; 56
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_voidSetPinValue+0x190>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_voidSetPinValue+0x18c>
     ef4:	80 95       	com	r24
     ef6:	84 23       	and	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	29 c0       	rjmp	.+82     	; 0xf4e <DIO_voidSetPinValue+0x1ee>
		    case PORTC:CLR_BIT(PORT_C, copy_uint8_tpin); break;
     efc:	a5 e3       	ldi	r26, 0x35	; 53
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e5 e3       	ldi	r30, 0x35	; 53
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_voidSetPinValue+0x1ba>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_voidSetPinValue+0x1b6>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <DIO_voidSetPinValue+0x1ee>
		    case PORTD:CLR_BIT(PORT_D, copy_uint8_tpin); break;
     f26:	a2 e3       	ldi	r26, 0x32	; 50
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e2 e3       	ldi	r30, 0x32	; 50
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_voidSetPinValue+0x1e4>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_voidSetPinValue+0x1e0>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
		
	}	
	
	
	
}
     f4e:	27 96       	adiw	r28, 0x07	; 7
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <DIO_uint8_tGetPinValue>:


uint8_t DIO_uint8_tGetPinValue			(uint8_t copy_uint8_tport, uint8_t Copy_uint8_tPin)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <DIO_uint8_tGetPinValue+0x6>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <DIO_uint8_tGetPinValue+0x8>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	8a 83       	std	Y+2, r24	; 0x02
     f70:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Lcal_uint8_tPinResult=0;
     f72:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_uint8_tport){
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	3d 83       	std	Y+5, r19	; 0x05
     f7c:	2c 83       	std	Y+4, r18	; 0x04
     f7e:	4c 81       	ldd	r20, Y+4	; 0x04
     f80:	5d 81       	ldd	r21, Y+5	; 0x05
     f82:	41 30       	cpi	r20, 0x01	; 1
     f84:	51 05       	cpc	r21, r1
     f86:	41 f1       	breq	.+80     	; 0xfd8 <DIO_uint8_tGetPinValue+0x78>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	91 05       	cpc	r25, r1
     f90:	34 f4       	brge	.+12     	; 0xf9e <DIO_uint8_tGetPinValue+0x3e>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	21 15       	cp	r18, r1
     f98:	31 05       	cpc	r19, r1
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <DIO_uint8_tGetPinValue+0x54>
     f9c:	52 c0       	rjmp	.+164    	; 0x1042 <DIO_uint8_tGetPinValue+0xe2>
     f9e:	4c 81       	ldd	r20, Y+4	; 0x04
     fa0:	5d 81       	ldd	r21, Y+5	; 0x05
     fa2:	42 30       	cpi	r20, 0x02	; 2
     fa4:	51 05       	cpc	r21, r1
     fa6:	51 f1       	breq	.+84     	; 0xffc <DIO_uint8_tGetPinValue+0x9c>
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	9d 81       	ldd	r25, Y+5	; 0x05
     fac:	83 30       	cpi	r24, 0x03	; 3
     fae:	91 05       	cpc	r25, r1
     fb0:	b9 f1       	breq	.+110    	; 0x1020 <DIO_uint8_tGetPinValue+0xc0>
     fb2:	47 c0       	rjmp	.+142    	; 0x1042 <DIO_uint8_tGetPinValue+0xe2>

			case PORTA :		Lcal_uint8_tPinResult=GET_BIT(PINA,Copy_uint8_tPin);	        break;
     fb4:	e9 e3       	ldi	r30, 0x39	; 57
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a9 01       	movw	r20, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_uint8_tGetPinValue+0x6c>
     fc8:	55 95       	asr	r21
     fca:	47 95       	ror	r20
     fcc:	8a 95       	dec	r24
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_uint8_tGetPinValue+0x68>
     fd0:	ca 01       	movw	r24, r20
     fd2:	81 70       	andi	r24, 0x01	; 1
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	35 c0       	rjmp	.+106    	; 0x1042 <DIO_uint8_tGetPinValue+0xe2>
			case PORTB :		Lcal_uint8_tPinResult=GET_BIT(PINB,Copy_uint8_tPin); 		    break;
     fd8:	e6 e3       	ldi	r30, 0x36	; 54
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_uint8_tGetPinValue+0x90>
     fec:	55 95       	asr	r21
     fee:	47 95       	ror	r20
     ff0:	8a 95       	dec	r24
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_uint8_tGetPinValue+0x8c>
     ff4:	ca 01       	movw	r24, r20
     ff6:	81 70       	andi	r24, 0x01	; 1
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	23 c0       	rjmp	.+70     	; 0x1042 <DIO_uint8_tGetPinValue+0xe2>
			case PORTC :		Lcal_uint8_tPinResult=GET_BIT(PINC,Copy_uint8_tPin);			break;
     ffc:	e3 e3       	ldi	r30, 0x33	; 51
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a9 01       	movw	r20, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_uint8_tGetPinValue+0xb4>
    1010:	55 95       	asr	r21
    1012:	47 95       	ror	r20
    1014:	8a 95       	dec	r24
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_uint8_tGetPinValue+0xb0>
    1018:	ca 01       	movw	r24, r20
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	11 c0       	rjmp	.+34     	; 0x1042 <DIO_uint8_tGetPinValue+0xe2>
			case PORTD :		Lcal_uint8_tPinResult=GET_BIT(PIND,Copy_uint8_tPin);			break;
    1020:	e0 e3       	ldi	r30, 0x30	; 48
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a9 01       	movw	r20, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_uint8_tGetPinValue+0xd8>
    1034:	55 95       	asr	r21
    1036:	47 95       	ror	r20
    1038:	8a 95       	dec	r24
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_uint8_tGetPinValue+0xd4>
    103c:	ca 01       	movw	r24, r20
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_uint8_tPinResult);
    1042:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <DIO_voidTogglePin>:

void DIO_voidTogglePin			(uint8_t copy_uint8_tport, uint8_t copy_uint8_tpin)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <DIO_voidTogglePin+0x6>
    105a:	00 d0       	rcall	.+0      	; 0x105c <DIO_voidTogglePin+0x8>
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	6a 83       	std	Y+2, r22	; 0x02

		switch (copy_uint8_tport)
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3c 83       	std	Y+4, r19	; 0x04
    106c:	2b 83       	std	Y+3, r18	; 0x03
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	49 f1       	breq	.+82     	; 0x10ca <DIO_voidTogglePin+0x76>
    1078:	2b 81       	ldd	r18, Y+3	; 0x03
    107a:	3c 81       	ldd	r19, Y+4	; 0x04
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	2c f4       	brge	.+10     	; 0x108c <DIO_voidTogglePin+0x38>
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	61 f0       	breq	.+24     	; 0x10a2 <DIO_voidTogglePin+0x4e>
    108a:	5a c0       	rjmp	.+180    	; 0x1140 <DIO_voidTogglePin+0xec>
    108c:	2b 81       	ldd	r18, Y+3	; 0x03
    108e:	3c 81       	ldd	r19, Y+4	; 0x04
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	71 f1       	breq	.+92     	; 0x10f2 <DIO_voidTogglePin+0x9e>
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	e9 f1       	breq	.+122    	; 0x111a <DIO_voidTogglePin+0xc6>
    10a0:	4f c0       	rjmp	.+158    	; 0x1140 <DIO_voidTogglePin+0xec>
		{
					case PORTA:TOG_BIT(PORT_A, copy_uint8_tpin); break;
    10a2:	ab e3       	ldi	r26, 0x3B	; 59
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e3       	ldi	r30, 0x3B	; 59
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_voidTogglePin+0x6c>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_voidTogglePin+0x68>
    10c4:	84 27       	eor	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	3b c0       	rjmp	.+118    	; 0x1140 <DIO_voidTogglePin+0xec>
					case PORTB:TOG_BIT(PORT_B, copy_uint8_tpin); break;
    10ca:	a8 e3       	ldi	r26, 0x38	; 56
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e8 e3       	ldi	r30, 0x38	; 56
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_voidTogglePin+0x94>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_voidTogglePin+0x90>
    10ec:	84 27       	eor	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	27 c0       	rjmp	.+78     	; 0x1140 <DIO_voidTogglePin+0xec>
					case PORTC:TOG_BIT(PORT_C, copy_uint8_tpin); break;
    10f2:	a5 e3       	ldi	r26, 0x35	; 53
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_voidTogglePin+0xbc>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_voidTogglePin+0xb8>
    1114:	84 27       	eor	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	13 c0       	rjmp	.+38     	; 0x1140 <DIO_voidTogglePin+0xec>
					case PORTD:TOG_BIT(PORT_D, copy_uint8_tpin); break;
    111a:	a2 e3       	ldi	r26, 0x32	; 50
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e2 e3       	ldi	r30, 0x32	; 50
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_voidTogglePin+0xe4>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_voidTogglePin+0xe0>
    113c:	84 27       	eor	r24, r20
    113e:	8c 93       	st	X, r24
		}

}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection	(uint8_t copy_u8port, uint8_t copy_U8state)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <DIO_VoidSetPortDirection+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <DIO_VoidSetPortDirection+0x8>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <DIO_VoidSetPortDirection+0xa>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
	
	if(OUTPUT==copy_U8state)
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	99 f5       	brne	.+102    	; 0x11cc <DIO_VoidSetPortDirection+0x7e>
	{
		switch (copy_u8port)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3e 83       	std	Y+6, r19	; 0x06
    116e:	2d 83       	std	Y+5, r18	; 0x05
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	91 05       	cpc	r25, r1
    1178:	d1 f0       	breq	.+52     	; 0x11ae <DIO_VoidSetPortDirection+0x60>
    117a:	2d 81       	ldd	r18, Y+5	; 0x05
    117c:	3e 81       	ldd	r19, Y+6	; 0x06
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	2c f4       	brge	.+10     	; 0x118e <DIO_VoidSetPortDirection+0x40>
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	61 f0       	breq	.+24     	; 0x11a4 <DIO_VoidSetPortDirection+0x56>
    118c:	50 c0       	rjmp	.+160    	; 0x122e <DIO_VoidSetPortDirection+0xe0>
    118e:	2d 81       	ldd	r18, Y+5	; 0x05
    1190:	3e 81       	ldd	r19, Y+6	; 0x06
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	81 f0       	breq	.+32     	; 0x11b8 <DIO_VoidSetPortDirection+0x6a>
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	81 f0       	breq	.+32     	; 0x11c2 <DIO_VoidSetPortDirection+0x74>
    11a2:	45 c0       	rjmp	.+138    	; 0x122e <DIO_VoidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_OUTPUT		; break;
    11a4:	ea e3       	ldi	r30, 0x3A	; 58
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	80 83       	st	Z, r24
    11ac:	40 c0       	rjmp	.+128    	; 0x122e <DIO_VoidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_OUTPUT		; break;
    11ae:	e7 e3       	ldi	r30, 0x37	; 55
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	80 83       	st	Z, r24
    11b6:	3b c0       	rjmp	.+118    	; 0x122e <DIO_VoidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_OUTPUT		; break;
    11b8:	e4 e3       	ldi	r30, 0x34	; 52
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	80 83       	st	Z, r24
    11c0:	36 c0       	rjmp	.+108    	; 0x122e <DIO_VoidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_OUTPUT		; break;
    11c2:	e1 e3       	ldi	r30, 0x31	; 49
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	80 83       	st	Z, r24
    11ca:	31 c0       	rjmp	.+98     	; 0x122e <DIO_VoidSetPortDirection+0xe0>
	
		}	
	}
	else if(INPUT==copy_U8state)
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	88 23       	and	r24, r24
    11d0:	71 f5       	brne	.+92     	; 0x122e <DIO_VoidSetPortDirection+0xe0>
	{
		switch(copy_u8port)
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3c 83       	std	Y+4, r19	; 0x04
    11da:	2b 83       	std	Y+3, r18	; 0x03
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	c9 f0       	breq	.+50     	; 0x1218 <DIO_VoidSetPortDirection+0xca>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	2c f4       	brge	.+10     	; 0x11fa <DIO_VoidSetPortDirection+0xac>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	61 f0       	breq	.+24     	; 0x1210 <DIO_VoidSetPortDirection+0xc2>
    11f8:	1a c0       	rjmp	.+52     	; 0x122e <DIO_VoidSetPortDirection+0xe0>
    11fa:	2b 81       	ldd	r18, Y+3	; 0x03
    11fc:	3c 81       	ldd	r19, Y+4	; 0x04
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	71 f0       	breq	.+28     	; 0x1220 <DIO_VoidSetPortDirection+0xd2>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	69 f0       	breq	.+26     	; 0x1228 <DIO_VoidSetPortDirection+0xda>
    120e:	0f c0       	rjmp	.+30     	; 0x122e <DIO_VoidSetPortDirection+0xe0>
		{
			case PORTA:DDRA= ALL_INPUT		; break;
    1210:	ea e3       	ldi	r30, 0x3A	; 58
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	10 82       	st	Z, r1
    1216:	0b c0       	rjmp	.+22     	; 0x122e <DIO_VoidSetPortDirection+0xe0>
			case PORTB:DDRB= ALL_INPUT		; break;
    1218:	e7 e3       	ldi	r30, 0x37	; 55
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	10 82       	st	Z, r1
    121e:	07 c0       	rjmp	.+14     	; 0x122e <DIO_VoidSetPortDirection+0xe0>
			case PORTC:DDRC= ALL_INPUT		; break;
    1220:	e4 e3       	ldi	r30, 0x34	; 52
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	10 82       	st	Z, r1
    1226:	03 c0       	rjmp	.+6      	; 0x122e <DIO_VoidSetPortDirection+0xe0>
			case PORTD:DDRD= ALL_INPUT		; break;
    1228:	e1 e3       	ldi	r30, 0x31	; 49
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	10 82       	st	Z, r1
	{
		
	}
	
	
}
    122e:	26 96       	adiw	r28, 0x06	; 6
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue		(uint8_t copy_u8port, uint8_t copy_U8value)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <DIO_VidSetPortValue+0x6>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <DIO_VidSetPortValue+0x8>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	6a 83       	std	Y+2, r22	; 0x02
		
		switch (copy_u8port)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3c 83       	std	Y+4, r19	; 0x04
    1258:	2b 83       	std	Y+3, r18	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	d1 f0       	breq	.+52     	; 0x1298 <DIO_VidSetPortValue+0x58>
    1264:	2b 81       	ldd	r18, Y+3	; 0x03
    1266:	3c 81       	ldd	r19, Y+4	; 0x04
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	2c f4       	brge	.+10     	; 0x1278 <DIO_VidSetPortValue+0x38>
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	61 f0       	breq	.+24     	; 0x128e <DIO_VidSetPortValue+0x4e>
    1276:	1e c0       	rjmp	.+60     	; 0x12b4 <DIO_VidSetPortValue+0x74>
    1278:	2b 81       	ldd	r18, Y+3	; 0x03
    127a:	3c 81       	ldd	r19, Y+4	; 0x04
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <DIO_VidSetPortValue+0x62>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	81 f0       	breq	.+32     	; 0x12ac <DIO_VidSetPortValue+0x6c>
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <DIO_VidSetPortValue+0x74>
		{
			case PORTA:PORT_A=copy_U8value		; break;
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 83       	st	Z, r24
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <DIO_VidSetPortValue+0x74>
			case PORTB:PORT_B=copy_U8value		; break;
    1298:	e8 e3       	ldi	r30, 0x38	; 56
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	80 83       	st	Z, r24
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <DIO_VidSetPortValue+0x74>
			case PORTC:PORT_C=copy_U8value		; break;
    12a2:	e5 e3       	ldi	r30, 0x35	; 53
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	80 83       	st	Z, r24
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <DIO_VidSetPortValue+0x74>
			case PORTD:PORT_D=copy_U8value		; break;
    12ac:	e2 e3       	ldi	r30, 0x32	; 50
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24
	
		}	
	
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <EEPROM_VoidInit>:
#include "EEPROM.h"

#define EEPROM_FIXED_ADDRESS    0x50
#define EEPROM_A2_VALUE             0
void EEPROM_VoidInit(void)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	2a 97       	sbiw	r28, 0x0a	; 10
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
	ST_I2C_config_t Master = {32,DISABLE,ENABLE,ONE};
    12d6:	ce 01       	movw	r24, r28
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	9f 83       	std	Y+7, r25	; 0x07
    12dc:	8e 83       	std	Y+6, r24	; 0x06
    12de:	ed ec       	ldi	r30, 0xCD	; 205
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	f9 87       	std	Y+9, r31	; 0x09
    12e4:	e8 87       	std	Y+8, r30	; 0x08
    12e6:	f5 e0       	ldi	r31, 0x05	; 5
    12e8:	fa 87       	std	Y+10, r31	; 0x0a
    12ea:	e8 85       	ldd	r30, Y+8	; 0x08
    12ec:	f9 85       	ldd	r31, Y+9	; 0x09
    12ee:	00 80       	ld	r0, Z
    12f0:	88 85       	ldd	r24, Y+8	; 0x08
    12f2:	99 85       	ldd	r25, Y+9	; 0x09
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	99 87       	std	Y+9, r25	; 0x09
    12f8:	88 87       	std	Y+8, r24	; 0x08
    12fa:	ee 81       	ldd	r30, Y+6	; 0x06
    12fc:	ff 81       	ldd	r31, Y+7	; 0x07
    12fe:	00 82       	st	Z, r0
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	9f 83       	std	Y+7, r25	; 0x07
    1308:	8e 83       	std	Y+6, r24	; 0x06
    130a:	9a 85       	ldd	r25, Y+10	; 0x0a
    130c:	91 50       	subi	r25, 0x01	; 1
    130e:	9a 87       	std	Y+10, r25	; 0x0a
    1310:	ea 85       	ldd	r30, Y+10	; 0x0a
    1312:	ee 23       	and	r30, r30
    1314:	51 f7       	brne	.-44     	; 0x12ea <EEPROM_VoidInit+0x28>
	TWI_MasterInit(&Master);
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	0e 94 00 0b 	call	0x1600	; 0x1600 <TWI_MasterInit>
}
    131e:	2a 96       	adiw	r28, 0x0a	; 10
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <EEPROM_VoidWriteDataByte>:

void EEPROM_VoidWriteDataByte(uint8_t SlaveAddress , uint8_t InternalReg, uint8_t Data)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <EEPROM_VoidWriteDataByte+0x6>
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	6a 83       	std	Y+2, r22	; 0x02
    1340:	4b 83       	std	Y+3, r20	; 0x03
	 TWI_VoidMaster1_Write_Byte_To_Slave(SlaveAddress,InternalReg,Data);
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	6a 81       	ldd	r22, Y+2	; 0x02
    1346:	4b 81       	ldd	r20, Y+3	; 0x03
    1348:	0e 94 a3 0c 	call	0x1946	; 0x1946 <TWI_VoidMaster1_Write_Byte_To_Slave>
	
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <EEPROM_u8ReadDataByte>:


uint8_t EEPROM_u8ReadDataByte(uint8_t SlaveAddress , uint8_t InternalReg)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <EEPROM_u8ReadDataByte+0x6>
    135e:	0f 92       	push	r0
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	8a 83       	std	Y+2, r24	; 0x02
    1366:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Result= TWI_VoidMaster1_Reading_Byte_From_Slave(SlaveAddress,InternalReg);
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	6b 81       	ldd	r22, Y+3	; 0x03
    136c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <TWI_VoidMaster1_Reading_Byte_From_Slave>
    1370:	89 83       	std	Y+1, r24	; 0x01
	return Result;
    1372:	89 81       	ldd	r24, Y+1	; 0x01
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <ConvertFromAscitoInt>:
//#define data 0b00001110
#define internal_reg 0b00001000
#define Slave_address 0b01010000

uint8_t ConvertFromAscitoInt(uint8_t * data)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	00 d0       	rcall	.+0      	; 0x1386 <ConvertFromAscitoInt+0x6>
    1386:	0f 92       	push	r0
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	9b 83       	std	Y+3, r25	; 0x03
    138e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t address = 0;
    1390:	19 82       	std	Y+1, r1	; 0x01
	address = (data[2]-'0')*16 + (data[3]-'0');
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	9b 81       	ldd	r25, Y+3	; 0x03
    1396:	fc 01       	movw	r30, r24
    1398:	32 96       	adiw	r30, 0x02	; 2
    139a:	80 81       	ld	r24, Z
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	c0 97       	sbiw	r24, 0x30	; 48
    13a2:	82 95       	swap	r24
    13a4:	92 95       	swap	r25
    13a6:	90 7f       	andi	r25, 0xF0	; 240
    13a8:	98 27       	eor	r25, r24
    13aa:	80 7f       	andi	r24, 0xF0	; 240
    13ac:	98 27       	eor	r25, r24
    13ae:	28 2f       	mov	r18, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	9b 81       	ldd	r25, Y+3	; 0x03
    13b4:	fc 01       	movw	r30, r24
    13b6:	33 96       	adiw	r30, 0x03	; 3
    13b8:	80 81       	ld	r24, Z
    13ba:	82 0f       	add	r24, r18
    13bc:	80 53       	subi	r24, 0x30	; 48
    13be:	89 83       	std	Y+1, r24	; 0x01

	return address;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <main>:


void main(void)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	cf 54       	subi	r28, 0x4F	; 79
    13d8:	d0 40       	sbci	r29, 0x00	; 0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
	uint8_t int_address ;
	uint8_t data[50] ;
	DIO_VoidSetPortDirection(PORTA,OUTPUT);
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	61 e0       	ldi	r22, 0x01	; 1
    13e8:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_VoidSetPortDirection>
	DIO_VoidSetPortDirection(PORTD,OUTPUT);
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	61 e0       	ldi	r22, 0x01	; 1
    13f0:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_VoidSetPortDirection>

	ST_UART_config_t master = {51,EIGHT_BITS,ONE_BIT,DISABLED,TRANSMITTER_RECEIVER};
    13f4:	ce 01       	movw	r24, r28
    13f6:	8b 5b       	subi	r24, 0xBB	; 187
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	2d 96       	adiw	r28, 0x0d	; 13
    13fc:	9f af       	std	Y+63, r25	; 0x3f
    13fe:	8e af       	std	Y+62, r24	; 0x3e
    1400:	2d 97       	sbiw	r28, 0x0d	; 13
    1402:	82 ed       	ldi	r24, 0xD2	; 210
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	2f 96       	adiw	r28, 0x0f	; 15
    1408:	9f af       	std	Y+63, r25	; 0x3f
    140a:	8e af       	std	Y+62, r24	; 0x3e
    140c:	2f 97       	sbiw	r28, 0x0f	; 15
    140e:	96 e0       	ldi	r25, 0x06	; 6
    1410:	60 96       	adiw	r28, 0x10	; 16
    1412:	9f af       	std	Y+63, r25	; 0x3f
    1414:	60 97       	sbiw	r28, 0x10	; 16
    1416:	2f 96       	adiw	r28, 0x0f	; 15
    1418:	ee ad       	ldd	r30, Y+62	; 0x3e
    141a:	ff ad       	ldd	r31, Y+63	; 0x3f
    141c:	2f 97       	sbiw	r28, 0x0f	; 15
    141e:	00 80       	ld	r0, Z
    1420:	2f 96       	adiw	r28, 0x0f	; 15
    1422:	8e ad       	ldd	r24, Y+62	; 0x3e
    1424:	9f ad       	ldd	r25, Y+63	; 0x3f
    1426:	2f 97       	sbiw	r28, 0x0f	; 15
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	2f 96       	adiw	r28, 0x0f	; 15
    142c:	9f af       	std	Y+63, r25	; 0x3f
    142e:	8e af       	std	Y+62, r24	; 0x3e
    1430:	2f 97       	sbiw	r28, 0x0f	; 15
    1432:	2d 96       	adiw	r28, 0x0d	; 13
    1434:	ee ad       	ldd	r30, Y+62	; 0x3e
    1436:	ff ad       	ldd	r31, Y+63	; 0x3f
    1438:	2d 97       	sbiw	r28, 0x0d	; 13
    143a:	00 82       	st	Z, r0
    143c:	2d 96       	adiw	r28, 0x0d	; 13
    143e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1440:	9f ad       	ldd	r25, Y+63	; 0x3f
    1442:	2d 97       	sbiw	r28, 0x0d	; 13
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	2d 96       	adiw	r28, 0x0d	; 13
    1448:	9f af       	std	Y+63, r25	; 0x3f
    144a:	8e af       	std	Y+62, r24	; 0x3e
    144c:	2d 97       	sbiw	r28, 0x0d	; 13
    144e:	60 96       	adiw	r28, 0x10	; 16
    1450:	9f ad       	ldd	r25, Y+63	; 0x3f
    1452:	60 97       	sbiw	r28, 0x10	; 16
    1454:	91 50       	subi	r25, 0x01	; 1
    1456:	60 96       	adiw	r28, 0x10	; 16
    1458:	9f af       	std	Y+63, r25	; 0x3f
    145a:	60 97       	sbiw	r28, 0x10	; 16
    145c:	60 96       	adiw	r28, 0x10	; 16
    145e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1460:	60 97       	sbiw	r28, 0x10	; 16
    1462:	ee 23       	and	r30, r30
    1464:	c1 f6       	brne	.-80     	; 0x1416 <main+0x48>
	usart_Init(&master);
    1466:	ce 01       	movw	r24, r28
    1468:	8b 5b       	subi	r24, 0xBB	; 187
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <usart_Init>
	EEPROM_VoidInit();
    1470:	0e 94 61 09 	call	0x12c2	; 0x12c2 <EEPROM_VoidInit>
	while(1)
	{
		usart_SendString((uint8_t*)"Enter your Operation: \r");
    1474:	80 e6       	ldi	r24, 0x60	; 96
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <usart_SendString>
		usart_ReceiveString(data,'\r');
    147c:	ce 01       	movw	r24, r28
    147e:	43 96       	adiw	r24, 0x13	; 19
    1480:	6d e0       	ldi	r22, 0x0D	; 13
    1482:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <usart_ReceiveString>
		if(strcmp(data,"WRITE")== 0)
    1486:	ce 01       	movw	r24, r28
    1488:	43 96       	adiw	r24, 0x13	; 19
    148a:	28 e7       	ldi	r18, 0x78	; 120
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	b9 01       	movw	r22, r18
    1490:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <strcmp>
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	09 f5       	brne	.+66     	; 0x14da <main+0x10c>
		{
			usart_SendString((uint8_t*)"Enter Address: \r");
    1498:	8e e7       	ldi	r24, 0x7E	; 126
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <usart_SendString>
			usart_ReceiveString(data,'\r');
    14a0:	ce 01       	movw	r24, r28
    14a2:	43 96       	adiw	r24, 0x13	; 19
    14a4:	6d e0       	ldi	r22, 0x0D	; 13
    14a6:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <usart_ReceiveString>
			int_address= ConvertFromAscitoInt(data);
    14aa:	ce 01       	movw	r24, r28
    14ac:	43 96       	adiw	r24, 0x13	; 19
    14ae:	0e 94 c0 09 	call	0x1380	; 0x1380 <ConvertFromAscitoInt>
    14b2:	8a 8b       	std	Y+18, r24	; 0x12
			usart_SendData(int_address);
    14b4:	8a 89       	ldd	r24, Y+18	; 0x12
    14b6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <usart_SendData>
			usart_SendString((uint8_t*)"\rOK \rEnter Data: \r");
    14ba:	8f e8       	ldi	r24, 0x8F	; 143
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <usart_SendString>
			uint8_t data = usart_ReceiveData();
    14c2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <usart_ReceiveData>
    14c6:	89 8b       	std	Y+17, r24	; 0x11
			usart_SendString((uint8_t*)"\rOK\r");
    14c8:	82 ea       	ldi	r24, 0xA2	; 162
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <usart_SendString>
			EEPROM_VoidWriteDataByte(Slave_address,int_address,data);
    14d0:	80 e5       	ldi	r24, 0x50	; 80
    14d2:	6a 89       	ldd	r22, Y+18	; 0x12
    14d4:	49 89       	ldd	r20, Y+17	; 0x11
    14d6:	0e 94 98 09 	call	0x1330	; 0x1330 <EEPROM_VoidWriteDataByte>
		}
		if(strcmp(data,"READ")== 0)
    14da:	ce 01       	movw	r24, r28
    14dc:	43 96       	adiw	r24, 0x13	; 19
    14de:	27 ea       	ldi	r18, 0xA7	; 167
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	b9 01       	movw	r22, r18
    14e4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <strcmp>
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	21 f6       	brne	.-120    	; 0x1474 <main+0xa6>
		{
			usart_SendString((uint8_t*)"Enter Address To Read: \r");
    14ec:	8c ea       	ldi	r24, 0xAC	; 172
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <usart_SendString>
			usart_ReceiveString(data,'\r');
    14f4:	ce 01       	movw	r24, r28
    14f6:	43 96       	adiw	r24, 0x13	; 19
    14f8:	6d e0       	ldi	r22, 0x0D	; 13
    14fa:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <usart_ReceiveString>
			uint8_t add= ConvertFromAscitoInt(data);
    14fe:	ce 01       	movw	r24, r28
    1500:	43 96       	adiw	r24, 0x13	; 19
    1502:	0e 94 c0 09 	call	0x1380	; 0x1380 <ConvertFromAscitoInt>
    1506:	88 8b       	std	Y+16, r24	; 0x10
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a8 e4       	ldi	r26, 0x48	; 72
    150e:	b2 e4       	ldi	r27, 0x42	; 66
    1510:	8b 87       	std	Y+11, r24	; 0x0b
    1512:	9c 87       	std	Y+12, r25	; 0x0c
    1514:	ad 87       	std	Y+13, r26	; 0x0d
    1516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1518:	6b 85       	ldd	r22, Y+11	; 0x0b
    151a:	7c 85       	ldd	r23, Y+12	; 0x0c
    151c:	8d 85       	ldd	r24, Y+13	; 0x0d
    151e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a ef       	ldi	r20, 0xFA	; 250
    1526:	54 e4       	ldi	r21, 0x44	; 68
    1528:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	8f 83       	std	Y+7, r24	; 0x07
    1532:	98 87       	std	Y+8, r25	; 0x08
    1534:	a9 87       	std	Y+9, r26	; 0x09
    1536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1538:	6f 81       	ldd	r22, Y+7	; 0x07
    153a:	78 85       	ldd	r23, Y+8	; 0x08
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    154c:	88 23       	and	r24, r24
    154e:	2c f4       	brge	.+10     	; 0x155a <main+0x18c>
		__ticks = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 83       	std	Y+5, r24	; 0x05
    1558:	3f c0       	rjmp	.+126    	; 0x15d8 <main+0x20a>
	else if (__tmp > 65535)
    155a:	6f 81       	ldd	r22, Y+7	; 0x07
    155c:	78 85       	ldd	r23, Y+8	; 0x08
    155e:	89 85       	ldd	r24, Y+9	; 0x09
    1560:	9a 85       	ldd	r25, Y+10	; 0x0a
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    156e:	18 16       	cp	r1, r24
    1570:	4c f5       	brge	.+82     	; 0x15c4 <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1572:	6b 85       	ldd	r22, Y+11	; 0x0b
    1574:	7c 85       	ldd	r23, Y+12	; 0x0c
    1576:	8d 85       	ldd	r24, Y+13	; 0x0d
    1578:	9e 85       	ldd	r25, Y+14	; 0x0e
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e2       	ldi	r20, 0x20	; 32
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	0f c0       	rjmp	.+30     	; 0x15ba <main+0x1ec>
    159c:	88 ec       	ldi	r24, 0xC8	; 200
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9c 83       	std	Y+4, r25	; 0x04
    15a2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <main+0x1da>
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	69 f7       	brne	.-38     	; 0x159c <main+0x1ce>
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c4:	6f 81       	ldd	r22, Y+7	; 0x07
    15c6:	78 85       	ldd	r23, Y+8	; 0x08
    15c8:	89 85       	ldd	r24, Y+9	; 0x09
    15ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    15cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <main+0x216>
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			uint8_t i= EEPROM_u8ReadDataByte(Slave_address,add);
    15ec:	80 e5       	ldi	r24, 0x50	; 80
    15ee:	68 89       	ldd	r22, Y+16	; 0x10
    15f0:	0e 94 ac 09 	call	0x1358	; 0x1358 <EEPROM_u8ReadDataByte>
    15f4:	8f 87       	std	Y+15, r24	; 0x0f
			DIO_VidSetPortValue(PORTA,i);
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	6f 85       	ldd	r22, Y+15	; 0x0f
    15fa:	0e 94 20 09 	call	0x1240	; 0x1240 <DIO_VidSetPortValue>
    15fe:	3a cf       	rjmp	.-396    	; 0x1474 <main+0xa6>

00001600 <TWI_MasterInit>:
#include "I2C.h"
#include "I2C_Config.h"
#include "I2C_reg.h"

I2C_error_states  TWI_MasterInit(ST_I2C_config_t * configuration)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <TWI_MasterInit+0x6>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <TWI_MasterInit+0x8>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01

	//Set Prescalar Value 0
	if(configuration->Prescaller== ONE)
    1610:	e9 81       	ldd	r30, Y+1	; 0x01
    1612:	fa 81       	ldd	r31, Y+2	; 0x02
    1614:	84 81       	ldd	r24, Z+4	; 0x04
    1616:	88 23       	and	r24, r24
    1618:	79 f4       	brne	.+30     	; 0x1638 <TWI_MasterInit+0x38>
	{
		CLR_BIT(TWSR,TWPS0);
    161a:	a1 e2       	ldi	r26, 0x21	; 33
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e1 e2       	ldi	r30, 0x21	; 33
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8e 7f       	andi	r24, 0xFE	; 254
    1626:	8c 93       	st	X, r24
		CLR_BIT(TWSR,TWPS1);		
    1628:	a1 e2       	ldi	r26, 0x21	; 33
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e1 e2       	ldi	r30, 0x21	; 33
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	8d 7f       	andi	r24, 0xFD	; 253
    1634:	8c 93       	st	X, r24
    1636:	3e c0       	rjmp	.+124    	; 0x16b4 <TWI_MasterInit+0xb4>
	} 
	else if(configuration->Prescaller == FOUR)
    1638:	e9 81       	ldd	r30, Y+1	; 0x01
    163a:	fa 81       	ldd	r31, Y+2	; 0x02
    163c:	84 81       	ldd	r24, Z+4	; 0x04
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	79 f4       	brne	.+30     	; 0x1660 <TWI_MasterInit+0x60>
	{
		SET_BIT(TWSR,TWPS0);
    1642:	a1 e2       	ldi	r26, 0x21	; 33
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e1 e2       	ldi	r30, 0x21	; 33
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	81 60       	ori	r24, 0x01	; 1
    164e:	8c 93       	st	X, r24
		CLR_BIT(TWSR,TWPS1);		
    1650:	a1 e2       	ldi	r26, 0x21	; 33
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e1 e2       	ldi	r30, 0x21	; 33
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8d 7f       	andi	r24, 0xFD	; 253
    165c:	8c 93       	st	X, r24
    165e:	2a c0       	rjmp	.+84     	; 0x16b4 <TWI_MasterInit+0xb4>
	}	
	else if(configuration->Prescaller == SIXTEEN)
    1660:	e9 81       	ldd	r30, Y+1	; 0x01
    1662:	fa 81       	ldd	r31, Y+2	; 0x02
    1664:	84 81       	ldd	r24, Z+4	; 0x04
    1666:	82 30       	cpi	r24, 0x02	; 2
    1668:	79 f4       	brne	.+30     	; 0x1688 <TWI_MasterInit+0x88>
	{
		CLR_BIT(TWSR,TWPS0);
    166a:	a1 e2       	ldi	r26, 0x21	; 33
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e1 e2       	ldi	r30, 0x21	; 33
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	8e 7f       	andi	r24, 0xFE	; 254
    1676:	8c 93       	st	X, r24
		SET_BIT(TWSR,TWPS1);		
    1678:	a1 e2       	ldi	r26, 0x21	; 33
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e1 e2       	ldi	r30, 0x21	; 33
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	82 60       	ori	r24, 0x02	; 2
    1684:	8c 93       	st	X, r24
    1686:	16 c0       	rjmp	.+44     	; 0x16b4 <TWI_MasterInit+0xb4>
	}
	else if(configuration->Prescaller == FOURTY_SIX)
    1688:	e9 81       	ldd	r30, Y+1	; 0x01
    168a:	fa 81       	ldd	r31, Y+2	; 0x02
    168c:	84 81       	ldd	r24, Z+4	; 0x04
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	79 f4       	brne	.+30     	; 0x16b0 <TWI_MasterInit+0xb0>
	{
		SET_BIT(TWSR,TWPS0);
    1692:	a1 e2       	ldi	r26, 0x21	; 33
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e1 e2       	ldi	r30, 0x21	; 33
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	81 60       	ori	r24, 0x01	; 1
    169e:	8c 93       	st	X, r24
		SET_BIT(TWSR,TWPS1);	
    16a0:	a1 e2       	ldi	r26, 0x21	; 33
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e1 e2       	ldi	r30, 0x21	; 33
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	82 60       	ori	r24, 0x02	; 2
    16ac:	8c 93       	st	X, r24
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <TWI_MasterInit+0xb4>
	}
	else
	{
		return PRESCALLER_SEL_ERROR; 
    16b0:	1b 82       	std	Y+3, r1	; 0x03
    16b2:	49 c0       	rjmp	.+146    	; 0x1746 <TWI_MasterInit+0x146>
	}
	if(configuration->I2C_Mode== ENABLE)
    16b4:	e9 81       	ldd	r30, Y+1	; 0x01
    16b6:	fa 81       	ldd	r31, Y+2	; 0x02
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	88 23       	and	r24, r24
    16bc:	41 f4       	brne	.+16     	; 0x16ce <TWI_MasterInit+0xce>
	{
		SET_BIT(TWCR, TWIE);		
    16be:	a6 e5       	ldi	r26, 0x56	; 86
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e6 e5       	ldi	r30, 0x56	; 86
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	81 60       	ori	r24, 0x01	; 1
    16ca:	8c 93       	st	X, r24
    16cc:	10 c0       	rjmp	.+32     	; 0x16ee <TWI_MasterInit+0xee>
	}
	else if(configuration->I2C_Mode== DISABLE)
    16ce:	e9 81       	ldd	r30, Y+1	; 0x01
    16d0:	fa 81       	ldd	r31, Y+2	; 0x02
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	41 f4       	brne	.+16     	; 0x16e8 <TWI_MasterInit+0xe8>
	{
		CLR_BIT(TWCR, TWIE);		
    16d8:	a6 e5       	ldi	r26, 0x56	; 86
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e6 e5       	ldi	r30, 0x56	; 86
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8e 7f       	andi	r24, 0xFE	; 254
    16e4:	8c 93       	st	X, r24
    16e6:	03 c0       	rjmp	.+6      	; 0x16ee <TWI_MasterInit+0xee>
	}
	else
	{
		return I2C_MODE_ERROR;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	8b 83       	std	Y+3, r24	; 0x03
    16ec:	2c c0       	rjmp	.+88     	; 0x1746 <TWI_MasterInit+0x146>
	}
	if(configuration->I2C_Ack== ENABLE)
    16ee:	e9 81       	ldd	r30, Y+1	; 0x01
    16f0:	fa 81       	ldd	r31, Y+2	; 0x02
    16f2:	83 81       	ldd	r24, Z+3	; 0x03
    16f4:	88 23       	and	r24, r24
    16f6:	41 f4       	brne	.+16     	; 0x1708 <TWI_MasterInit+0x108>
	{
		SET_BIT(TWCR, TWEA);		
    16f8:	a6 e5       	ldi	r26, 0x56	; 86
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e6 e5       	ldi	r30, 0x56	; 86
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	80 64       	ori	r24, 0x40	; 64
    1704:	8c 93       	st	X, r24
    1706:	10 c0       	rjmp	.+32     	; 0x1728 <TWI_MasterInit+0x128>
	}
	else if(configuration->I2C_Ack== DISABLE)
    1708:	e9 81       	ldd	r30, Y+1	; 0x01
    170a:	fa 81       	ldd	r31, Y+2	; 0x02
    170c:	83 81       	ldd	r24, Z+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	41 f4       	brne	.+16     	; 0x1722 <TWI_MasterInit+0x122>
	{
		CLR_BIT(TWCR, TWEA);		
    1712:	a6 e5       	ldi	r26, 0x56	; 86
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e6 e5       	ldi	r30, 0x56	; 86
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8f 7b       	andi	r24, 0xBF	; 191
    171e:	8c 93       	st	X, r24
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <TWI_MasterInit+0x128>
	}
	else
	{
		return ACK_ERROR;
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	8b 83       	std	Y+3, r24	; 0x03
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <TWI_MasterInit+0x146>
	}

	//CLK 400kHZ
	TWBR = configuration->I2C_DivisionFactor;
    1728:	a0 e2       	ldi	r26, 0x20	; 32
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e9 81       	ldd	r30, Y+1	; 0x01
    172e:	fa 81       	ldd	r31, Y+2	; 0x02
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	8c 93       	st	X, r24

	//Enable I2C Peripheral
	SET_BIT(TWCR,TWEN);
    1736:	a6 e5       	ldi	r26, 0x56	; 86
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e6 e5       	ldi	r30, 0x56	; 86
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	84 60       	ori	r24, 0x04	; 4
    1742:	8c 93       	st	X, r24
    1744:	02 c0       	rjmp	.+4      	; 0x174a <TWI_MasterInit+0x14a>

}
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	8c 83       	std	Y+4, r24	; 0x04
    174a:	8c 81       	ldd	r24, Y+4	; 0x04
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <TWI_SlaveInit>:


void TWI_SlaveInit(uint8_t Copy_u8Address)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	0f 92       	push	r0
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR,TWEN);
    1766:	a6 e5       	ldi	r26, 0x56	; 86
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e6 e5       	ldi	r30, 0x56	; 86
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	84 60       	ori	r24, 0x04	; 4
    1772:	8c 93       	st	X, r24
	TWAR = Copy_u8Address;
    1774:	e2 e2       	ldi	r30, 0x22	; 34
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	80 83       	st	Z, r24
	TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    177c:	e6 e5       	ldi	r30, 0x56	; 86
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	84 ec       	ldi	r24, 0xC4	; 196
    1782:	80 83       	st	Z, r24
}
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <TWI_VoidStartCondition>:



void  TWI_VoidStartCondition()
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
	//start condition
	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);   // Clearing TWINT flag by logic one
    1794:	a6 e5       	ldi	r26, 0x56	; 86
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e6 e5       	ldi	r30, 0x56	; 86
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	84 6a       	ori	r24, 0xA4	; 164
    17a0:	8c 93       	st	X, r24
	// Wait for TWINT Flag set
	while (!(TWCR & (1<<TWINT)));
    17a2:	e6 e5       	ldi	r30, 0x56	; 86
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	88 23       	and	r24, r24
    17aa:	dc f7       	brge	.-10     	; 0x17a2 <TWI_VoidStartCondition+0x16>
}
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <TWI_VoidRepeatedStartCondition>:

void TWI_VoidRepeatedStartCondition(void)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
	TWCR = 0X07;
    17ba:	e6 e5       	ldi	r30, 0x56	; 86
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	87 e0       	ldi	r24, 0x07	; 7
    17c0:	80 83       	st	Z, r24
	// Send Repeated Start Condition
	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    17c2:	a6 e5       	ldi	r26, 0x56	; 86
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e6 e5       	ldi	r30, 0x56	; 86
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	84 6a       	ori	r24, 0xA4	; 164
    17ce:	8c 93       	st	X, r24
	// Wait for TWINT Flag set
	while (!(TWCR & (1<<TWINT)));
    17d0:	e6 e5       	ldi	r30, 0x56	; 86
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	88 23       	and	r24, r24
    17d8:	dc f7       	brge	.-10     	; 0x17d0 <TWI_VoidRepeatedStartCondition+0x1e>

}
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <TWI_VoidMaster_Send_Slave_Address_With_Write>:

void TWI_VoidMaster_Send_Slave_Address_With_Write(uint8_t Address, uint8_t Copy_Rw)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <TWI_VoidMaster_Send_Slave_Address_With_Write+0x6>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	6a 83       	std	Y+2, r22	; 0x02

	//Load SLA_W into TWDR Register

	TWDR = (Address<<1);
    17ee:	e3 e2       	ldi	r30, 0x23	; 35
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	88 0f       	add	r24, r24
    17f6:	80 83       	st	Z, r24
	if(Copy_Rw == 1)
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	a1 f4       	brne	.+40     	; 0x1826 <TWI_VoidMaster_Send_Slave_Address_With_Write+0x46>
	{
		SET_BIT(TWDR,R_W);		//Set R\W Bit To Read From Slave
    17fe:	a3 e2       	ldi	r26, 0x23	; 35
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e3 e2       	ldi	r30, 0x23	; 35
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	81 60       	ori	r24, 0x01	; 1
    180a:	8c 93       	st	X, r24
		// Clear TWINT bit in TWCR to start transmission of address
		TWCR |=(1<<TWEN)|(1<<TWINT);
    180c:	a6 e5       	ldi	r26, 0x56	; 86
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e6 e5       	ldi	r30, 0x56	; 86
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	84 68       	ori	r24, 0x84	; 132
    1818:	8c 93       	st	X, r24
		//Wait for TWINT Flag set
		while(!(TWCR&(1<<TWINT)));
    181a:	e6 e5       	ldi	r30, 0x56	; 86
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	88 23       	and	r24, r24
    1822:	dc f7       	brge	.-10     	; 0x181a <TWI_VoidMaster_Send_Slave_Address_With_Write+0x3a>
    1824:	13 c0       	rjmp	.+38     	; 0x184c <TWI_VoidMaster_Send_Slave_Address_With_Write+0x6c>

	}
	else
	{
		CLR_BIT(TWDR,R_W);
    1826:	a3 e2       	ldi	r26, 0x23	; 35
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e3 e2       	ldi	r30, 0x23	; 35
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	8e 7f       	andi	r24, 0xFE	; 254
    1832:	8c 93       	st	X, r24
		// Clear TWINT bit in TWCR to start transmission of address
		TWCR |=(1<<TWEN)|(1<<TWINT);
    1834:	a6 e5       	ldi	r26, 0x56	; 86
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e6 e5       	ldi	r30, 0x56	; 86
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	84 68       	ori	r24, 0x84	; 132
    1840:	8c 93       	st	X, r24

		//Wait for TWINT Flag set
		while(!(TWCR&(1<<TWINT)));		
    1842:	e6 e5       	ldi	r30, 0x56	; 86
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	88 23       	and	r24, r24
    184a:	dc f7       	brge	.-10     	; 0x1842 <TWI_VoidMaster_Send_Slave_Address_With_Write+0x62>
	}
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <TWI_VoidMaster_Reading_Byte_From_Slave>:

uint8_t  TWI_VoidMaster_Reading_Byte_From_Slave(uint8_t No_ofBytes)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	89 83       	std	Y+1, r24	; 0x01
	if(No_ofBytes>1)
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	82 30       	cpi	r24, 0x02	; 2
    1866:	40 f0       	brcs	.+16     	; 0x1878 <TWI_VoidMaster_Reading_Byte_From_Slave+0x22>
	{
			TWCR |=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); 
    1868:	a6 e5       	ldi	r26, 0x56	; 86
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e6 e5       	ldi	r30, 0x56	; 86
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	84 6c       	ori	r24, 0xC4	; 196
    1874:	8c 93       	st	X, r24
    1876:	07 c0       	rjmp	.+14     	; 0x1886 <TWI_VoidMaster_Reading_Byte_From_Slave+0x30>
	}
	else
	{
			TWCR |=(1<<TWEN)|(1<<TWINT); 
    1878:	a6 e5       	ldi	r26, 0x56	; 86
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e6 e5       	ldi	r30, 0x56	; 86
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	84 68       	ori	r24, 0x84	; 132
    1884:	8c 93       	st	X, r24
	}

	while((TWCR & (1<<TWINT))==0);
    1886:	e6 e5       	ldi	r30, 0x56	; 86
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	88 23       	and	r24, r24
    188e:	dc f7       	brge	.-10     	; 0x1886 <TWI_VoidMaster_Reading_Byte_From_Slave+0x30>

	return TWDR;
    1890:	e3 e2       	ldi	r30, 0x23	; 35
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z


}
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <TWI_uint8_tReadACK>:

uint8_t TWI_uint8_tReadACK(void)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
	TWCR &= 0X07;
    18a6:	a6 e5       	ldi	r26, 0x56	; 86
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e6 e5       	ldi	r30, 0x56	; 86
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	87 70       	andi	r24, 0x07	; 7
    18b2:	8c 93       	st	X, r24
	TWCR |=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);   //enable Ack
    18b4:	a6 e5       	ldi	r26, 0x56	; 86
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e6 e5       	ldi	r30, 0x56	; 86
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	84 6c       	ori	r24, 0xC4	; 196
    18c0:	8c 93       	st	X, r24
	//Wait for TWINT flag to be set
	while (!(TWCR & (1<<TWINT)));
    18c2:	e6 e5       	ldi	r30, 0x56	; 86
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	88 23       	and	r24, r24
    18ca:	dc f7       	brge	.-10     	; 0x18c2 <TWI_uint8_tReadACK+0x24>
	// Read Data
	return TWDR;
    18cc:	e3 e2       	ldi	r30, 0x23	; 35
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
							
		
}
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <TWI_uint8_tReadNACK>:

uint8_t TWI_uint8_tReadNACK(void)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	TWCR |=(1<<TWEN)|(1<<TWINT);
    18e0:	a6 e5       	ldi	r26, 0x56	; 86
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e6 e5       	ldi	r30, 0x56	; 86
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	84 68       	ori	r24, 0x84	; 132
    18ec:	8c 93       	st	X, r24

	//Wait for TWINT flag to be set
	 while(!(TWCR&(1<<TWINT)));
    18ee:	e6 e5       	ldi	r30, 0x56	; 86
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	88 23       	and	r24, r24
    18f6:	dc f7       	brge	.-10     	; 0x18ee <TWI_uint8_tReadNACK+0x16>
	// Read Data
	return TWDR;
    18f8:	e3 e2       	ldi	r30, 0x23	; 35
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z

}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <TWI_VoidMaster_Write_Byte_To_Slave>:

void TWI_VoidMaster_Write_Byte_To_Slave(uint8_t data)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	0f 92       	push	r0
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	89 83       	std	Y+1, r24	; 0x01

	TWCR &= 0X07;
    1910:	a6 e5       	ldi	r26, 0x56	; 86
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e6 e5       	ldi	r30, 0x56	; 86
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	87 70       	andi	r24, 0x07	; 7
    191c:	8c 93       	st	X, r24
	// Load SLA_W into TWDR Register
	TWDR = data;
    191e:	e3 e2       	ldi	r30, 0x23	; 35
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	80 83       	st	Z, r24
	// Clear TWINT bit in TWCR to start transmission of address
	TWCR |=(1<<TWEN)|(1<<TWINT);
    1926:	a6 e5       	ldi	r26, 0x56	; 86
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e6 e5       	ldi	r30, 0x56	; 86
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	84 68       	ori	r24, 0x84	; 132
    1932:	8c 93       	st	X, r24
	//Wait for TWINT flag to be set
	while(!(TWCR&(1<<TWINT)));
    1934:	e6 e5       	ldi	r30, 0x56	; 86
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	88 23       	and	r24, r24
    193c:	dc f7       	brge	.-10     	; 0x1934 <TWI_VoidMaster_Write_Byte_To_Slave+0x30>

}
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <TWI_VoidMaster1_Write_Byte_To_Slave>:

I2C_error_states TWI_VoidMaster1_Write_Byte_To_Slave(uint8_t SlaveAddress , uint8_t InternalReg, uint8_t Data)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <TWI_VoidMaster1_Write_Byte_To_Slave+0x6>
    194c:	00 d0       	rcall	.+0      	; 0x194e <TWI_VoidMaster1_Write_Byte_To_Slave+0x8>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	6a 83       	std	Y+2, r22	; 0x02
    1956:	4b 83       	std	Y+3, r20	; 0x03
	TWI_VoidStartCondition();
    1958:	0e 94 c6 0b 	call	0x178c	; 0x178c <TWI_VoidStartCondition>
	if(TWI_uint8_tGetStatus() != I2C_START)
    195c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_uint8_tGetStatus>
    1960:	88 30       	cpi	r24, 0x08	; 8
    1962:	19 f0       	breq	.+6      	; 0x196a <TWI_VoidMaster1_Write_Byte_To_Slave+0x24>
	{
		
		return I2C_START_ERROR;
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	8c 83       	std	Y+4, r24	; 0x04
    1968:	2f c0       	rjmp	.+94     	; 0x19c8 <TWI_VoidMaster1_Write_Byte_To_Slave+0x82>
	}

	TWI_VoidMaster_Write_Byte_To_Slave( (SlaveAddress<<1)|WRITE_MODE );
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	88 0f       	add	r24, r24
    196e:	0e 94 82 0c 	call	0x1904	; 0x1904 <TWI_VoidMaster_Write_Byte_To_Slave>
	if(TWI_uint8_tGetStatus() != I2C_MT_SLA_ACK)
    1972:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_uint8_tGetStatus>
    1976:	88 31       	cpi	r24, 0x18	; 24
    1978:	19 f0       	breq	.+6      	; 0x1980 <TWI_VoidMaster1_Write_Byte_To_Slave+0x3a>
	{
		return I2C_MT_SLA_ACK_ERROR;
    197a:	84 e0       	ldi	r24, 0x04	; 4
    197c:	8c 83       	std	Y+4, r24	; 0x04
    197e:	24 c0       	rjmp	.+72     	; 0x19c8 <TWI_VoidMaster1_Write_Byte_To_Slave+0x82>

	}
	TWI_VoidMaster_Write_Byte_To_Slave(InternalReg);
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	0e 94 82 0c 	call	0x1904	; 0x1904 <TWI_VoidMaster_Write_Byte_To_Slave>
	if(TWI_uint8_tGetStatus ()!= I2C_MT_DATA_ACK)
    1986:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_uint8_tGetStatus>
    198a:	88 32       	cpi	r24, 0x28	; 40
    198c:	19 f0       	breq	.+6      	; 0x1994 <TWI_VoidMaster1_Write_Byte_To_Slave+0x4e>
	{
		return I2C_MT_DATA_ACK_ERROR;
    198e:	85 e0       	ldi	r24, 0x05	; 5
    1990:	8c 83       	std	Y+4, r24	; 0x04
    1992:	1a c0       	rjmp	.+52     	; 0x19c8 <TWI_VoidMaster1_Write_Byte_To_Slave+0x82>

	}	
	TWI_VoidMaster_Write_Byte_To_Slave(Data);
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	0e 94 82 0c 	call	0x1904	; 0x1904 <TWI_VoidMaster_Write_Byte_To_Slave>
	if(TWI_uint8_tGetStatus()!= I2C_MT_DATA_ACK)
    199a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_uint8_tGetStatus>
    199e:	88 32       	cpi	r24, 0x28	; 40
    19a0:	19 f0       	breq	.+6      	; 0x19a8 <TWI_VoidMaster1_Write_Byte_To_Slave+0x62>
	{
		return I2C_MT_DATA_ACK_ERROR;
    19a2:	85 e0       	ldi	r24, 0x05	; 5
    19a4:	8c 83       	std	Y+4, r24	; 0x04
    19a6:	10 c0       	rjmp	.+32     	; 0x19c8 <TWI_VoidMaster1_Write_Byte_To_Slave+0x82>

	}	
	TWCR |=(1<<TWEN)|(1<<TWINT);
    19a8:	a6 e5       	ldi	r26, 0x56	; 86
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e6 e5       	ldi	r30, 0x56	; 86
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	84 68       	ori	r24, 0x84	; 132
    19b4:	8c 93       	st	X, r24
	//Wait for TWINT flag to be set
	while(!(TWCR&(1<<TWINT)));
    19b6:	e6 e5       	ldi	r30, 0x56	; 86
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	88 23       	and	r24, r24
    19be:	dc f7       	brge	.-10     	; 0x19b6 <TWI_VoidMaster1_Write_Byte_To_Slave+0x70>

	TWI_VoidStopCondition();
    19c0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <TWI_VoidStopCondition>

	return WRITE_NO_ERROR;
    19c4:	89 e0       	ldi	r24, 0x09	; 9
    19c6:	8c 83       	std	Y+4, r24	; 0x04
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04

}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <TWI_uint8_tGetStatus>:
uint8_t TWI_uint8_tGetStatus(void)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	0f 92       	push	r0
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;
	status = (TWSR & I2C_STATUS_CODE_MASK);
    19e2:	e1 e2       	ldi	r30, 0x21	; 33
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	88 7f       	andi	r24, 0xF8	; 248
    19ea:	89 83       	std	Y+1, r24	; 0x01
	return status;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <TWI_VoidStopCondition>:
void  TWI_VoidStopCondition()
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62

	TWCR |=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);  /* Enable TWI, generate stop */
    19fe:	a6 e5       	ldi	r26, 0x56	; 86
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e6 e5       	ldi	r30, 0x56	; 86
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	84 69       	ori	r24, 0x94	; 148
    1a0a:	8c 93       	st	X, r24
    while(TWCR&(1<<TWSTO));	               /* Wait until stop condition execution */
    1a0c:	e6 e5       	ldi	r30, 0x56	; 86
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	80 71       	andi	r24, 0x10	; 16
    1a18:	90 70       	andi	r25, 0x00	; 0
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	b9 f7       	brne	.-18     	; 0x1a0c <TWI_VoidStopCondition+0x16>

}
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <TWI_VoidMaster1_Reading_Byte_From_Slave>:

uint8_t  TWI_VoidMaster1_Reading_Byte_From_Slave(uint8_t SlaveAddress , uint8_t InternalReg)
{
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <TWI_VoidMaster1_Reading_Byte_From_Slave+0x6>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <TWI_VoidMaster1_Reading_Byte_From_Slave+0x8>
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	8a 83       	std	Y+2, r24	; 0x02
    1a32:	6b 83       	std	Y+3, r22	; 0x03
	TWI_VoidStartCondition();
    1a34:	0e 94 c6 0b 	call	0x178c	; 0x178c <TWI_VoidStartCondition>
	if(TWI_uint8_tGetStatus() != I2C_START)
    1a38:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_uint8_tGetStatus>
    1a3c:	88 30       	cpi	r24, 0x08	; 8
    1a3e:	19 f0       	breq	.+6      	; 0x1a46 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x22>
	{
		return I2C_START_ERROR;
    1a40:	83 e0       	ldi	r24, 0x03	; 3
    1a42:	8c 83       	std	Y+4, r24	; 0x04
    1a44:	3d c0       	rjmp	.+122    	; 0x1ac0 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x9c>
	}
	TWI_VoidMaster_Write_Byte_To_Slave( (SlaveAddress<<1) | WRITE_MODE );
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	88 0f       	add	r24, r24
    1a4a:	0e 94 82 0c 	call	0x1904	; 0x1904 <TWI_VoidMaster_Write_Byte_To_Slave>
	if( TWI_uint8_tGetStatus() != I2C_MT_SLA_ACK)
    1a4e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_uint8_tGetStatus>
    1a52:	88 31       	cpi	r24, 0x18	; 24
    1a54:	19 f0       	breq	.+6      	; 0x1a5c <TWI_VoidMaster1_Reading_Byte_From_Slave+0x38>
	{
		return I2C_MT_SLA_ACK_ERROR;
    1a56:	84 e0       	ldi	r24, 0x04	; 4
    1a58:	8c 83       	std	Y+4, r24	; 0x04
    1a5a:	32 c0       	rjmp	.+100    	; 0x1ac0 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x9c>

	}
	TWI_VoidMaster_Write_Byte_To_Slave(InternalReg);
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	0e 94 82 0c 	call	0x1904	; 0x1904 <TWI_VoidMaster_Write_Byte_To_Slave>
	if(TWI_uint8_tGetStatus() != I2C_MT_DATA_ACK)
    1a62:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_uint8_tGetStatus>
    1a66:	88 32       	cpi	r24, 0x28	; 40
    1a68:	19 f0       	breq	.+6      	; 0x1a70 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x4c>
	{
		return I2C_MT_DATA_ACK_ERROR;
    1a6a:	85 e0       	ldi	r24, 0x05	; 5
    1a6c:	8c 83       	std	Y+4, r24	; 0x04
    1a6e:	28 c0       	rjmp	.+80     	; 0x1ac0 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x9c>
	}
	TWI_VoidRepeatedStartCondition();
    1a70:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <TWI_VoidRepeatedStartCondition>
	if(TWI_uint8_tGetStatus() != I2C_REP_START)
    1a74:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_uint8_tGetStatus>
    1a78:	80 31       	cpi	r24, 0x10	; 16
    1a7a:	19 f0       	breq	.+6      	; 0x1a82 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x5e>
	{
		return I2C_REP_START_ERROR;
    1a7c:	86 e0       	ldi	r24, 0x06	; 6
    1a7e:	8c 83       	std	Y+4, r24	; 0x04
    1a80:	1f c0       	rjmp	.+62     	; 0x1ac0 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x9c>
	}
	TWI_VoidI2cListen();	
    1a82:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <TWI_VoidI2cListen>
	TWI_VoidMaster_Write_Byte_To_Slave(SlaveAddress<<1|READ_MODE);
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	81 60       	ori	r24, 0x01	; 1
    1a92:	0e 94 82 0c 	call	0x1904	; 0x1904 <TWI_VoidMaster_Write_Byte_To_Slave>
	if(TWI_uint8_tGetStatus() != I2C_MR_SLA_ACK)
    1a96:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_uint8_tGetStatus>
    1a9a:	80 34       	cpi	r24, 0x40	; 64
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x80>
	{
		return I2C_MR_SLA_ACK_ERROR;
    1a9e:	87 e0       	ldi	r24, 0x07	; 7
    1aa0:	8c 83       	std	Y+4, r24	; 0x04
    1aa2:	0e c0       	rjmp	.+28     	; 0x1ac0 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x9c>
	}	
	uint8_t Result =  TWI_uint8_tReadNACK();
    1aa4:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <TWI_uint8_tReadNACK>
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	if(TWI_uint8_tGetStatus() != I2C_MR_DATA_NOT_ACK)
    1aaa:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_uint8_tGetStatus>
    1aae:	88 35       	cpi	r24, 0x58	; 88
    1ab0:	19 f0       	breq	.+6      	; 0x1ab8 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x94>
	{
		return I2C_MR_DATA_NOT_ACK_ERROR;
    1ab2:	88 e0       	ldi	r24, 0x08	; 8
    1ab4:	8c 83       	std	Y+4, r24	; 0x04
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <TWI_VoidMaster1_Reading_Byte_From_Slave+0x9c>
	}	
	TWI_VoidStopCondition();
    1ab8:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <TWI_VoidStopCondition>

	return Result;
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	8c 83       	std	Y+4, r24	; 0x04
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <TWI_VoidI2cListen>:

void  TWI_VoidI2cListen(void)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
	while(!(TWCR&(1<<TWINT)));
    1ad8:	e6 e5       	ldi	r30, 0x56	; 86
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	88 23       	and	r24, r24
    1ae0:	dc f7       	brge	.-10     	; 0x1ad8 <TWI_VoidI2cListen+0x8>
}
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <usart_Init>:




error_state usart_Init(ST_UART_config_t * USART_InitStruct)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <usart_Init+0x6>
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <usart_Init+0x8>
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	9b 83       	std	Y+3, r25	; 0x03
    1af6:	8a 83       	std	Y+2, r24	; 0x02
	UBRRH = (USART_InitStruct->USART_BaudRate>>8) & 0x7F;
    1af8:	a0 e4       	ldi	r26, 0x40	; 64
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	ea 81       	ldd	r30, Y+2	; 0x02
    1afe:	fb 81       	ldd	r31, Y+3	; 0x03
    1b00:	80 81       	ld	r24, Z
    1b02:	91 81       	ldd	r25, Z+1	; 0x01
    1b04:	89 2f       	mov	r24, r25
    1b06:	99 27       	eor	r25, r25
    1b08:	8f 77       	andi	r24, 0x7F	; 127
    1b0a:	8c 93       	st	X, r24
    UBRRL = (USART_InitStruct->USART_BaudRate );
    1b0c:	a9 e2       	ldi	r26, 0x29	; 41
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	ea 81       	ldd	r30, Y+2	; 0x02
    1b12:	fb 81       	ldd	r31, Y+3	; 0x03
    1b14:	80 81       	ld	r24, Z
    1b16:	91 81       	ldd	r25, Z+1	; 0x01
    1b18:	8c 93       	st	X, r24

    uint8_t UCSRC_h;
    SET_BIT(UCSRC_h,URSEL);
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	80 68       	ori	r24, 0x80	; 128
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    /****** Set Word Length *******/
    if(USART_InitStruct->USART_WordLength == FIVE_BITS)
    1b20:	ea 81       	ldd	r30, Y+2	; 0x02
    1b22:	fb 81       	ldd	r31, Y+3	; 0x03
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	85 30       	cpi	r24, 0x05	; 5
    1b28:	71 f4       	brne	.+28     	; 0x1b46 <usart_Init+0x5e>
    {
        CLR_BIT(UCSRC_h,UCSZ0 );
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	8d 7f       	andi	r24, 0xFD	; 253
    1b2e:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRC_h,UCSZ1 );        
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	8b 7f       	andi	r24, 0xFB	; 251
    1b34:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB,UCSZ2 );
    1b36:	aa e2       	ldi	r26, 0x2A	; 42
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	ea e2       	ldi	r30, 0x2A	; 42
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8b 7f       	andi	r24, 0xFB	; 251
    1b42:	8c 93       	st	X, r24
    1b44:	4f c0       	rjmp	.+158    	; 0x1be4 <usart_Init+0xfc>
    }
    else if(USART_InitStruct->USART_WordLength == SIX_BITS)
    1b46:	ea 81       	ldd	r30, Y+2	; 0x02
    1b48:	fb 81       	ldd	r31, Y+3	; 0x03
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	86 30       	cpi	r24, 0x06	; 6
    1b4e:	71 f4       	brne	.+28     	; 0x1b6c <usart_Init+0x84>
    {
        SET_BIT(UCSRC_h,UCSZ0 );
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	82 60       	ori	r24, 0x02	; 2
    1b54:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRC_h,UCSZ1 );        
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	8b 7f       	andi	r24, 0xFB	; 251
    1b5a:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB,UCSZ2 );
    1b5c:	aa e2       	ldi	r26, 0x2A	; 42
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	ea e2       	ldi	r30, 0x2A	; 42
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	8b 7f       	andi	r24, 0xFB	; 251
    1b68:	8c 93       	st	X, r24
    1b6a:	3c c0       	rjmp	.+120    	; 0x1be4 <usart_Init+0xfc>
    }
    else if(USART_InitStruct->USART_WordLength == SEVEN_BITS)
    1b6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	87 30       	cpi	r24, 0x07	; 7
    1b74:	71 f4       	brne	.+28     	; 0x1b92 <usart_Init+0xaa>
    {
        CLR_BIT(UCSRC_h,UCSZ0 );
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	8d 7f       	andi	r24, 0xFD	; 253
    1b7a:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRC_h,UCSZ1 );        
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	84 60       	ori	r24, 0x04	; 4
    1b80:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB,UCSZ2 );
    1b82:	aa e2       	ldi	r26, 0x2A	; 42
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	ea e2       	ldi	r30, 0x2A	; 42
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	8b 7f       	andi	r24, 0xFB	; 251
    1b8e:	8c 93       	st	X, r24
    1b90:	29 c0       	rjmp	.+82     	; 0x1be4 <usart_Init+0xfc>
    }
    else if(USART_InitStruct->USART_WordLength == EIGHT_BITS)
    1b92:	ea 81       	ldd	r30, Y+2	; 0x02
    1b94:	fb 81       	ldd	r31, Y+3	; 0x03
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	88 30       	cpi	r24, 0x08	; 8
    1b9a:	71 f4       	brne	.+28     	; 0x1bb8 <usart_Init+0xd0>
    {
        SET_BIT(UCSRC_h,UCSZ0 );
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	82 60       	ori	r24, 0x02	; 2
    1ba0:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRC_h,UCSZ1 );        
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	84 60       	ori	r24, 0x04	; 4
    1ba6:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB,UCSZ2 );
    1ba8:	aa e2       	ldi	r26, 0x2A	; 42
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ea e2       	ldi	r30, 0x2A	; 42
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8b 7f       	andi	r24, 0xFB	; 251
    1bb4:	8c 93       	st	X, r24
    1bb6:	16 c0       	rjmp	.+44     	; 0x1be4 <usart_Init+0xfc>
    }
    else if(USART_InitStruct->USART_WordLength ==NINE_BITS)
    1bb8:	ea 81       	ldd	r30, Y+2	; 0x02
    1bba:	fb 81       	ldd	r31, Y+3	; 0x03
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	89 30       	cpi	r24, 0x09	; 9
    1bc0:	71 f4       	brne	.+28     	; 0x1bde <usart_Init+0xf6>
    {
        SET_BIT(UCSRC_h,UCSZ0 );
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	82 60       	ori	r24, 0x02	; 2
    1bc6:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRC_h,UCSZ1 );        
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	84 60       	ori	r24, 0x04	; 4
    1bcc:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRB,UCSZ2 );
    1bce:	aa e2       	ldi	r26, 0x2A	; 42
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	ea e2       	ldi	r30, 0x2A	; 42
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	84 60       	ori	r24, 0x04	; 4
    1bda:	8c 93       	st	X, r24
    1bdc:	03 c0       	rjmp	.+6      	; 0x1be4 <usart_Init+0xfc>
    }    
    else
    {
        return WORD_LENGTH_ERROR;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	8c 83       	std	Y+4, r24	; 0x04
    1be2:	65 c0       	rjmp	.+202    	; 0x1cae <usart_Init+0x1c6>
    }
    /****** Set Number of Stop bits *******/
    if(USART_InitStruct->USART_StopBits == ONE_BIT)
    1be4:	ea 81       	ldd	r30, Y+2	; 0x02
    1be6:	fb 81       	ldd	r31, Y+3	; 0x03
    1be8:	83 81       	ldd	r24, Z+3	; 0x03
    1bea:	88 23       	and	r24, r24
    1bec:	21 f4       	brne	.+8      	; 0x1bf6 <usart_Init+0x10e>
    {
        CLR_BIT(UCSRC_h, USBS);
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	87 7f       	andi	r24, 0xF7	; 247
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	0c c0       	rjmp	.+24     	; 0x1c0e <usart_Init+0x126>
    }
    else if(USART_InitStruct->USART_StopBits == TWO_BIT)
    1bf6:	ea 81       	ldd	r30, Y+2	; 0x02
    1bf8:	fb 81       	ldd	r31, Y+3	; 0x03
    1bfa:	83 81       	ldd	r24, Z+3	; 0x03
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	21 f4       	brne	.+8      	; 0x1c08 <usart_Init+0x120>
    {
        SET_BIT(UCSRC_h, USBS);        
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	88 60       	ori	r24, 0x08	; 8
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	03 c0       	rjmp	.+6      	; 0x1c0e <usart_Init+0x126>
    }
    else
    {
        return STOP_BIT_ERROR;
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	8c 83       	std	Y+4, r24	; 0x04
    1c0c:	50 c0       	rjmp	.+160    	; 0x1cae <usart_Init+0x1c6>
    }

    if(USART_InitStruct->USART_Parity == DISABLED)
    1c0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c10:	fb 81       	ldd	r31, Y+3	; 0x03
    1c12:	84 81       	ldd	r24, Z+4	; 0x04
    1c14:	88 23       	and	r24, r24
    1c16:	39 f4       	brne	.+14     	; 0x1c26 <usart_Init+0x13e>
    {
        CLR_BIT(UCSRC_h,UPM1);
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	8f 7d       	andi	r24, 0xDF	; 223
    1c1c:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRC_h,UPM0);
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	8f 7e       	andi	r24, 0xEF	; 239
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	1b c0       	rjmp	.+54     	; 0x1c5c <usart_Init+0x174>
    }
    else if(USART_InitStruct->USART_Parity == ENABLED_EVEN)
    1c26:	ea 81       	ldd	r30, Y+2	; 0x02
    1c28:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2a:	84 81       	ldd	r24, Z+4	; 0x04
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	39 f4       	brne	.+14     	; 0x1c3e <usart_Init+0x156>
    {
        SET_BIT(UCSRC_h,UPM1);
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	80 62       	ori	r24, 0x20	; 32
    1c34:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRC_h,UPM0);
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	8f 7e       	andi	r24, 0xEF	; 239
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	0f c0       	rjmp	.+30     	; 0x1c5c <usart_Init+0x174>
    } 
    else if(USART_InitStruct->USART_Parity == ENABLED_ODD)
    1c3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c40:	fb 81       	ldd	r31, Y+3	; 0x03
    1c42:	84 81       	ldd	r24, Z+4	; 0x04
    1c44:	82 30       	cpi	r24, 0x02	; 2
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <usart_Init+0x16e>
    {
        SET_BIT(UCSRC_h,UPM1);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	80 62       	ori	r24, 0x20	; 32
    1c4c:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRC_h,UPM0);
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	80 61       	ori	r24, 0x10	; 16
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <usart_Init+0x174>
    }
    else
    {
        return PARITY_ERROR;
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	8c 83       	std	Y+4, r24	; 0x04
    1c5a:	29 c0       	rjmp	.+82     	; 0x1cae <usart_Init+0x1c6>
    }
    if(USART_InitStruct->USART_Mode == TRANSMITTER_RECEIVER)
    1c5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1c60:	85 81       	ldd	r24, Z+5	; 0x05
    1c62:	82 30       	cpi	r24, 0x02	; 2
    1c64:	79 f4       	brne	.+30     	; 0x1c84 <usart_Init+0x19c>
    {
        //Transmitter Enable
	    SET_BIT(UCSRB,TXEN);
    1c66:	aa e2       	ldi	r26, 0x2A	; 42
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ea e2       	ldi	r30, 0x2A	; 42
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	88 60       	ori	r24, 0x08	; 8
    1c72:	8c 93       	st	X, r24
        //Receiver Enable
        SET_BIT(UCSRB,RXEN);
    1c74:	aa e2       	ldi	r26, 0x2A	; 42
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ea e2       	ldi	r30, 0x2A	; 42
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 61       	ori	r24, 0x10	; 16
    1c80:	8c 93       	st	X, r24
    1c82:	10 c0       	rjmp	.+32     	; 0x1ca4 <usart_Init+0x1bc>
    }
    else if(USART_InitStruct->USART_Mode == RECEIVER)  
    1c84:	ea 81       	ldd	r30, Y+2	; 0x02
    1c86:	fb 81       	ldd	r31, Y+3	; 0x03
    1c88:	85 81       	ldd	r24, Z+5	; 0x05
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	41 f4       	brne	.+16     	; 0x1c9e <usart_Init+0x1b6>
    {
        //Receiver Enable
        SET_BIT(UCSRB,RXEN);
    1c8e:	aa e2       	ldi	r26, 0x2A	; 42
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ea e2       	ldi	r30, 0x2A	; 42
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	80 61       	ori	r24, 0x10	; 16
    1c9a:	8c 93       	st	X, r24
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <usart_Init+0x1bc>
    }
    else
    {
        return MODE_ERROR;
    1c9e:	84 e0       	ldi	r24, 0x04	; 4
    1ca0:	8c 83       	std	Y+4, r24	; 0x04
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <usart_Init+0x1c6>
    }

    UCSRC = UCSRC_h;
    1ca4:	e0 e4       	ldi	r30, 0x40	; 64
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	80 83       	st	Z, r24

    return NO_ERROR;
    1cac:	1c 82       	std	Y+4, r1	; 0x04
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <usart_SendData>:

error_state usart_SendData(uint8_t data_transmitted)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <usart_SendData+0x6>
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	89 83       	std	Y+1, r24	; 0x01


	while(!GET_BIT(UCSRA,UDRE));
    1cca:	eb e2       	ldi	r30, 0x2B	; 43
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	82 95       	swap	r24
    1cd2:	86 95       	lsr	r24
    1cd4:	87 70       	andi	r24, 0x07	; 7
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	81 70       	andi	r24, 0x01	; 1
    1cdc:	90 70       	andi	r25, 0x00	; 0
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	a1 f3       	breq	.-24     	; 0x1cca <usart_SendData+0xc>
	UDR=data_transmitted;
    1ce2:	ec e2       	ldi	r30, 0x2C	; 44
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	80 83       	st	Z, r24
    if(GET_BIT(UCSRA,TXC)!=1)
    1cea:	eb e2       	ldi	r30, 0x2B	; 43
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	82 95       	swap	r24
    1cf2:	86 95       	lsr	r24
    1cf4:	86 95       	lsr	r24
    1cf6:	83 70       	andi	r24, 0x03	; 3
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	81 70       	andi	r24, 0x01	; 1
    1cfe:	90 70       	andi	r25, 0x00	; 0
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	19 f4       	brne	.+6      	; 0x1d0a <usart_SendData+0x4c>
        return TRANSMITION_ERROR;
    1d04:	85 e0       	ldi	r24, 0x05	; 5
    1d06:	8a 83       	std	Y+2, r24	; 0x02
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <usart_SendData+0x50>

    return NO_TRANSMITION_ERROR;
    1d0a:	86 e0       	ldi	r24, 0x06	; 6
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <usart_ReceiveData>:

uint8_t usart_ReceiveData(void)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	0f 92       	push	r0
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	while(0==GET_BIT(UCSRA,RXC));
    1d24:	eb e2       	ldi	r30, 0x2B	; 43
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 23       	and	r24, r24
    1d2c:	dc f7       	brge	.-10     	; 0x1d24 <usart_ReceiveData+0xa>
	data=UDR;
    1d2e:	ec e2       	ldi	r30, 0x2C	; 44
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	89 83       	std	Y+1, r24	; 0x01
	return data;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d38:	0f 90       	pop	r0
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <usart_SendString>:


error_state usart_SendString(uint8_t *str)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <usart_SendString+0x6>
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9b 83       	std	Y+3, r25	; 0x03
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t j=0;
    1d50:	19 82       	std	Y+1, r1	; 0x01
    1d52:	0e c0       	rjmp	.+28     	; 0x1d70 <usart_SendString+0x30>

	while (str[j]!=0)		
	{
		usart_SendData(str[j]);
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5e:	fc 01       	movw	r30, r24
    1d60:	e2 0f       	add	r30, r18
    1d62:	f3 1f       	adc	r31, r19
    1d64:	80 81       	ld	r24, Z
    1d66:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <usart_SendData>
		j++;
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	8f 5f       	subi	r24, 0xFF	; 255
    1d6e:	89 83       	std	Y+1, r24	; 0x01

error_state usart_SendString(uint8_t *str)
{
	uint8_t j=0;

	while (str[j]!=0)		
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	e2 0f       	add	r30, r18
    1d7e:	f3 1f       	adc	r31, r19
    1d80:	80 81       	ld	r24, Z
    1d82:	88 23       	and	r24, r24
    1d84:	39 f7       	brne	.-50     	; 0x1d54 <usart_SendString+0x14>
	{
		usart_SendData(str[j]);
		j++;
	}

	return STRING_NOERROR;
    1d86:	87 e0       	ldi	r24, 0x07	; 7
}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <usart_ReceiveString>:

uint8_t * usart_ReceiveString(uint8_t * au8data ,uint8_t terminating_character)
{
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	27 97       	sbiw	r28, 0x07	; 7
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	6f 83       	std	Y+7, r22	; 0x07
	uint32_t i,temp=0;
    1db2:	1a 82       	std	Y+2, r1	; 0x02
    1db4:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;;i++)
    1db6:	1c 82       	std	Y+4, r1	; 0x04
    1db8:	1b 82       	std	Y+3, r1	; 0x03
	{
		*(au8data+i)=usart_ReceiveData();
    1dba:	2d 81       	ldd	r18, Y+5	; 0x05
    1dbc:	3e 81       	ldd	r19, Y+6	; 0x06
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	89 01       	movw	r16, r18
    1dc4:	08 0f       	add	r16, r24
    1dc6:	19 1f       	adc	r17, r25
    1dc8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <usart_ReceiveData>
    1dcc:	f8 01       	movw	r30, r16
    1dce:	80 83       	st	Z, r24
		if(*(au8data+i)==terminating_character)
    1dd0:	2d 81       	ldd	r18, Y+5	; 0x05
    1dd2:	3e 81       	ldd	r19, Y+6	; 0x06
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	f9 01       	movw	r30, r18
    1dda:	e8 0f       	add	r30, r24
    1ddc:	f9 1f       	adc	r31, r25
    1dde:	90 81       	ld	r25, Z
    1de0:	8f 81       	ldd	r24, Y+7	; 0x07
    1de2:	98 17       	cp	r25, r24
    1de4:	59 f0       	breq	.+22     	; 0x1dfc <usart_ReceiveString+0x68>
			break;
		else
			temp++;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
}

uint8_t * usart_ReceiveString(uint8_t * au8data ,uint8_t terminating_character)
{
	uint32_t i,temp=0;
	for(i=0;;i++)
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	9c 83       	std	Y+4, r25	; 0x04
    1df8:	8b 83       	std	Y+3, r24	; 0x03
    1dfa:	df cf       	rjmp	.-66     	; 0x1dba <usart_ReceiveString+0x26>
		if(*(au8data+i)==terminating_character)
			break;
		else
			temp++;
	}
	*(au8data+temp)='\0';
    1dfc:	2d 81       	ldd	r18, Y+5	; 0x05
    1dfe:	3e 81       	ldd	r19, Y+6	; 0x06
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	f9 01       	movw	r30, r18
    1e06:	e8 0f       	add	r30, r24
    1e08:	f9 1f       	adc	r31, r25
    1e0a:	10 82       	st	Z, r1
	return au8data;
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1e10:	27 96       	adiw	r28, 0x07	; 7
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	08 95       	ret

00001e26 <__prologue_saves__>:
    1e26:	2f 92       	push	r2
    1e28:	3f 92       	push	r3
    1e2a:	4f 92       	push	r4
    1e2c:	5f 92       	push	r5
    1e2e:	6f 92       	push	r6
    1e30:	7f 92       	push	r7
    1e32:	8f 92       	push	r8
    1e34:	9f 92       	push	r9
    1e36:	af 92       	push	r10
    1e38:	bf 92       	push	r11
    1e3a:	cf 92       	push	r12
    1e3c:	df 92       	push	r13
    1e3e:	ef 92       	push	r14
    1e40:	ff 92       	push	r15
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	ca 1b       	sub	r28, r26
    1e50:	db 0b       	sbc	r29, r27
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	09 94       	ijmp

00001e5e <__epilogue_restores__>:
    1e5e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e60:	39 88       	ldd	r3, Y+17	; 0x11
    1e62:	48 88       	ldd	r4, Y+16	; 0x10
    1e64:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e66:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e68:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e70:	b9 84       	ldd	r11, Y+9	; 0x09
    1e72:	c8 84       	ldd	r12, Y+8	; 0x08
    1e74:	df 80       	ldd	r13, Y+7	; 0x07
    1e76:	ee 80       	ldd	r14, Y+6	; 0x06
    1e78:	fd 80       	ldd	r15, Y+5	; 0x05
    1e7a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e7c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e7e:	aa 81       	ldd	r26, Y+2	; 0x02
    1e80:	b9 81       	ldd	r27, Y+1	; 0x01
    1e82:	ce 0f       	add	r28, r30
    1e84:	d1 1d       	adc	r29, r1
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	ed 01       	movw	r28, r26
    1e92:	08 95       	ret

00001e94 <strcmp>:
    1e94:	fb 01       	movw	r30, r22
    1e96:	dc 01       	movw	r26, r24
    1e98:	8d 91       	ld	r24, X+
    1e9a:	01 90       	ld	r0, Z+
    1e9c:	80 19       	sub	r24, r0
    1e9e:	01 10       	cpse	r0, r1
    1ea0:	d9 f3       	breq	.-10     	; 0x1e98 <strcmp+0x4>
    1ea2:	99 0b       	sbc	r25, r25
    1ea4:	08 95       	ret

00001ea6 <_exit>:
    1ea6:	f8 94       	cli

00001ea8 <__stop_program>:
    1ea8:	ff cf       	rjmp	.-2      	; 0x1ea8 <__stop_program>
