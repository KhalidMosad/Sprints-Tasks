
Car_UltraSonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004796  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00004796  0000482a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800172  00800172  0000493c  2**0
                  ALLOC
  3 .stab         000043bc  00000000  00000000  0000493c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002d48  00000000  00000000  00008cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ba40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000bdd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f563  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001073c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000108fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00010bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__vector_1>
       8:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_2>
       c:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__vector_5>
      18:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__vector_6>
      1c:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__vector_7>
      20:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__vector_8>
      24:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 06 23 	call	0x460c	; 0x460c <main>
      8a:	0c 94 c9 23 	jmp	0x4792	; 0x4792 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9a 23 	jmp	0x4734	; 0x4734 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b6 23 	jmp	0x476c	; 0x476c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 be 23 	jmp	0x477c	; 0x477c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 9a 23 	jmp	0x4734	; 0x4734 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 b6 23 	jmp	0x476c	; 0x476c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer0_Init>:
 * @param scaler TIMER Prescaler
 * @param oc_mode OC0 mode
 * @return EN_ERRORSTATE_t 
 */
EN_ERRORSTATE_t Timer0_Init(EN_Timer0Mode_t mode, EN_Timer0Scaler_t scaler, EN_OC0Mode_t oc_mode)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	28 97       	sbiw	r28, 0x08	; 8
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	8a 83       	std	Y+2, r24	; 0x02
     e44:	6b 83       	std	Y+3, r22	; 0x03
     e46:	4c 83       	std	Y+4, r20	; 0x04
	EN_ERRORSTATE_t state;
	state = E_OK;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	89 83       	std	Y+1, r24	; 0x01

	switch (mode)
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	38 87       	std	Y+8, r19	; 0x08
     e54:	2f 83       	std	Y+7, r18	; 0x07
     e56:	8f 81       	ldd	r24, Y+7	; 0x07
     e58:	98 85       	ldd	r25, Y+8	; 0x08
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	91 05       	cpc	r25, r1
     e5e:	21 f1       	breq	.+72     	; 0xea8 <Timer0_Init+0x7a>
     e60:	2f 81       	ldd	r18, Y+7	; 0x07
     e62:	38 85       	ldd	r19, Y+8	; 0x08
     e64:	22 30       	cpi	r18, 0x02	; 2
     e66:	31 05       	cpc	r19, r1
     e68:	2c f4       	brge	.+10     	; 0xe74 <Timer0_Init+0x46>
     e6a:	8f 81       	ldd	r24, Y+7	; 0x07
     e6c:	98 85       	ldd	r25, Y+8	; 0x08
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	61 f0       	breq	.+24     	; 0xe8a <Timer0_Init+0x5c>
     e72:	47 c0       	rjmp	.+142    	; 0xf02 <Timer0_Init+0xd4>
     e74:	2f 81       	ldd	r18, Y+7	; 0x07
     e76:	38 85       	ldd	r19, Y+8	; 0x08
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	21 f1       	breq	.+72     	; 0xec6 <Timer0_Init+0x98>
     e7e:	8f 81       	ldd	r24, Y+7	; 0x07
     e80:	98 85       	ldd	r25, Y+8	; 0x08
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	91 05       	cpc	r25, r1
     e86:	71 f1       	breq	.+92     	; 0xee4 <Timer0_Init+0xb6>
     e88:	3c c0       	rjmp	.+120    	; 0xf02 <Timer0_Init+0xd4>
	{
	case TIMER0_NORMAL_MODE:
		CLRBIT(TCCR0, WGM00);
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8f 7b       	andi	r24, 0xBF	; 191
     e96:	8c 93       	st	X, r24
		CLRBIT(TCCR0, WGM01);
     e98:	a3 e5       	ldi	r26, 0x53	; 83
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e3 e5       	ldi	r30, 0x53	; 83
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	87 7f       	andi	r24, 0xF7	; 247
     ea4:	8c 93       	st	X, r24
     ea6:	2e c0       	rjmp	.+92     	; 0xf04 <Timer0_Init+0xd6>
		break;
	case TIMER0_PHASECORRECT_MODE:
		SETBIT(TCCR0, WGM00);
     ea8:	a3 e5       	ldi	r26, 0x53	; 83
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e3 e5       	ldi	r30, 0x53	; 83
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	8c 93       	st	X, r24
		CLRBIT(TCCR0, WGM01);
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	87 7f       	andi	r24, 0xF7	; 247
     ec2:	8c 93       	st	X, r24
     ec4:	1f c0       	rjmp	.+62     	; 0xf04 <Timer0_Init+0xd6>
		break;
	case TIMER0_CTC_MODE:
		CLRBIT(TCCR0, WGM00);
     ec6:	a3 e5       	ldi	r26, 0x53	; 83
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e3 e5       	ldi	r30, 0x53	; 83
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8f 7b       	andi	r24, 0xBF	; 191
     ed2:	8c 93       	st	X, r24
		SETBIT(TCCR0, WGM01);
     ed4:	a3 e5       	ldi	r26, 0x53	; 83
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e3 e5       	ldi	r30, 0x53	; 83
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	88 60       	ori	r24, 0x08	; 8
     ee0:	8c 93       	st	X, r24
     ee2:	10 c0       	rjmp	.+32     	; 0xf04 <Timer0_Init+0xd6>
		break;
	case TIMER0_FASTPWM_MODE:
		SETBIT(TCCR0, WGM00);
     ee4:	a3 e5       	ldi	r26, 0x53	; 83
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e3 e5       	ldi	r30, 0x53	; 83
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 64       	ori	r24, 0x40	; 64
     ef0:	8c 93       	st	X, r24
		SETBIT(TCCR0, WGM01);
     ef2:	a3 e5       	ldi	r26, 0x53	; 83
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e3 e5       	ldi	r30, 0x53	; 83
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 60       	ori	r24, 0x08	; 8
     efe:	8c 93       	st	X, r24
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <Timer0_Init+0xd6>
		break;
	default:
		state = E_ERROR;
     f02:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	TCCR0 &= 0XF8; //0b11111000
     f04:	a3 e5       	ldi	r26, 0x53	; 83
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e3 e5       	ldi	r30, 0x53	; 83
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 7f       	andi	r24, 0xF8	; 248
     f10:	8c 93       	st	X, r24
	TCCR0 |= scaler;
     f12:	a3 e5       	ldi	r26, 0x53	; 83
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e3 e5       	ldi	r30, 0x53	; 83
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	90 81       	ld	r25, Z
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	89 2b       	or	r24, r25
     f20:	8c 93       	st	X, r24
	gPrescal = scaler;
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	90 93 69 01 	sts	0x0169, r25
     f2c:	80 93 68 01 	sts	0x0168, r24

	switch (oc_mode)
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3e 83       	std	Y+6, r19	; 0x06
     f38:	2d 83       	std	Y+5, r18	; 0x05
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	21 f1       	breq	.+72     	; 0xf8c <Timer0_Init+0x15e>
     f44:	2d 81       	ldd	r18, Y+5	; 0x05
     f46:	3e 81       	ldd	r19, Y+6	; 0x06
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	2c f4       	brge	.+10     	; 0xf58 <Timer0_Init+0x12a>
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	61 f0       	breq	.+24     	; 0xf6e <Timer0_Init+0x140>
     f56:	47 c0       	rjmp	.+142    	; 0xfe6 <Timer0_Init+0x1b8>
     f58:	2d 81       	ldd	r18, Y+5	; 0x05
     f5a:	3e 81       	ldd	r19, Y+6	; 0x06
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	21 f1       	breq	.+72     	; 0xfaa <Timer0_Init+0x17c>
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	71 f1       	breq	.+92     	; 0xfc8 <Timer0_Init+0x19a>
     f6c:	3c c0       	rjmp	.+120    	; 0xfe6 <Timer0_Init+0x1b8>
	{
	case OCO_DISCONNECTED:
		CLRBIT(TCCR0, COM00);
     f6e:	a3 e5       	ldi	r26, 0x53	; 83
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e3 e5       	ldi	r30, 0x53	; 83
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 7e       	andi	r24, 0xEF	; 239
     f7a:	8c 93       	st	X, r24
		CLRBIT(TCCR0, COM01);
     f7c:	a3 e5       	ldi	r26, 0x53	; 83
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e3 e5       	ldi	r30, 0x53	; 83
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8f 7d       	andi	r24, 0xDF	; 223
     f88:	8c 93       	st	X, r24
     f8a:	2e c0       	rjmp	.+92     	; 0xfe8 <Timer0_Init+0x1ba>
		break;
	case OCO_TOGGLE:
		SETBIT(TCCR0, COM00);
     f8c:	a3 e5       	ldi	r26, 0x53	; 83
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e3 e5       	ldi	r30, 0x53	; 83
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 61       	ori	r24, 0x10	; 16
     f98:	8c 93       	st	X, r24
		CLRBIT(TCCR0, COM01);
     f9a:	a3 e5       	ldi	r26, 0x53	; 83
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e3 e5       	ldi	r30, 0x53	; 83
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8f 7d       	andi	r24, 0xDF	; 223
     fa6:	8c 93       	st	X, r24
     fa8:	1f c0       	rjmp	.+62     	; 0xfe8 <Timer0_Init+0x1ba>
		break;
	case OCO_NON_INVERTING:
		CLRBIT(TCCR0, COM00);
     faa:	a3 e5       	ldi	r26, 0x53	; 83
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e3 e5       	ldi	r30, 0x53	; 83
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8f 7e       	andi	r24, 0xEF	; 239
     fb6:	8c 93       	st	X, r24
		SETBIT(TCCR0, COM01);
     fb8:	a3 e5       	ldi	r26, 0x53	; 83
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e3 e5       	ldi	r30, 0x53	; 83
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 62       	ori	r24, 0x20	; 32
     fc4:	8c 93       	st	X, r24
     fc6:	10 c0       	rjmp	.+32     	; 0xfe8 <Timer0_Init+0x1ba>
		break;
	case OCO_INVERTING:
		SETBIT(TCCR0, COM00);
     fc8:	a3 e5       	ldi	r26, 0x53	; 83
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e3 e5       	ldi	r30, 0x53	; 83
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 61       	ori	r24, 0x10	; 16
     fd4:	8c 93       	st	X, r24
		SETBIT(TCCR0, COM01);
     fd6:	a3 e5       	ldi	r26, 0x53	; 83
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e3 e5       	ldi	r30, 0x53	; 83
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	80 62       	ori	r24, 0x20	; 32
     fe2:	8c 93       	st	X, r24
     fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <Timer0_Init+0x1ba>
		break;
	default:
		state = E_ERROR;
     fe6:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return state;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fea:	28 96       	adiw	r28, 0x08	; 8
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <TIMER0_voidPhaseCorrect>:
 * 
 * @param DutyCycle speed
 * @param ocomode OCO_INVERTING - OCO_NON_INVERTING
 */
void TIMER0_voidPhaseCorrect(uint8_t DutyCycle, EN_OC0Mode_t ocomode)
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	00 d0       	rcall	.+0      	; 0x1002 <TIMER0_voidPhaseCorrect+0x6>
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	6a 83       	std	Y+2, r22	; 0x02
	if (ocomode == OCO_INVERTING)
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	83 30       	cpi	r24, 0x03	; 3
    100e:	81 f4       	brne	.+32     	; 0x1030 <TIMER0_voidPhaseCorrect+0x34>
	{
		OCR0 = 255 - ((TIMER0_REG_CAPACITY * DutyCycle) / 100);
    1010:	ec e5       	ldi	r30, 0x5C	; 92
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	98 2f       	mov	r25, r24
    101c:	88 27       	eor	r24, r24
    101e:	24 e6       	ldi	r18, 0x64	; 100
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	b9 01       	movw	r22, r18
    1024:	0e 94 42 23 	call	0x4684	; 0x4684 <__divmodhi4>
    1028:	cb 01       	movw	r24, r22
    102a:	80 95       	com	r24
    102c:	80 83       	st	Z, r24
    102e:	1d c0       	rjmp	.+58     	; 0x106a <TIMER0_voidPhaseCorrect+0x6e>
	}

	else if (ocomode == OCO_NON_INVERTING)
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	d1 f4       	brne	.+52     	; 0x106a <TIMER0_voidPhaseCorrect+0x6e>
	{
		OCR0 = (255 * DutyCycle) / 100;
    1036:	ec e5       	ldi	r30, 0x5C	; 92
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	48 2f       	mov	r20, r24
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	ca 01       	movw	r24, r20
    1042:	9c 01       	movw	r18, r24
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	c9 01       	movw	r24, r18
    104a:	96 95       	lsr	r25
    104c:	98 2f       	mov	r25, r24
    104e:	88 27       	eor	r24, r24
    1050:	97 95       	ror	r25
    1052:	87 95       	ror	r24
    1054:	82 1b       	sub	r24, r18
    1056:	93 0b       	sbc	r25, r19
    1058:	84 0f       	add	r24, r20
    105a:	95 1f       	adc	r25, r21
    105c:	24 e6       	ldi	r18, 0x64	; 100
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	b9 01       	movw	r22, r18
    1062:	0e 94 42 23 	call	0x4684	; 0x4684 <__divmodhi4>
    1066:	cb 01       	movw	r24, r22
    1068:	80 83       	st	Z, r24
	}
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <TIMER0_voidFastPWM>:
 * 
 * @param DutyCycle speed
 * @param ocomode OCO_INVERTING - OCO_NON_INVERTING
 */
void TIMER0_voidFastPWM(uint8_t DutyCycle, EN_OC0Mode_t ocomode)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <TIMER0_voidFastPWM+0x6>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	6a 83       	std	Y+2, r22	; 0x02
	if (ocomode == OCO_INVERTING)
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	81 f4       	brne	.+32     	; 0x10a8 <TIMER0_voidFastPWM+0x34>
	{
		OCR0 = ((TIMER0_REG_CAPACITY * DutyCycle) / 100) - 1;
    1088:	ec e5       	ldi	r30, 0x5C	; 92
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	98 2f       	mov	r25, r24
    1094:	88 27       	eor	r24, r24
    1096:	24 e6       	ldi	r18, 0x64	; 100
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	b9 01       	movw	r22, r18
    109c:	0e 94 42 23 	call	0x4684	; 0x4684 <__divmodhi4>
    10a0:	cb 01       	movw	r24, r22
    10a2:	81 50       	subi	r24, 0x01	; 1
    10a4:	80 83       	st	Z, r24
    10a6:	12 c0       	rjmp	.+36     	; 0x10cc <TIMER0_voidFastPWM+0x58>
	}
	else if (ocomode == OCO_NON_INVERTING)
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	82 30       	cpi	r24, 0x02	; 2
    10ac:	79 f4       	brne	.+30     	; 0x10cc <TIMER0_voidFastPWM+0x58>
	{
		OCR0 = 255 - ((TIMER0_REG_CAPACITY * DutyCycle) / 100);
    10ae:	ec e5       	ldi	r30, 0x5C	; 92
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	98 2f       	mov	r25, r24
    10ba:	88 27       	eor	r24, r24
    10bc:	24 e6       	ldi	r18, 0x64	; 100
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	b9 01       	movw	r22, r18
    10c2:	0e 94 42 23 	call	0x4684	; 0x4684 <__divmodhi4>
    10c6:	cb 01       	movw	r24, r22
    10c8:	80 95       	com	r24
    10ca:	80 83       	st	Z, r24
	}
}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <Timer0_OV_InterruptEnable>:
/**
 * @brief Enable Over FLow Interrupt 
 * 
 */
void Timer0_OV_InterruptEnable(void)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG, I_BIT);
    10de:	af e5       	ldi	r26, 0x5F	; 95
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ef e5       	ldi	r30, 0x5F	; 95
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 68       	ori	r24, 0x80	; 128
    10ea:	8c 93       	st	X, r24
	SETBIT(TIMSK, TOIE0);
    10ec:	a9 e5       	ldi	r26, 0x59	; 89
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e9 e5       	ldi	r30, 0x59	; 89
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	81 60       	ori	r24, 0x01	; 1
    10f8:	8c 93       	st	X, r24
}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <Timer0_OV_InterruptDisable>:
/**
 * @brief Disable Over FLow Interrupt
 * 
 */
void Timer0_OV_InterruptDisable(void)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK, TOIE0);
    1108:	a9 e5       	ldi	r26, 0x59	; 89
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e9 e5       	ldi	r30, 0x59	; 89
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8e 7f       	andi	r24, 0xFE	; 254
    1114:	8c 93       	st	X, r24
}
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <Timer0_OC_InterruptEnable>:
/**
 * @brief Enable CTC Interrupt
 * 
 */
void Timer0_OC_InterruptEnable(void)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	SETBIT(TIMSK, OCIE0);
    1124:	a9 e5       	ldi	r26, 0x59	; 89
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e9 e5       	ldi	r30, 0x59	; 89
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	82 60       	ori	r24, 0x02	; 2
    1130:	8c 93       	st	X, r24
}
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <Timer0_OC_InterruptDisable>:
/**
 * @brief Disable CTC Interrupt
 * 
 */
void Timer0_OC_InterruptDisable(void)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK, OCIE0);
    1140:	a9 e5       	ldi	r26, 0x59	; 89
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e9 e5       	ldi	r30, 0x59	; 89
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8d 7f       	andi	r24, 0xFD	; 253
    114c:	8c 93       	st	X, r24
}
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <Get_State>:


uint8_t Get_State(void){
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
//		flag++;
//
//		}


	return flag;
    115c:	80 91 9b 01 	lds	r24, 0x019B

}
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <Timer0_SetCallBack>:
void Timer0_SetCallBack(void (*LocalFptr)(void))
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <Timer0_SetCallBack+0x6>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = LocalFptr;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	90 93 7b 01 	sts	0x017B, r25
    117c:	80 93 7a 01 	sts	0x017A, r24
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <Timer0_delayUs>:
 * 
 * @param Time desired time
 * @return EN_ERRORSTATE_t 
 */
EN_ERRORSTATE_t Timer0_delayUs(uint32_t Time)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	2d 97       	sbiw	r28, 0x0d	; 13
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	6a 87       	std	Y+10, r22	; 0x0a
    11a0:	7b 87       	std	Y+11, r23	; 0x0b
    11a2:	8c 87       	std	Y+12, r24	; 0x0c
    11a4:	9d 87       	std	Y+13, r25	; 0x0d
	EN_ERRORSTATE_t state;
	state = E_OK;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	89 87       	std	Y+9, r24	; 0x09

	if (gPrescal == TIMER0_SCALER_8)
    11aa:	80 91 68 01 	lds	r24, 0x0168
    11ae:	90 91 69 01 	lds	r25, 0x0169
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	91 05       	cpc	r25, r1
    11b6:	39 f4       	brne	.+14     	; 0x11c6 <Timer0_delayUs+0x3c>
	{
		gPrescal = 8;
    11b8:	88 e0       	ldi	r24, 0x08	; 8
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	90 93 69 01 	sts	0x0169, r25
    11c0:	80 93 68 01 	sts	0x0168, r24
    11c4:	2b c0       	rjmp	.+86     	; 0x121c <Timer0_delayUs+0x92>
	}
	else if (gPrescal == TIMER0_SCALER_64)
    11c6:	80 91 68 01 	lds	r24, 0x0168
    11ca:	90 91 69 01 	lds	r25, 0x0169
    11ce:	83 30       	cpi	r24, 0x03	; 3
    11d0:	91 05       	cpc	r25, r1
    11d2:	39 f4       	brne	.+14     	; 0x11e2 <Timer0_delayUs+0x58>
	{
		gPrescal = 64;
    11d4:	80 e4       	ldi	r24, 0x40	; 64
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	90 93 69 01 	sts	0x0169, r25
    11dc:	80 93 68 01 	sts	0x0168, r24
    11e0:	1d c0       	rjmp	.+58     	; 0x121c <Timer0_delayUs+0x92>
	}
	else if (gPrescal == TIMER0_SCALER_256)
    11e2:	80 91 68 01 	lds	r24, 0x0168
    11e6:	90 91 69 01 	lds	r25, 0x0169
    11ea:	84 30       	cpi	r24, 0x04	; 4
    11ec:	91 05       	cpc	r25, r1
    11ee:	39 f4       	brne	.+14     	; 0x11fe <Timer0_delayUs+0x74>
	{
		gPrescal = 256;
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	90 93 69 01 	sts	0x0169, r25
    11f8:	80 93 68 01 	sts	0x0168, r24
    11fc:	0f c0       	rjmp	.+30     	; 0x121c <Timer0_delayUs+0x92>
	}
	else if (gPrescal == TIMER0_SCALER_1024)
    11fe:	80 91 68 01 	lds	r24, 0x0168
    1202:	90 91 69 01 	lds	r25, 0x0169
    1206:	85 30       	cpi	r24, 0x05	; 5
    1208:	91 05       	cpc	r25, r1
    120a:	39 f4       	brne	.+14     	; 0x121a <Timer0_delayUs+0x90>
	{
		gPrescal = 1024;
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	94 e0       	ldi	r25, 0x04	; 4
    1210:	90 93 69 01 	sts	0x0169, r25
    1214:	80 93 68 01 	sts	0x0168, r24
    1218:	01 c0       	rjmp	.+2      	; 0x121c <Timer0_delayUs+0x92>
	}
	else
	{
		state = E_ERROR;
    121a:	19 86       	std	Y+9, r1	; 0x09
	}

	float TickTime = gPrescal / F_CPU_MHZ;
    121c:	80 91 68 01 	lds	r24, 0x0168
    1220:	90 91 69 01 	lds	r25, 0x0169
    1224:	cc 01       	movw	r24, r24
    1226:	a0 e0       	ldi	r26, 0x00	; 0
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	51 e4       	ldi	r21, 0x41	; 65
    1242:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	9e 83       	std	Y+6, r25	; 0x06
    124e:	af 83       	std	Y+7, r26	; 0x07
    1250:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t numbOfTick = Time / TickTime;
    1252:	6a 85       	ldd	r22, Y+10	; 0x0a
    1254:	7b 85       	ldd	r23, Y+11	; 0x0b
    1256:	8c 85       	ldd	r24, Y+12	; 0x0c
    1258:	9d 85       	ldd	r25, Y+13	; 0x0d
    125a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	2d 81       	ldd	r18, Y+5	; 0x05
    1268:	3e 81       	ldd	r19, Y+6	; 0x06
    126a:	4f 81       	ldd	r20, Y+7	; 0x07
    126c:	58 85       	ldd	r21, Y+8	; 0x08
    126e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	ab 83       	std	Y+3, r26	; 0x03
    1288:	bc 83       	std	Y+4, r27	; 0x04
	gOVFNUM = numbOfTick / 250;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	ab 81       	ldd	r26, Y+3	; 0x03
    1290:	bc 81       	ldd	r27, Y+4	; 0x04
    1292:	2a ef       	ldi	r18, 0xFA	; 250
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 55 23 	call	0x46aa	; 0x46aa <__udivmodsi4>
    12a2:	da 01       	movw	r26, r20
    12a4:	c9 01       	movw	r24, r18
    12a6:	80 93 6a 01 	sts	0x016A, r24
    12aa:	90 93 6b 01 	sts	0x016B, r25
    12ae:	a0 93 6c 01 	sts	0x016C, r26
    12b2:	b0 93 6d 01 	sts	0x016D, r27

	return state;
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
}
    12b8:	2d 96       	adiw	r28, 0x0d	; 13
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <__vector_11>:

 void __vector_11(void)
 {
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	2f 93       	push	r18
    12d6:	3f 93       	push	r19
    12d8:	4f 93       	push	r20
    12da:	5f 93       	push	r21
    12dc:	6f 93       	push	r22
    12de:	7f 93       	push	r23
    12e0:	8f 93       	push	r24
    12e2:	9f 93       	push	r25
    12e4:	af 93       	push	r26
    12e6:	bf 93       	push	r27
    12e8:	ef 93       	push	r30
    12ea:	ff 93       	push	r31
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
 	TCNT0 = 6;
    12f4:	e2 e5       	ldi	r30, 0x52	; 82
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	86 e0       	ldi	r24, 0x06	; 6
    12fa:	80 83       	st	Z, r24
 	static volatile uint32_t delay = 140;

 	if (count_flag<200){
    12fc:	80 91 7e 01 	lds	r24, 0x017E
    1300:	90 91 7f 01 	lds	r25, 0x017F
    1304:	a0 91 80 01 	lds	r26, 0x0180
    1308:	b0 91 81 01 	lds	r27, 0x0181
    130c:	88 3c       	cpi	r24, 0xC8	; 200
    130e:	91 05       	cpc	r25, r1
    1310:	a1 05       	cpc	r26, r1
    1312:	b1 05       	cpc	r27, r1
    1314:	98 f4       	brcc	.+38     	; 0x133c <__vector_11+0x72>
 		count_flag++;
    1316:	80 91 7e 01 	lds	r24, 0x017E
    131a:	90 91 7f 01 	lds	r25, 0x017F
    131e:	a0 91 80 01 	lds	r26, 0x0180
    1322:	b0 91 81 01 	lds	r27, 0x0181
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	a1 1d       	adc	r26, r1
    132a:	b1 1d       	adc	r27, r1
    132c:	80 93 7e 01 	sts	0x017E, r24
    1330:	90 93 7f 01 	sts	0x017F, r25
    1334:	a0 93 80 01 	sts	0x0180, r26
    1338:	b0 93 81 01 	sts	0x0181, r27
 	}
 	count_lcd++;
    133c:	80 91 82 01 	lds	r24, 0x0182
    1340:	90 91 83 01 	lds	r25, 0x0183
    1344:	a0 91 84 01 	lds	r26, 0x0184
    1348:	b0 91 85 01 	lds	r27, 0x0185
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	a1 1d       	adc	r26, r1
    1350:	b1 1d       	adc	r27, r1
    1352:	80 93 82 01 	sts	0x0182, r24
    1356:	90 93 83 01 	sts	0x0183, r25
    135a:	a0 93 84 01 	sts	0x0184, r26
    135e:	b0 93 85 01 	sts	0x0185, r27
 	count_button++;
    1362:	80 91 86 01 	lds	r24, 0x0186
    1366:	90 91 87 01 	lds	r25, 0x0187
    136a:	a0 91 88 01 	lds	r26, 0x0188
    136e:	b0 91 89 01 	lds	r27, 0x0189
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	a1 1d       	adc	r26, r1
    1376:	b1 1d       	adc	r27, r1
    1378:	80 93 86 01 	sts	0x0186, r24
    137c:	90 93 87 01 	sts	0x0187, r25
    1380:	a0 93 88 01 	sts	0x0188, r26
    1384:	b0 93 89 01 	sts	0x0189, r27
 	if (Timer0_OVF_Fptr != NULLPTR)
    1388:	80 91 7a 01 	lds	r24, 0x017A
    138c:	90 91 7b 01 	lds	r25, 0x017B
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	29 f0       	breq	.+10     	; 0x139e <__vector_11+0xd4>
 	{
 		Timer0_OVF_Fptr();
    1394:	e0 91 7a 01 	lds	r30, 0x017A
    1398:	f0 91 7b 01 	lds	r31, 0x017B
    139c:	09 95       	icall
 	}
 }
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	ff 91       	pop	r31
    13a4:	ef 91       	pop	r30
    13a6:	bf 91       	pop	r27
    13a8:	af 91       	pop	r26
    13aa:	9f 91       	pop	r25
    13ac:	8f 91       	pop	r24
    13ae:	7f 91       	pop	r23
    13b0:	6f 91       	pop	r22
    13b2:	5f 91       	pop	r21
    13b4:	4f 91       	pop	r20
    13b6:	3f 91       	pop	r19
    13b8:	2f 91       	pop	r18
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	0f 90       	pop	r0
    13c0:	1f 90       	pop	r1
    13c2:	18 95       	reti

000013c4 <Timer1_Init>:
 * @param oc1a_mode  OCRA_DISCONNECTED -  OCRA_TOGGLE - OCRA_NON_INVERTING - OCRA_INVERTING
 * @param oc1b_mode OCRB_DISCONNECTED - OCRB_TOGGLE - OCRB_NON_INVERTING - OCRB_INVERTING
 * @return EN_ERRORSTATE_t Error state
 */
EN_ERRORSTATE_t Timer1_Init(Timer1Mode_type mode, Timer1Scaler_type scaler, OC1A_Mode_type oc1a_mode, OC1B_Mode_type oc1b_mode)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	2b 97       	sbiw	r28, 0x0b	; 11
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	8a 83       	std	Y+2, r24	; 0x02
    13da:	6b 83       	std	Y+3, r22	; 0x03
    13dc:	4c 83       	std	Y+4, r20	; 0x04
    13de:	2d 83       	std	Y+5, r18	; 0x05
	EN_ERRORSTATE_t state;
	state = E_OK;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01

	switch (mode)
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	3b 87       	std	Y+11, r19	; 0x0b
    13ec:	2a 87       	std	Y+10, r18	; 0x0a
    13ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	91 05       	cpc	r25, r1
    13f6:	09 f4       	brne	.+2      	; 0x13fa <Timer1_Init+0x36>
    13f8:	56 c0       	rjmp	.+172    	; 0x14a6 <Timer1_Init+0xe2>
    13fa:	2a 85       	ldd	r18, Y+10	; 0x0a
    13fc:	3b 85       	ldd	r19, Y+11	; 0x0b
    13fe:	23 30       	cpi	r18, 0x03	; 3
    1400:	31 05       	cpc	r19, r1
    1402:	54 f4       	brge	.+20     	; 0x1418 <Timer1_Init+0x54>
    1404:	8a 85       	ldd	r24, Y+10	; 0x0a
    1406:	9b 85       	ldd	r25, Y+11	; 0x0b
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	99 f0       	breq	.+38     	; 0x1432 <Timer1_Init+0x6e>
    140c:	2a 85       	ldd	r18, Y+10	; 0x0a
    140e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1410:	21 30       	cpi	r18, 0x01	; 1
    1412:	31 05       	cpc	r19, r1
    1414:	59 f1       	breq	.+86     	; 0x146c <Timer1_Init+0xa8>
    1416:	9e c0       	rjmp	.+316    	; 0x1554 <Timer1_Init+0x190>
    1418:	8a 85       	ldd	r24, Y+10	; 0x0a
    141a:	9b 85       	ldd	r25, Y+11	; 0x0b
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	91 05       	cpc	r25, r1
    1420:	09 f4       	brne	.+2      	; 0x1424 <Timer1_Init+0x60>
    1422:	5e c0       	rjmp	.+188    	; 0x14e0 <Timer1_Init+0x11c>
    1424:	2a 85       	ldd	r18, Y+10	; 0x0a
    1426:	3b 85       	ldd	r19, Y+11	; 0x0b
    1428:	24 30       	cpi	r18, 0x04	; 4
    142a:	31 05       	cpc	r19, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <Timer1_Init+0x6c>
    142e:	75 c0       	rjmp	.+234    	; 0x151a <Timer1_Init+0x156>
    1430:	91 c0       	rjmp	.+290    	; 0x1554 <Timer1_Init+0x190>
	{
	case TIMER1_NORMAL_MODE:
		CLRBIT(TCCR1A, WGM10);
    1432:	af e4       	ldi	r26, 0x4F	; 79
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ef e4       	ldi	r30, 0x4F	; 79
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8e 7f       	andi	r24, 0xFE	; 254
    143e:	8c 93       	st	X, r24
		CLRBIT(TCCR1A, WGM11);
    1440:	af e4       	ldi	r26, 0x4F	; 79
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	ef e4       	ldi	r30, 0x4F	; 79
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8d 7f       	andi	r24, 0xFD	; 253
    144c:	8c 93       	st	X, r24
		CLRBIT(TCCR1B, WGM12);
    144e:	ae e4       	ldi	r26, 0x4E	; 78
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ee e4       	ldi	r30, 0x4E	; 78
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	87 7f       	andi	r24, 0xF7	; 247
    145a:	8c 93       	st	X, r24
		CLRBIT(TCCR1B, WGM13);
    145c:	ae e4       	ldi	r26, 0x4E	; 78
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	ee e4       	ldi	r30, 0x4E	; 78
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8f 7e       	andi	r24, 0xEF	; 239
    1468:	8c 93       	st	X, r24
    146a:	75 c0       	rjmp	.+234    	; 0x1556 <Timer1_Init+0x192>
		break;
	case TIMER1_CTC_ICR_TOP_MODE:
		CLRBIT(TCCR1A, WGM10);
    146c:	af e4       	ldi	r26, 0x4F	; 79
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ef e4       	ldi	r30, 0x4F	; 79
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8e 7f       	andi	r24, 0xFE	; 254
    1478:	8c 93       	st	X, r24
		CLRBIT(TCCR1A, WGM11);
    147a:	af e4       	ldi	r26, 0x4F	; 79
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	ef e4       	ldi	r30, 0x4F	; 79
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8d 7f       	andi	r24, 0xFD	; 253
    1486:	8c 93       	st	X, r24
		SETBIT(TCCR1B, WGM12);
    1488:	ae e4       	ldi	r26, 0x4E	; 78
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ee e4       	ldi	r30, 0x4E	; 78
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	88 60       	ori	r24, 0x08	; 8
    1494:	8c 93       	st	X, r24
		SETBIT(TCCR1B, WGM13);
    1496:	ae e4       	ldi	r26, 0x4E	; 78
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	ee e4       	ldi	r30, 0x4E	; 78
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	80 61       	ori	r24, 0x10	; 16
    14a2:	8c 93       	st	X, r24
    14a4:	58 c0       	rjmp	.+176    	; 0x1556 <Timer1_Init+0x192>
		break;

	case TIMER1_CTC_OCRA_TOP_MODE:
		CLRBIT(TCCR1A, WGM10);
    14a6:	af e4       	ldi	r26, 0x4F	; 79
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ef e4       	ldi	r30, 0x4F	; 79
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8e 7f       	andi	r24, 0xFE	; 254
    14b2:	8c 93       	st	X, r24
		CLRBIT(TCCR1A, WGM11);
    14b4:	af e4       	ldi	r26, 0x4F	; 79
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ef e4       	ldi	r30, 0x4F	; 79
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8d 7f       	andi	r24, 0xFD	; 253
    14c0:	8c 93       	st	X, r24
		SETBIT(TCCR1B, WGM12);
    14c2:	ae e4       	ldi	r26, 0x4E	; 78
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	ee e4       	ldi	r30, 0x4E	; 78
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	88 60       	ori	r24, 0x08	; 8
    14ce:	8c 93       	st	X, r24
		CLRBIT(TCCR1B, WGM13);
    14d0:	ae e4       	ldi	r26, 0x4E	; 78
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e4       	ldi	r30, 0x4E	; 78
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8f 7e       	andi	r24, 0xEF	; 239
    14dc:	8c 93       	st	X, r24
    14de:	3b c0       	rjmp	.+118    	; 0x1556 <Timer1_Init+0x192>
		break;

	case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLRBIT(TCCR1A, WGM10);
    14e0:	af e4       	ldi	r26, 0x4F	; 79
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ef e4       	ldi	r30, 0x4F	; 79
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8e 7f       	andi	r24, 0xFE	; 254
    14ec:	8c 93       	st	X, r24
		SETBIT(TCCR1A, WGM11);
    14ee:	af e4       	ldi	r26, 0x4F	; 79
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ef e4       	ldi	r30, 0x4F	; 79
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	82 60       	ori	r24, 0x02	; 2
    14fa:	8c 93       	st	X, r24
		SETBIT(TCCR1B, WGM12);
    14fc:	ae e4       	ldi	r26, 0x4E	; 78
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ee e4       	ldi	r30, 0x4E	; 78
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	88 60       	ori	r24, 0x08	; 8
    1508:	8c 93       	st	X, r24
		SETBIT(TCCR1B, WGM13);
    150a:	ae e4       	ldi	r26, 0x4E	; 78
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ee e4       	ldi	r30, 0x4E	; 78
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 61       	ori	r24, 0x10	; 16
    1516:	8c 93       	st	X, r24
    1518:	1e c0       	rjmp	.+60     	; 0x1556 <Timer1_Init+0x192>
		break;

	case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SETBIT(TCCR1A, WGM10);
    151a:	af e4       	ldi	r26, 0x4F	; 79
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	ef e4       	ldi	r30, 0x4F	; 79
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	81 60       	ori	r24, 0x01	; 1
    1526:	8c 93       	st	X, r24
		SETBIT(TCCR1A, WGM11);
    1528:	af e4       	ldi	r26, 0x4F	; 79
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ef e4       	ldi	r30, 0x4F	; 79
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	82 60       	ori	r24, 0x02	; 2
    1534:	8c 93       	st	X, r24
		SETBIT(TCCR1B, WGM12);
    1536:	ae e4       	ldi	r26, 0x4E	; 78
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ee e4       	ldi	r30, 0x4E	; 78
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	88 60       	ori	r24, 0x08	; 8
    1542:	8c 93       	st	X, r24
		SETBIT(TCCR1B, WGM13);
    1544:	ae e4       	ldi	r26, 0x4E	; 78
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ee e4       	ldi	r30, 0x4E	; 78
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 61       	ori	r24, 0x10	; 16
    1550:	8c 93       	st	X, r24
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <Timer1_Init+0x192>
		break;
	default:
		state = E_ERROR;
    1554:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (oc1a_mode)
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	39 87       	std	Y+9, r19	; 0x09
    155e:	28 87       	std	Y+8, r18	; 0x08
    1560:	88 85       	ldd	r24, Y+8	; 0x08
    1562:	99 85       	ldd	r25, Y+9	; 0x09
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	21 f1       	breq	.+72     	; 0x15b2 <Timer1_Init+0x1ee>
    156a:	28 85       	ldd	r18, Y+8	; 0x08
    156c:	39 85       	ldd	r19, Y+9	; 0x09
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	2c f4       	brge	.+10     	; 0x157e <Timer1_Init+0x1ba>
    1574:	88 85       	ldd	r24, Y+8	; 0x08
    1576:	99 85       	ldd	r25, Y+9	; 0x09
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	61 f0       	breq	.+24     	; 0x1594 <Timer1_Init+0x1d0>
    157c:	47 c0       	rjmp	.+142    	; 0x160c <Timer1_Init+0x248>
    157e:	28 85       	ldd	r18, Y+8	; 0x08
    1580:	39 85       	ldd	r19, Y+9	; 0x09
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	21 f1       	breq	.+72     	; 0x15d0 <Timer1_Init+0x20c>
    1588:	88 85       	ldd	r24, Y+8	; 0x08
    158a:	99 85       	ldd	r25, Y+9	; 0x09
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	91 05       	cpc	r25, r1
    1590:	71 f1       	breq	.+92     	; 0x15ee <Timer1_Init+0x22a>
    1592:	3c c0       	rjmp	.+120    	; 0x160c <Timer1_Init+0x248>
	{
	case OCRA_DISCONNECTED:
		CLRBIT(TCCR1A, COM1A0);
    1594:	af e4       	ldi	r26, 0x4F	; 79
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ef e4       	ldi	r30, 0x4F	; 79
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8f 7b       	andi	r24, 0xBF	; 191
    15a0:	8c 93       	st	X, r24
		CLRBIT(TCCR1A, COM1A1);
    15a2:	af e4       	ldi	r26, 0x4F	; 79
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ef e4       	ldi	r30, 0x4F	; 79
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 77       	andi	r24, 0x7F	; 127
    15ae:	8c 93       	st	X, r24
    15b0:	2e c0       	rjmp	.+92     	; 0x160e <Timer1_Init+0x24a>
		break;
	case OCRA_TOGGLE:
		SETBIT(TCCR1A, COM1A0);
    15b2:	af e4       	ldi	r26, 0x4F	; 79
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ef e4       	ldi	r30, 0x4F	; 79
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	80 64       	ori	r24, 0x40	; 64
    15be:	8c 93       	st	X, r24
		CLRBIT(TCCR1A, COM1A1);
    15c0:	af e4       	ldi	r26, 0x4F	; 79
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ef e4       	ldi	r30, 0x4F	; 79
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 77       	andi	r24, 0x7F	; 127
    15cc:	8c 93       	st	X, r24
    15ce:	1f c0       	rjmp	.+62     	; 0x160e <Timer1_Init+0x24a>
		break;
	case OCRA_NON_INVERTING:
		CLRBIT(TCCR1A, COM1A0);
    15d0:	af e4       	ldi	r26, 0x4F	; 79
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ef e4       	ldi	r30, 0x4F	; 79
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8f 7b       	andi	r24, 0xBF	; 191
    15dc:	8c 93       	st	X, r24
		SETBIT(TCCR1A, COM1A1);
    15de:	af e4       	ldi	r26, 0x4F	; 79
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	ef e4       	ldi	r30, 0x4F	; 79
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	80 68       	ori	r24, 0x80	; 128
    15ea:	8c 93       	st	X, r24
    15ec:	10 c0       	rjmp	.+32     	; 0x160e <Timer1_Init+0x24a>
		break;
	case OCRA_INVERTING:
		SETBIT(TCCR1A, COM1A0);
    15ee:	af e4       	ldi	r26, 0x4F	; 79
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ef e4       	ldi	r30, 0x4F	; 79
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	80 64       	ori	r24, 0x40	; 64
    15fa:	8c 93       	st	X, r24
		SETBIT(TCCR1A, COM1A1);
    15fc:	af e4       	ldi	r26, 0x4F	; 79
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ef e4       	ldi	r30, 0x4F	; 79
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	80 68       	ori	r24, 0x80	; 128
    1608:	8c 93       	st	X, r24
    160a:	01 c0       	rjmp	.+2      	; 0x160e <Timer1_Init+0x24a>
		break;
	default:
		state = E_ERROR;
    160c:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (oc1b_mode)
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3f 83       	std	Y+7, r19	; 0x07
    1616:	2e 83       	std	Y+6, r18	; 0x06
    1618:	8e 81       	ldd	r24, Y+6	; 0x06
    161a:	9f 81       	ldd	r25, Y+7	; 0x07
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	21 f1       	breq	.+72     	; 0x166a <Timer1_Init+0x2a6>
    1622:	2e 81       	ldd	r18, Y+6	; 0x06
    1624:	3f 81       	ldd	r19, Y+7	; 0x07
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	2c f4       	brge	.+10     	; 0x1636 <Timer1_Init+0x272>
    162c:	8e 81       	ldd	r24, Y+6	; 0x06
    162e:	9f 81       	ldd	r25, Y+7	; 0x07
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	61 f0       	breq	.+24     	; 0x164c <Timer1_Init+0x288>
    1634:	47 c0       	rjmp	.+142    	; 0x16c4 <Timer1_Init+0x300>
    1636:	2e 81       	ldd	r18, Y+6	; 0x06
    1638:	3f 81       	ldd	r19, Y+7	; 0x07
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	21 f1       	breq	.+72     	; 0x1688 <Timer1_Init+0x2c4>
    1640:	8e 81       	ldd	r24, Y+6	; 0x06
    1642:	9f 81       	ldd	r25, Y+7	; 0x07
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	71 f1       	breq	.+92     	; 0x16a6 <Timer1_Init+0x2e2>
    164a:	3c c0       	rjmp	.+120    	; 0x16c4 <Timer1_Init+0x300>
	{
	case OCRB_DISCONNECTED:
		CLRBIT(TCCR1A, COM1B0);
    164c:	af e4       	ldi	r26, 0x4F	; 79
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ef e4       	ldi	r30, 0x4F	; 79
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8f 7e       	andi	r24, 0xEF	; 239
    1658:	8c 93       	st	X, r24
		CLRBIT(TCCR1A, COM1B1);
    165a:	af e4       	ldi	r26, 0x4F	; 79
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ef e4       	ldi	r30, 0x4F	; 79
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8f 7d       	andi	r24, 0xDF	; 223
    1666:	8c 93       	st	X, r24
    1668:	2e c0       	rjmp	.+92     	; 0x16c6 <Timer1_Init+0x302>
		break;
	case OCRB_TOGGLE:
		SETBIT(TCCR1A, COM1B0);
    166a:	af e4       	ldi	r26, 0x4F	; 79
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ef e4       	ldi	r30, 0x4F	; 79
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 61       	ori	r24, 0x10	; 16
    1676:	8c 93       	st	X, r24
		CLRBIT(TCCR1A, COM1B1);
    1678:	af e4       	ldi	r26, 0x4F	; 79
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ef e4       	ldi	r30, 0x4F	; 79
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8f 7d       	andi	r24, 0xDF	; 223
    1684:	8c 93       	st	X, r24
    1686:	1f c0       	rjmp	.+62     	; 0x16c6 <Timer1_Init+0x302>
		break;
	case OCRB_NON_INVERTING:
		CLRBIT(TCCR1A, COM1B0);
    1688:	af e4       	ldi	r26, 0x4F	; 79
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ef e4       	ldi	r30, 0x4F	; 79
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8f 7e       	andi	r24, 0xEF	; 239
    1694:	8c 93       	st	X, r24
		SETBIT(TCCR1A, COM1B1);
    1696:	af e4       	ldi	r26, 0x4F	; 79
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ef e4       	ldi	r30, 0x4F	; 79
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	80 62       	ori	r24, 0x20	; 32
    16a2:	8c 93       	st	X, r24
    16a4:	10 c0       	rjmp	.+32     	; 0x16c6 <Timer1_Init+0x302>
		break;
	case OCRB_INVERTING:
		SETBIT(TCCR1A, COM1B0);
    16a6:	af e4       	ldi	r26, 0x4F	; 79
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	ef e4       	ldi	r30, 0x4F	; 79
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 61       	ori	r24, 0x10	; 16
    16b2:	8c 93       	st	X, r24
		SETBIT(TCCR1A, COM1B1);
    16b4:	af e4       	ldi	r26, 0x4F	; 79
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	ef e4       	ldi	r30, 0x4F	; 79
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	80 62       	ori	r24, 0x20	; 32
    16c0:	8c 93       	st	X, r24
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <Timer1_Init+0x302>
		break;
	default:
		state = E_ERROR;
    16c4:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	TCCR1B &= 0XF8;
    16c6:	ae e4       	ldi	r26, 0x4E	; 78
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ee e4       	ldi	r30, 0x4E	; 78
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	88 7f       	andi	r24, 0xF8	; 248
    16d2:	8c 93       	st	X, r24
	TCCR1B |= scaler;
    16d4:	ae e4       	ldi	r26, 0x4E	; 78
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	ee e4       	ldi	r30, 0x4E	; 78
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	90 81       	ld	r25, Z
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	89 2b       	or	r24, r25
    16e2:	8c 93       	st	X, r24

	return state;
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e6:	2b 96       	adiw	r28, 0x0b	; 11
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <Timer1_InputCaptureEdge>:


void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	0f 92       	push	r0
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	89 83       	std	Y+1, r24	; 0x01
	if (edge == ICU_RISING)
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	88 23       	and	r24, r24
    1708:	41 f4       	brne	.+16     	; 0x171a <Timer1_InputCaptureEdge+0x22>
		SETBIT(TCCR1B, ICES1);
    170a:	ae e4       	ldi	r26, 0x4E	; 78
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ee e4       	ldi	r30, 0x4E	; 78
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	80 64       	ori	r24, 0x40	; 64
    1716:	8c 93       	st	X, r24
    1718:	0a c0       	rjmp	.+20     	; 0x172e <Timer1_InputCaptureEdge+0x36>

	else if (edge == ICU_FALLING)
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	39 f4       	brne	.+14     	; 0x172e <Timer1_InputCaptureEdge+0x36>
		CLRBIT(TCCR1B, ICES1);
    1720:	ae e4       	ldi	r26, 0x4E	; 78
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ee e4       	ldi	r30, 0x4E	; 78
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8f 7b       	andi	r24, 0xBF	; 191
    172c:	8c 93       	st	X, r24
}
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <Timer1_ICU_InterruptEnable>:
/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG, I_BIT);
    173e:	af e5       	ldi	r26, 0x5F	; 95
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ef e5       	ldi	r30, 0x5F	; 95
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	80 68       	ori	r24, 0x80	; 128
    174a:	8c 93       	st	X, r24
	SETBIT(TIMSK, TICIE1);
    174c:	a9 e5       	ldi	r26, 0x59	; 89
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e9 e5       	ldi	r30, 0x59	; 89
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	80 62       	ori	r24, 0x20	; 32
    1758:	8c 93       	st	X, r24
}
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK, TICIE1);
    1768:	a9 e5       	ldi	r26, 0x59	; 89
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e9 e5       	ldi	r30, 0x59	; 89
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8f 7d       	andi	r24, 0xDF	; 223
    1774:	8c 93       	st	X, r24
}
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG, I_BIT);
    1784:	af e5       	ldi	r26, 0x5F	; 95
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	ef e5       	ldi	r30, 0x5F	; 95
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	80 68       	ori	r24, 0x80	; 128
    1790:	8c 93       	st	X, r24
	SETBIT(TIMSK, TOIE1);
    1792:	a9 e5       	ldi	r26, 0x59	; 89
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e9 e5       	ldi	r30, 0x59	; 89
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	84 60       	ori	r24, 0x04	; 4
    179e:	8c 93       	st	X, r24
}
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK, TOIE1);
    17ae:	a9 e5       	ldi	r26, 0x59	; 89
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e9 e5       	ldi	r30, 0x59	; 89
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8b 7f       	andi	r24, 0xFB	; 251
    17ba:	8c 93       	st	X, r24
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG, I_BIT);
    17ca:	af e5       	ldi	r26, 0x5F	; 95
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	ef e5       	ldi	r30, 0x5F	; 95
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	80 68       	ori	r24, 0x80	; 128
    17d6:	8c 93       	st	X, r24
	SETBIT(TIMSK, OCIE1A);
    17d8:	a9 e5       	ldi	r26, 0x59	; 89
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e9 e5       	ldi	r30, 0x59	; 89
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	80 61       	ori	r24, 0x10	; 16
    17e4:	8c 93       	st	X, r24
}
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK, OCIE1A);
    17f4:	a9 e5       	ldi	r26, 0x59	; 89
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e9 e5       	ldi	r30, 0x59	; 89
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8f 7e       	andi	r24, 0xEF	; 239
    1800:	8c 93       	st	X, r24
}
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG, I_BIT);
    1810:	af e5       	ldi	r26, 0x5F	; 95
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ef e5       	ldi	r30, 0x5F	; 95
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 68       	ori	r24, 0x80	; 128
    181c:	8c 93       	st	X, r24
	SETBIT(TIMSK, OCIE1B);
    181e:	a9 e5       	ldi	r26, 0x59	; 89
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e9 e5       	ldi	r30, 0x59	; 89
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	88 60       	ori	r24, 0x08	; 8
    182a:	8c 93       	st	X, r24
}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK, OCIE1B);
    183a:	a9 e5       	ldi	r26, 0x59	; 89
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e9 e5       	ldi	r30, 0x59	; 89
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	87 7f       	andi	r24, 0xF7	; 247
    1846:	8c 93       	st	X, r24
}
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <Timer1_OVF_SetCallBack>:

/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void (*LocalFptr)(void))
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <Timer1_OVF_SetCallBack+0x6>
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr = LocalFptr;
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	90 93 73 01 	sts	0x0173, r25
    1864:	80 93 72 01 	sts	0x0172, r24
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void (*LocalFptr)(void))
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <Timer1_OCA_SetCallBack+0x6>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr = LocalFptr;
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	9a 81       	ldd	r25, Y+2	; 0x02
    1884:	90 93 75 01 	sts	0x0175, r25
    1888:	80 93 74 01 	sts	0x0174, r24
}
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void (*LocalFptr)(void))
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <Timer1_OCB_SetCallBack+0x6>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr = LocalFptr;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	90 93 77 01 	sts	0x0177, r25
    18ac:	80 93 76 01 	sts	0x0176, r24
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void (*LocalFptr)(void))
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <Timer1_ICU_SetCallBack+0x6>
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr = LocalFptr;
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	9a 81       	ldd	r25, Y+2	; 0x02
    18cc:	90 93 79 01 	sts	0x0179, r25
    18d0:	80 93 78 01 	sts	0x0178, r24
}
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
void __vector_9(void)
{
    18de:	1f 92       	push	r1
    18e0:	0f 92       	push	r0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	11 24       	eor	r1, r1
    18e8:	2f 93       	push	r18
    18ea:	3f 93       	push	r19
    18ec:	4f 93       	push	r20
    18ee:	5f 93       	push	r21
    18f0:	6f 93       	push	r22
    18f2:	7f 93       	push	r23
    18f4:	8f 93       	push	r24
    18f6:	9f 93       	push	r25
    18f8:	af 93       	push	r26
    18fa:	bf 93       	push	r27
    18fc:	ef 93       	push	r30
    18fe:	ff 93       	push	r31
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_OVF_Fptr != NULLPTR)
    1908:	80 91 72 01 	lds	r24, 0x0172
    190c:	90 91 73 01 	lds	r25, 0x0173
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	29 f0       	breq	.+10     	; 0x191e <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    1914:	e0 91 72 01 	lds	r30, 0x0172
    1918:	f0 91 73 01 	lds	r31, 0x0173
    191c:	09 95       	icall
	}
}
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	ff 91       	pop	r31
    1924:	ef 91       	pop	r30
    1926:	bf 91       	pop	r27
    1928:	af 91       	pop	r26
    192a:	9f 91       	pop	r25
    192c:	8f 91       	pop	r24
    192e:	7f 91       	pop	r23
    1930:	6f 91       	pop	r22
    1932:	5f 91       	pop	r21
    1934:	4f 91       	pop	r20
    1936:	3f 91       	pop	r19
    1938:	2f 91       	pop	r18
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0
    1940:	1f 90       	pop	r1
    1942:	18 95       	reti

00001944 <__vector_7>:

void __vector_7(void)
{
    1944:	1f 92       	push	r1
    1946:	0f 92       	push	r0
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	0f 92       	push	r0
    194c:	11 24       	eor	r1, r1
    194e:	2f 93       	push	r18
    1950:	3f 93       	push	r19
    1952:	4f 93       	push	r20
    1954:	5f 93       	push	r21
    1956:	6f 93       	push	r22
    1958:	7f 93       	push	r23
    195a:	8f 93       	push	r24
    195c:	9f 93       	push	r25
    195e:	af 93       	push	r26
    1960:	bf 93       	push	r27
    1962:	ef 93       	push	r30
    1964:	ff 93       	push	r31
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_OCA_Fptr != NULLPTR)
    196e:	80 91 74 01 	lds	r24, 0x0174
    1972:	90 91 75 01 	lds	r25, 0x0175
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	29 f0       	breq	.+10     	; 0x1984 <__vector_7+0x40>
	{
		Timer1_OCA_Fptr();
    197a:	e0 91 74 01 	lds	r30, 0x0174
    197e:	f0 91 75 01 	lds	r31, 0x0175
    1982:	09 95       	icall
	}
}
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	ff 91       	pop	r31
    198a:	ef 91       	pop	r30
    198c:	bf 91       	pop	r27
    198e:	af 91       	pop	r26
    1990:	9f 91       	pop	r25
    1992:	8f 91       	pop	r24
    1994:	7f 91       	pop	r23
    1996:	6f 91       	pop	r22
    1998:	5f 91       	pop	r21
    199a:	4f 91       	pop	r20
    199c:	3f 91       	pop	r19
    199e:	2f 91       	pop	r18
    19a0:	0f 90       	pop	r0
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	0f 90       	pop	r0
    19a6:	1f 90       	pop	r1
    19a8:	18 95       	reti

000019aa <__vector_8>:
void __vector_8(void)
{
    19aa:	1f 92       	push	r1
    19ac:	0f 92       	push	r0
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	0f 92       	push	r0
    19b2:	11 24       	eor	r1, r1
    19b4:	2f 93       	push	r18
    19b6:	3f 93       	push	r19
    19b8:	4f 93       	push	r20
    19ba:	5f 93       	push	r21
    19bc:	6f 93       	push	r22
    19be:	7f 93       	push	r23
    19c0:	8f 93       	push	r24
    19c2:	9f 93       	push	r25
    19c4:	af 93       	push	r26
    19c6:	bf 93       	push	r27
    19c8:	ef 93       	push	r30
    19ca:	ff 93       	push	r31
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_OCB_Fptr != NULLPTR)
    19d4:	80 91 76 01 	lds	r24, 0x0176
    19d8:	90 91 77 01 	lds	r25, 0x0177
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	29 f0       	breq	.+10     	; 0x19ea <__vector_8+0x40>
	{
		Timer1_OCB_Fptr();
    19e0:	e0 91 76 01 	lds	r30, 0x0176
    19e4:	f0 91 77 01 	lds	r31, 0x0177
    19e8:	09 95       	icall
	}
}
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	bf 91       	pop	r27
    19f4:	af 91       	pop	r26
    19f6:	9f 91       	pop	r25
    19f8:	8f 91       	pop	r24
    19fa:	7f 91       	pop	r23
    19fc:	6f 91       	pop	r22
    19fe:	5f 91       	pop	r21
    1a00:	4f 91       	pop	r20
    1a02:	3f 91       	pop	r19
    1a04:	2f 91       	pop	r18
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	0f 90       	pop	r0
    1a0c:	1f 90       	pop	r1
    1a0e:	18 95       	reti

00001a10 <__vector_6>:
void __vector_6(void)
{
    1a10:	1f 92       	push	r1
    1a12:	0f 92       	push	r0
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	0f 92       	push	r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	2f 93       	push	r18
    1a1c:	3f 93       	push	r19
    1a1e:	4f 93       	push	r20
    1a20:	5f 93       	push	r21
    1a22:	6f 93       	push	r22
    1a24:	7f 93       	push	r23
    1a26:	8f 93       	push	r24
    1a28:	9f 93       	push	r25
    1a2a:	af 93       	push	r26
    1a2c:	bf 93       	push	r27
    1a2e:	ef 93       	push	r30
    1a30:	ff 93       	push	r31
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_ICU_Fptr != NULLPTR)
    1a3a:	80 91 78 01 	lds	r24, 0x0178
    1a3e:	90 91 79 01 	lds	r25, 0x0179
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	29 f0       	breq	.+10     	; 0x1a50 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    1a46:	e0 91 78 01 	lds	r30, 0x0178
    1a4a:	f0 91 79 01 	lds	r31, 0x0179
    1a4e:	09 95       	icall
	}
}
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	ff 91       	pop	r31
    1a56:	ef 91       	pop	r30
    1a58:	bf 91       	pop	r27
    1a5a:	af 91       	pop	r26
    1a5c:	9f 91       	pop	r25
    1a5e:	8f 91       	pop	r24
    1a60:	7f 91       	pop	r23
    1a62:	6f 91       	pop	r22
    1a64:	5f 91       	pop	r21
    1a66:	4f 91       	pop	r20
    1a68:	3f 91       	pop	r19
    1a6a:	2f 91       	pop	r18
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0
    1a72:	1f 90       	pop	r1
    1a74:	18 95       	reti

00001a76 <Timer2_init>:

/* *********************Timer2************** */
EN_ERRORSTATE_t Timer2_init(EN_Timer2Mode_t mode, EN_Timer2Scaler_t scaler)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <Timer2_init+0x6>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <Timer2_init+0x8>
    1a7e:	0f 92       	push	r0
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	8a 83       	std	Y+2, r24	; 0x02
    1a86:	6b 83       	std	Y+3, r22	; 0x03
	EN_ERRORSTATE_t state;
	state = E_OK;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	89 83       	std	Y+1, r24	; 0x01
	switch (mode)
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	3d 83       	std	Y+5, r19	; 0x05
    1a94:	2c 83       	std	Y+4, r18	; 0x04
    1a96:	8c 81       	ldd	r24, Y+4	; 0x04
    1a98:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	21 f1       	breq	.+72     	; 0x1ae8 <Timer2_init+0x72>
    1aa0:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa2:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa4:	22 30       	cpi	r18, 0x02	; 2
    1aa6:	31 05       	cpc	r19, r1
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <Timer2_init+0x3e>
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	61 f0       	breq	.+24     	; 0x1aca <Timer2_init+0x54>
    1ab2:	47 c0       	rjmp	.+142    	; 0x1b42 <Timer2_init+0xcc>
    1ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab8:	22 30       	cpi	r18, 0x02	; 2
    1aba:	31 05       	cpc	r19, r1
    1abc:	21 f1       	breq	.+72     	; 0x1b06 <Timer2_init+0x90>
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac2:	83 30       	cpi	r24, 0x03	; 3
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	71 f1       	breq	.+92     	; 0x1b24 <Timer2_init+0xae>
    1ac8:	3c c0       	rjmp	.+120    	; 0x1b42 <Timer2_init+0xcc>
	{
	case TIMER2_NORMAL_MODE:
		CLRBIT(TCCR2, WGM21);
    1aca:	a5 e4       	ldi	r26, 0x45	; 69
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e5 e4       	ldi	r30, 0x45	; 69
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	87 7f       	andi	r24, 0xF7	; 247
    1ad6:	8c 93       	st	X, r24
		CLRBIT(TCCR2, WGM20);
    1ad8:	a5 e4       	ldi	r26, 0x45	; 69
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e5 e4       	ldi	r30, 0x45	; 69
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8f 7b       	andi	r24, 0xBF	; 191
    1ae4:	8c 93       	st	X, r24
    1ae6:	2e c0       	rjmp	.+92     	; 0x1b44 <Timer2_init+0xce>
		break;
	case TIMER0_PHASECORRECT_MODE:
		SETBIT(TCCR2, WGM20);
    1ae8:	a5 e4       	ldi	r26, 0x45	; 69
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e5 e4       	ldi	r30, 0x45	; 69
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 64       	ori	r24, 0x40	; 64
    1af4:	8c 93       	st	X, r24
		CLRBIT(TCCR2, WGM21);
    1af6:	a5 e4       	ldi	r26, 0x45	; 69
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e5 e4       	ldi	r30, 0x45	; 69
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	87 7f       	andi	r24, 0xF7	; 247
    1b02:	8c 93       	st	X, r24
    1b04:	1f c0       	rjmp	.+62     	; 0x1b44 <Timer2_init+0xce>
		break;
	case TIMER0_CTC_MODE:
		CLRBIT(TCCR2, WGM20);
    1b06:	a5 e4       	ldi	r26, 0x45	; 69
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e5 e4       	ldi	r30, 0x45	; 69
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8f 7b       	andi	r24, 0xBF	; 191
    1b12:	8c 93       	st	X, r24
		SETBIT(TCCR2, WGM21);
    1b14:	a5 e4       	ldi	r26, 0x45	; 69
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e5 e4       	ldi	r30, 0x45	; 69
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	88 60       	ori	r24, 0x08	; 8
    1b20:	8c 93       	st	X, r24
    1b22:	10 c0       	rjmp	.+32     	; 0x1b44 <Timer2_init+0xce>
		break;
	case TIMER0_FASTPWM_MODE:
		SETBIT(TCCR2, WGM20);
    1b24:	a5 e4       	ldi	r26, 0x45	; 69
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e5 e4       	ldi	r30, 0x45	; 69
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 64       	ori	r24, 0x40	; 64
    1b30:	8c 93       	st	X, r24
		SETBIT(TCCR2, WGM21);
    1b32:	a5 e4       	ldi	r26, 0x45	; 69
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e5 e4       	ldi	r30, 0x45	; 69
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 60       	ori	r24, 0x08	; 8
    1b3e:	8c 93       	st	X, r24
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <Timer2_init+0xce>
		break;
	default:
		state = E_ERROR;
    1b42:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	TCCR2 &= 0XF8; //0b11111000
    1b44:	a5 e4       	ldi	r26, 0x45	; 69
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e5 e4       	ldi	r30, 0x45	; 69
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 7f       	andi	r24, 0xF8	; 248
    1b50:	8c 93       	st	X, r24
	TCCR2 |= scaler;
    1b52:	a5 e4       	ldi	r26, 0x45	; 69
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e5 e4       	ldi	r30, 0x45	; 69
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	90 81       	ld	r25, Z
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	89 2b       	or	r24, r25
    1b60:	8c 93       	st	X, r24
	
	return state;
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <Timer2_GetCount>:


uint8_t Timer2_GetCount(void)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    1b7c:	e4 e4       	ldi	r30, 0x44	; 68
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
}
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <Timer2_OV_InterruptEnable>:


void Timer2_OV_InterruptEnable(void)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
	SETBIT(TIMSK,TOIE2);
    1b90:	a9 e5       	ldi	r26, 0x59	; 89
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e9 e5       	ldi	r30, 0x59	; 89
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	80 64       	ori	r24, 0x40	; 64
    1b9c:	8c 93       	st	X, r24
	SETBIT(SREG, I_BIT);
    1b9e:	af e5       	ldi	r26, 0x5F	; 95
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	ef e5       	ldi	r30, 0x5F	; 95
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	80 68       	ori	r24, 0x80	; 128
    1baa:	8c 93       	st	X, r24
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <Timer2_OV_InterruptDisable>:



void Timer2_OV_InterruptDisable(void)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK, TOIE2);
    1bba:	a9 e5       	ldi	r26, 0x59	; 89
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e9 e5       	ldi	r30, 0x59	; 89
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8f 7b       	andi	r24, 0xBF	; 191
    1bc6:	8c 93       	st	X, r24
}
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <Timer2_OVF_SetCallBack>:

void Timer2_OVF_SetCallBack(void (*LocalFptr)(void))
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <Timer2_OVF_SetCallBack+0x6>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
	Timer2_OVF_Fptr = LocalFptr;
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	90 93 7d 01 	sts	0x017D, r25
    1be4:	80 93 7c 01 	sts	0x017C, r24
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <__vector_5>:


void __vector_5(void)
{
    1bf2:	1f 92       	push	r1
    1bf4:	0f 92       	push	r0
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	0f 92       	push	r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	2f 93       	push	r18
    1bfe:	3f 93       	push	r19
    1c00:	4f 93       	push	r20
    1c02:	5f 93       	push	r21
    1c04:	6f 93       	push	r22
    1c06:	7f 93       	push	r23
    1c08:	8f 93       	push	r24
    1c0a:	9f 93       	push	r25
    1c0c:	af 93       	push	r26
    1c0e:	bf 93       	push	r27
    1c10:	ef 93       	push	r30
    1c12:	ff 93       	push	r31
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
	if (Timer2_OVF_Fptr != NULLPTR)
    1c1c:	80 91 7c 01 	lds	r24, 0x017C
    1c20:	90 91 7d 01 	lds	r25, 0x017D
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	29 f0       	breq	.+10     	; 0x1c32 <__vector_5+0x40>
	{
		Timer2_OVF_Fptr();
    1c28:	e0 91 7c 01 	lds	r30, 0x017C
    1c2c:	f0 91 7d 01 	lds	r31, 0x017D
    1c30:	09 95       	icall
	}
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	ff 91       	pop	r31
    1c38:	ef 91       	pop	r30
    1c3a:	bf 91       	pop	r27
    1c3c:	af 91       	pop	r26
    1c3e:	9f 91       	pop	r25
    1c40:	8f 91       	pop	r24
    1c42:	7f 91       	pop	r23
    1c44:	6f 91       	pop	r22
    1c46:	5f 91       	pop	r21
    1c48:	4f 91       	pop	r20
    1c4a:	3f 91       	pop	r19
    1c4c:	2f 91       	pop	r18
    1c4e:	0f 90       	pop	r0
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	0f 90       	pop	r0
    1c54:	1f 90       	pop	r1
    1c56:	18 95       	reti

00001c58 <PWM_ENInitPhaseCorrect>:
 * @brief Initailze Phase Correct PWM
 * 
 * @return EN_ERRORSTATE_t Error state
 */
EN_ERRORSTATE_t PWM_ENInitPhaseCorrect(void)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	0f 92       	push	r0
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    EN_ERRORSTATE_t state;
    state = E_OK;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	89 83       	std	Y+1, r24	; 0x01
    CLRBIT(TCCR1A, WGM10);
    1c66:	af e4       	ldi	r26, 0x4F	; 79
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ef e4       	ldi	r30, 0x4F	; 79
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	8e 7f       	andi	r24, 0xFE	; 254
    1c72:	8c 93       	st	X, r24
    CLRBIT(TCCR1A, WGM11);
    1c74:	af e4       	ldi	r26, 0x4F	; 79
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ef e4       	ldi	r30, 0x4F	; 79
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8d 7f       	andi	r24, 0xFD	; 253
    1c80:	8c 93       	st	X, r24
    CLRBIT(TCCR1B, WGM12);
    1c82:	ae e4       	ldi	r26, 0x4E	; 78
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	ee e4       	ldi	r30, 0x4E	; 78
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	87 7f       	andi	r24, 0xF7	; 247
    1c8e:	8c 93       	st	X, r24
    SETBIT(TCCR1B, WGM13);
    1c90:	ae e4       	ldi	r26, 0x4E	; 78
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ee e4       	ldi	r30, 0x4E	; 78
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 61       	ori	r24, 0x10	; 16
    1c9c:	8c 93       	st	X, r24

#if OCRA_MODE == OCRA_NON_INVERTING_MODE
    CLRBIT(TCCR1A, COM1A0);
    1c9e:	af e4       	ldi	r26, 0x4F	; 79
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ef e4       	ldi	r30, 0x4F	; 79
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8f 7b       	andi	r24, 0xBF	; 191
    1caa:	8c 93       	st	X, r24
    SETBIT(TCCR1A, COM1A1);
    1cac:	af e4       	ldi	r26, 0x4F	; 79
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	ef e4       	ldi	r30, 0x4F	; 79
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 68       	ori	r24, 0x80	; 128
    1cb8:	8c 93       	st	X, r24
    SETBIT(TCCR1A, COM1A0);
    SETBIT(TCCR1A, COM1A1);
#endif

#if OCRB_MODE == OCRB_NON_INVERTING_MODE
    CLRBIT(TCCR1A, COM1B0);
    1cba:	af e4       	ldi	r26, 0x4F	; 79
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	ef e4       	ldi	r30, 0x4F	; 79
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8f 7e       	andi	r24, 0xEF	; 239
    1cc6:	8c 93       	st	X, r24
    SETBIT(TCCR1A, COM1B1);
    1cc8:	af e4       	ldi	r26, 0x4F	; 79
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	ef e4       	ldi	r30, 0x4F	; 79
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 62       	ori	r24, 0x20	; 32
    1cd4:	8c 93       	st	X, r24
#elif OCRB_MODE == OCRB_INVERTING_MODE
    SETBIT(TCCR1A, COM1B0);
    SETBIT(TCCR1A, COM1B1);
#endif
	TCCR1B &= 0XF8;
    1cd6:	ae e4       	ldi	r26, 0x4E	; 78
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	ee e4       	ldi	r30, 0x4E	; 78
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	88 7f       	andi	r24, 0xF8	; 248
    1ce2:	8c 93       	st	X, r24
	TCCR1B |= PWM_SCALER;
    1ce4:	ae e4       	ldi	r26, 0x4E	; 78
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	ee e4       	ldi	r30, 0x4E	; 78
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	82 60       	ori	r24, 0x02	; 2
    1cf0:	8c 93       	st	X, r24

    return state;
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf4:	0f 90       	pop	r0
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <PWM_ENDutyCycle>:
 * 
 * @param DutyCycle Speed
 * @return EN_ERRORSTATE_t Error state
 */
EN_ERRORSTATE_t PWM_ENDutyCycle(uint8_t DutyCycle)
{
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <PWM_ENDutyCycle+0xa>
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	8a 83       	std	Y+2, r24	; 0x02
    EN_ERRORSTATE_t state;
    ICR1 = TIMER1_ICR_TOP_CAPACITY;
    1d0c:	e6 e4       	ldi	r30, 0x46	; 70
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	84 ed       	ldi	r24, 0xD4	; 212
    1d12:	90 e3       	ldi	r25, 0x30	; 48
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	80 83       	st	Z, r24
    state = E_OK;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	89 83       	std	Y+1, r24	; 0x01
#if (OCRA_MODE == OCRA_NON_INVERTING_MODE)
    {
        OCR1A = ((TIMER1_ICR_TOP_CAPACITY * (uint32_t)DutyCycle) / 100);
    1d1c:	0a e4       	ldi	r16, 0x4A	; 74
    1d1e:	10 e0       	ldi	r17, 0x00	; 0
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a0 e0       	ldi	r26, 0x00	; 0
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	24 ed       	ldi	r18, 0xD4	; 212
    1d2c:	30 e3       	ldi	r19, 0x30	; 48
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 0f 23 	call	0x461e	; 0x461e <__mulsi3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	24 e6       	ldi	r18, 0x64	; 100
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 55 23 	call	0x46aa	; 0x46aa <__udivmodsi4>
    1d4e:	da 01       	movw	r26, r20
    1d50:	c9 01       	movw	r24, r18
    1d52:	f8 01       	movw	r30, r16
    1d54:	91 83       	std	Z+1, r25	; 0x01
    1d56:	80 83       	st	Z, r24
    }
#endif

#if (OCRB_MODE == OCRB_NON_INVERTING_MODE)
    {
        OCR1B = ((TIMER1_ICR_TOP_CAPACITY * (uint32_t)DutyCycle) / 100);
    1d58:	08 e4       	ldi	r16, 0x48	; 72
    1d5a:	10 e0       	ldi	r17, 0x00	; 0
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a0 e0       	ldi	r26, 0x00	; 0
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	24 ed       	ldi	r18, 0xD4	; 212
    1d68:	30 e3       	ldi	r19, 0x30	; 48
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 0f 23 	call	0x461e	; 0x461e <__mulsi3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	24 e6       	ldi	r18, 0x64	; 100
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	0e 94 55 23 	call	0x46aa	; 0x46aa <__udivmodsi4>
    1d8a:	da 01       	movw	r26, r20
    1d8c:	c9 01       	movw	r24, r18
    1d8e:	f8 01       	movw	r30, r16
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	80 83       	st	Z, r24
    {
        state = E_ERROR;
    }
#endif

    return state;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret

00001da4 <EXTI_ENEnable>:
 * 
 * @param Interrupt EXTI_INT0 | EXTI_INT1 | EXTI_INT2
 * @return EN_ERRORSTATE_t 
 */
EN_EXTIERRORSTATE_t EXTI_ENEnable(EN_EXTI_t Interrupt)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <EXTI_ENEnable+0x6>
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <EXTI_ENEnable+0x8>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	8a 83       	std	Y+2, r24	; 0x02
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1db2:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	3c 83       	std	Y+4, r19	; 0x04
    1dbc:	2b 83       	std	Y+3, r18	; 0x03
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	c1 f0       	breq	.+48     	; 0x1df8 <EXTI_ENEnable+0x54>
    1dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dca:	3c 81       	ldd	r19, Y+4	; 0x04
    1dcc:	22 30       	cpi	r18, 0x02	; 2
    1dce:	31 05       	cpc	r19, r1
    1dd0:	11 f1       	breq	.+68     	; 0x1e16 <EXTI_ENEnable+0x72>
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f5       	brne	.+90     	; 0x1e34 <EXTI_ENEnable+0x90>
	{
	case EXTI_INT0:
		SETBIT(GICR, INT0);
    1dda:	ab e5       	ldi	r26, 0x5B	; 91
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	eb e5       	ldi	r30, 0x5B	; 91
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	80 64       	ori	r24, 0x40	; 64
    1de6:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    1de8:	af e5       	ldi	r26, 0x5F	; 95
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	ef e5       	ldi	r30, 0x5F	; 95
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	80 68       	ori	r24, 0x80	; 128
    1df4:	8c 93       	st	X, r24
    1df6:	20 c0       	rjmp	.+64     	; 0x1e38 <EXTI_ENEnable+0x94>
		break;
	case EXTI_INT1:
		SETBIT(GICR, INT1);
    1df8:	ab e5       	ldi	r26, 0x5B	; 91
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	eb e5       	ldi	r30, 0x5B	; 91
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	80 68       	ori	r24, 0x80	; 128
    1e04:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    1e06:	af e5       	ldi	r26, 0x5F	; 95
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	ef e5       	ldi	r30, 0x5F	; 95
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 68       	ori	r24, 0x80	; 128
    1e12:	8c 93       	st	X, r24
    1e14:	11 c0       	rjmp	.+34     	; 0x1e38 <EXTI_ENEnable+0x94>
		break;
	case EXTI_INT2:
		SETBIT(GICR, INT2);
    1e16:	ab e5       	ldi	r26, 0x5B	; 91
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	eb e5       	ldi	r30, 0x5B	; 91
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	80 62       	ori	r24, 0x20	; 32
    1e22:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    1e24:	af e5       	ldi	r26, 0x5F	; 95
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	ef e5       	ldi	r30, 0x5F	; 95
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 68       	ori	r24, 0x80	; 128
    1e30:	8c 93       	st	X, r24
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <EXTI_ENEnable+0x94>
		break;
	default:
		state = E_EXT_ERROR;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <EXTI_ENDisable>:

EN_EXTIERRORSTATE_t EXTI_ENDisable(EN_EXTI_t Interrupt)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <EXTI_ENDisable+0x6>
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <EXTI_ENDisable+0x8>
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	8a 83       	std	Y+2, r24	; 0x02
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1e56:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	3c 83       	std	Y+4, r19	; 0x04
    1e60:	2b 83       	std	Y+3, r18	; 0x03
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	91 05       	cpc	r25, r1
    1e6a:	c1 f0       	breq	.+48     	; 0x1e9c <EXTI_ENDisable+0x54>
    1e6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e70:	22 30       	cpi	r18, 0x02	; 2
    1e72:	31 05       	cpc	r19, r1
    1e74:	11 f1       	breq	.+68     	; 0x1eba <EXTI_ENDisable+0x72>
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f5       	brne	.+90     	; 0x1ed8 <EXTI_ENDisable+0x90>
	{
	case EXTI_INT0:
		CLRBIT(GICR, INT0);
    1e7e:	ab e5       	ldi	r26, 0x5B	; 91
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	eb e5       	ldi	r30, 0x5B	; 91
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 7b       	andi	r24, 0xBF	; 191
    1e8a:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    1e8c:	af e5       	ldi	r26, 0x5F	; 95
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ef e5       	ldi	r30, 0x5F	; 95
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	8f 77       	andi	r24, 0x7F	; 127
    1e98:	8c 93       	st	X, r24
    1e9a:	20 c0       	rjmp	.+64     	; 0x1edc <EXTI_ENDisable+0x94>
		break;
	case EXTI_INT1:
		CLRBIT(GICR, INT1);
    1e9c:	ab e5       	ldi	r26, 0x5B	; 91
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	eb e5       	ldi	r30, 0x5B	; 91
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	8f 77       	andi	r24, 0x7F	; 127
    1ea8:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    1eaa:	af e5       	ldi	r26, 0x5F	; 95
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	ef e5       	ldi	r30, 0x5F	; 95
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8f 77       	andi	r24, 0x7F	; 127
    1eb6:	8c 93       	st	X, r24
    1eb8:	11 c0       	rjmp	.+34     	; 0x1edc <EXTI_ENDisable+0x94>
		break;
	case EXTI_INT2:
		CLRBIT(GICR, INT2);
    1eba:	ab e5       	ldi	r26, 0x5B	; 91
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	eb e5       	ldi	r30, 0x5B	; 91
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	8f 7d       	andi	r24, 0xDF	; 223
    1ec6:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    1ec8:	af e5       	ldi	r26, 0x5F	; 95
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	ef e5       	ldi	r30, 0x5F	; 95
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	8f 77       	andi	r24, 0x7F	; 127
    1ed4:	8c 93       	st	X, r24
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <EXTI_ENDisable+0x94>
		break;
	default:
		state = E_EXT_ERROR;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
} /* EXTI_voidDisable */
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <EXTI_ENTriggerEdge>:

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	29 97       	sbiw	r28, 0x09	; 9
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	8a 83       	std	Y+2, r24	; 0x02
    1f02:	6b 83       	std	Y+3, r22	; 0x03
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1f04:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	39 87       	std	Y+9, r19	; 0x09
    1f0e:	28 87       	std	Y+8, r18	; 0x08
    1f10:	88 85       	ldd	r24, Y+8	; 0x08
    1f12:	99 85       	ldd	r25, Y+9	; 0x09
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	91 05       	cpc	r25, r1
    1f18:	d9 f0       	breq	.+54     	; 0x1f50 <EXTI_ENTriggerEdge+0x64>
    1f1a:	28 85       	ldd	r18, Y+8	; 0x08
    1f1c:	39 85       	ldd	r19, Y+9	; 0x09
    1f1e:	22 30       	cpi	r18, 0x02	; 2
    1f20:	31 05       	cpc	r19, r1
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <EXTI_ENTriggerEdge+0x3a>
    1f24:	73 c0       	rjmp	.+230    	; 0x200c <EXTI_ENTriggerEdge+0x120>
    1f26:	88 85       	ldd	r24, Y+8	; 0x08
    1f28:	99 85       	ldd	r25, Y+9	; 0x09
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	09 f0       	breq	.+2      	; 0x1f30 <EXTI_ENTriggerEdge+0x44>
    1f2e:	91 c0       	rjmp	.+290    	; 0x2052 <EXTI_ENTriggerEdge+0x166>
	{
	case EXTI_INT0:
		MCUCR &= 0xFC;
    1f30:	a5 e5       	ldi	r26, 0x55	; 85
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e5 e5       	ldi	r30, 0x55	; 85
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8c 7f       	andi	r24, 0xFC	; 252
    1f3c:	8c 93       	st	X, r24
		MCUCR |= Edge;
    1f3e:	a5 e5       	ldi	r26, 0x55	; 85
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e5 e5       	ldi	r30, 0x55	; 85
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	90 81       	ld	r25, Z
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	89 2b       	or	r24, r25
    1f4c:	8c 93       	st	X, r24
    1f4e:	83 c0       	rjmp	.+262    	; 0x2056 <EXTI_ENTriggerEdge+0x16a>
		break;
	case EXTI_INT1:
		switch (Edge)
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	3f 83       	std	Y+7, r19	; 0x07
    1f58:	2e 83       	std	Y+6, r18	; 0x06
    1f5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	91 05       	cpc	r25, r1
    1f62:	21 f1       	breq	.+72     	; 0x1fac <EXTI_ENTriggerEdge+0xc0>
    1f64:	2e 81       	ldd	r18, Y+6	; 0x06
    1f66:	3f 81       	ldd	r19, Y+7	; 0x07
    1f68:	22 30       	cpi	r18, 0x02	; 2
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <EXTI_ENTriggerEdge+0x8c>
    1f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f70:	9f 81       	ldd	r25, Y+7	; 0x07
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	61 f0       	breq	.+24     	; 0x1f8e <EXTI_ENTriggerEdge+0xa2>
    1f76:	47 c0       	rjmp	.+142    	; 0x2006 <EXTI_ENTriggerEdge+0x11a>
    1f78:	2e 81       	ldd	r18, Y+6	; 0x06
    1f7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f7c:	22 30       	cpi	r18, 0x02	; 2
    1f7e:	31 05       	cpc	r19, r1
    1f80:	21 f1       	breq	.+72     	; 0x1fca <EXTI_ENTriggerEdge+0xde>
    1f82:	8e 81       	ldd	r24, Y+6	; 0x06
    1f84:	9f 81       	ldd	r25, Y+7	; 0x07
    1f86:	83 30       	cpi	r24, 0x03	; 3
    1f88:	91 05       	cpc	r25, r1
    1f8a:	71 f1       	breq	.+92     	; 0x1fe8 <EXTI_ENTriggerEdge+0xfc>
    1f8c:	3c c0       	rjmp	.+120    	; 0x2006 <EXTI_ENTriggerEdge+0x11a>
		{
		case LOW_LEVEL:
			CLRBIT(MCUCR, ISC10);
    1f8e:	a5 e5       	ldi	r26, 0x55	; 85
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e5 e5       	ldi	r30, 0x55	; 85
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	8b 7f       	andi	r24, 0xFB	; 251
    1f9a:	8c 93       	st	X, r24
			CLRBIT(MCUCR, ISC11);
    1f9c:	a5 e5       	ldi	r26, 0x55	; 85
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e5 e5       	ldi	r30, 0x55	; 85
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	87 7f       	andi	r24, 0xF7	; 247
    1fa8:	8c 93       	st	X, r24
    1faa:	55 c0       	rjmp	.+170    	; 0x2056 <EXTI_ENTriggerEdge+0x16a>
			break;
		case ANY_LOGIC_CHANGE:
			SETBIT(MCUCR, ISC10);
    1fac:	a5 e5       	ldi	r26, 0x55	; 85
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e5 e5       	ldi	r30, 0x55	; 85
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	84 60       	ori	r24, 0x04	; 4
    1fb8:	8c 93       	st	X, r24
			CLRBIT(MCUCR, ISC11);
    1fba:	a5 e5       	ldi	r26, 0x55	; 85
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e5 e5       	ldi	r30, 0x55	; 85
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	87 7f       	andi	r24, 0xF7	; 247
    1fc6:	8c 93       	st	X, r24
    1fc8:	46 c0       	rjmp	.+140    	; 0x2056 <EXTI_ENTriggerEdge+0x16a>
			break;
		case FALLING_EDGE:
			CLRBIT(MCUCR, ISC10);
    1fca:	a5 e5       	ldi	r26, 0x55	; 85
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e5 e5       	ldi	r30, 0x55	; 85
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8b 7f       	andi	r24, 0xFB	; 251
    1fd6:	8c 93       	st	X, r24
			SETBIT(MCUCR, ISC11);
    1fd8:	a5 e5       	ldi	r26, 0x55	; 85
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e5 e5       	ldi	r30, 0x55	; 85
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	88 60       	ori	r24, 0x08	; 8
    1fe4:	8c 93       	st	X, r24
    1fe6:	37 c0       	rjmp	.+110    	; 0x2056 <EXTI_ENTriggerEdge+0x16a>
			break;
		case RISING_EDGE:
			SETBIT(MCUCR, ISC10);
    1fe8:	a5 e5       	ldi	r26, 0x55	; 85
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e5 e5       	ldi	r30, 0x55	; 85
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	84 60       	ori	r24, 0x04	; 4
    1ff4:	8c 93       	st	X, r24
			SETBIT(MCUCR, ISC11);
    1ff6:	a5 e5       	ldi	r26, 0x55	; 85
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e5 e5       	ldi	r30, 0x55	; 85
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	88 60       	ori	r24, 0x08	; 8
    2002:	8c 93       	st	X, r24
    2004:	28 c0       	rjmp	.+80     	; 0x2056 <EXTI_ENTriggerEdge+0x16a>
			break;
		default:
			state = E_EXT_ERROR;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	25 c0       	rjmp	.+74     	; 0x2056 <EXTI_ENTriggerEdge+0x16a>
			break;
		}
		break;
	case EXTI_INT2:
		switch (Edge)
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	3d 83       	std	Y+5, r19	; 0x05
    2014:	2c 83       	std	Y+4, r18	; 0x04
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	9d 81       	ldd	r25, Y+5	; 0x05
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	91 05       	cpc	r25, r1
    201e:	31 f0       	breq	.+12     	; 0x202c <EXTI_ENTriggerEdge+0x140>
    2020:	2c 81       	ldd	r18, Y+4	; 0x04
    2022:	3d 81       	ldd	r19, Y+5	; 0x05
    2024:	23 30       	cpi	r18, 0x03	; 3
    2026:	31 05       	cpc	r19, r1
    2028:	49 f0       	breq	.+18     	; 0x203c <EXTI_ENTriggerEdge+0x150>
    202a:	10 c0       	rjmp	.+32     	; 0x204c <EXTI_ENTriggerEdge+0x160>
		{
		case FALLING_EDGE:
			CLRBIT(MCUCSR, ISC2);
    202c:	a4 e5       	ldi	r26, 0x54	; 84
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e4 e5       	ldi	r30, 0x54	; 84
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8f 7b       	andi	r24, 0xBF	; 191
    2038:	8c 93       	st	X, r24
    203a:	0d c0       	rjmp	.+26     	; 0x2056 <EXTI_ENTriggerEdge+0x16a>
			break;
		case RISING_EDGE:
			SETBIT(MCUCSR, ISC2);
    203c:	a4 e5       	ldi	r26, 0x54	; 84
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e4 e5       	ldi	r30, 0x54	; 84
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	80 64       	ori	r24, 0x40	; 64
    2048:	8c 93       	st	X, r24
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <EXTI_ENTriggerEdge+0x16a>
			break;
		default:
			state = E_EXT_ERROR;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <EXTI_ENTriggerEdge+0x16a>
			break;
		}
		break;

	default:
		state = E_EXT_ERROR;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
} /* EXTI_voidTriggerEdge */
    2058:	29 96       	adiw	r28, 0x09	; 9
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <EXTI_SetCallBack>:

EN_EXTIERRORSTATE_t EXTI_SetCallBack(EN_EXTI_t Interrupt, void (*LocalPtr)(void))
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	00 d0       	rcall	.+0      	; 0x2070 <EXTI_SetCallBack+0x6>
    2070:	00 d0       	rcall	.+0      	; 0x2072 <EXTI_SetCallBack+0x8>
    2072:	00 d0       	rcall	.+0      	; 0x2074 <EXTI_SetCallBack+0xa>
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	8a 83       	std	Y+2, r24	; 0x02
    207a:	7c 83       	std	Y+4, r23	; 0x04
    207c:	6b 83       	std	Y+3, r22	; 0x03
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    207e:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	3e 83       	std	Y+6, r19	; 0x06
    2088:	2d 83       	std	Y+5, r18	; 0x05
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	91 05       	cpc	r25, r1
    2092:	81 f0       	breq	.+32     	; 0x20b4 <EXTI_SetCallBack+0x4a>
    2094:	2d 81       	ldd	r18, Y+5	; 0x05
    2096:	3e 81       	ldd	r19, Y+6	; 0x06
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	91 f0       	breq	.+36     	; 0x20c2 <EXTI_SetCallBack+0x58>
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	a9 f4       	brne	.+42     	; 0x20d0 <EXTI_SetCallBack+0x66>
	{
	case EXTI_INT0:
		EXTI_INT0_FPtr = LocalPtr;
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	90 93 8b 01 	sts	0x018B, r25
    20ae:	80 93 8a 01 	sts	0x018A, r24
    20b2:	10 c0       	rjmp	.+32     	; 0x20d4 <EXTI_SetCallBack+0x6a>
		break;
	case EXTI_INT1:
		EXTI_INT1_FPtr = LocalPtr;
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	90 93 8d 01 	sts	0x018D, r25
    20bc:	80 93 8c 01 	sts	0x018C, r24
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <EXTI_SetCallBack+0x6a>
		break;
	case EXTI_INT2:
		EXTI_INT2_FPtr = LocalPtr;
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	90 93 8f 01 	sts	0x018F, r25
    20ca:	80 93 8e 01 	sts	0x018E, r24
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <EXTI_SetCallBack+0x6a>
		break;
	default:
		state = E_EXT_ERROR;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    20d4:	89 81       	ldd	r24, Y+1	; 0x01

} /* EXTI_SetCallBack */
    20d6:	26 96       	adiw	r28, 0x06	; 6
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <__vector_1>:

void __vector_1(void)
{
    20e8:	1f 92       	push	r1
    20ea:	0f 92       	push	r0
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	0f 92       	push	r0
    20f0:	11 24       	eor	r1, r1
    20f2:	2f 93       	push	r18
    20f4:	3f 93       	push	r19
    20f6:	4f 93       	push	r20
    20f8:	5f 93       	push	r21
    20fa:	6f 93       	push	r22
    20fc:	7f 93       	push	r23
    20fe:	8f 93       	push	r24
    2100:	9f 93       	push	r25
    2102:	af 93       	push	r26
    2104:	bf 93       	push	r27
    2106:	ef 93       	push	r30
    2108:	ff 93       	push	r31
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT0_FPtr != NULLPTR)
    2112:	80 91 8a 01 	lds	r24, 0x018A
    2116:	90 91 8b 01 	lds	r25, 0x018B
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	29 f0       	breq	.+10     	; 0x2128 <__vector_1+0x40>
	{
		EXTI_INT0_FPtr();
    211e:	e0 91 8a 01 	lds	r30, 0x018A
    2122:	f0 91 8b 01 	lds	r31, 0x018B
    2126:	09 95       	icall
	}
}
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	ff 91       	pop	r31
    212e:	ef 91       	pop	r30
    2130:	bf 91       	pop	r27
    2132:	af 91       	pop	r26
    2134:	9f 91       	pop	r25
    2136:	8f 91       	pop	r24
    2138:	7f 91       	pop	r23
    213a:	6f 91       	pop	r22
    213c:	5f 91       	pop	r21
    213e:	4f 91       	pop	r20
    2140:	3f 91       	pop	r19
    2142:	2f 91       	pop	r18
    2144:	0f 90       	pop	r0
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	0f 90       	pop	r0
    214a:	1f 90       	pop	r1
    214c:	18 95       	reti

0000214e <__vector_2>:

void __vector_2(void)
{
    214e:	1f 92       	push	r1
    2150:	0f 92       	push	r0
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	0f 92       	push	r0
    2156:	11 24       	eor	r1, r1
    2158:	2f 93       	push	r18
    215a:	3f 93       	push	r19
    215c:	4f 93       	push	r20
    215e:	5f 93       	push	r21
    2160:	6f 93       	push	r22
    2162:	7f 93       	push	r23
    2164:	8f 93       	push	r24
    2166:	9f 93       	push	r25
    2168:	af 93       	push	r26
    216a:	bf 93       	push	r27
    216c:	ef 93       	push	r30
    216e:	ff 93       	push	r31
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT1_FPtr != NULLPTR)
    2178:	80 91 8c 01 	lds	r24, 0x018C
    217c:	90 91 8d 01 	lds	r25, 0x018D
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	29 f0       	breq	.+10     	; 0x218e <__vector_2+0x40>
	{
		EXTI_INT1_FPtr();
    2184:	e0 91 8c 01 	lds	r30, 0x018C
    2188:	f0 91 8d 01 	lds	r31, 0x018D
    218c:	09 95       	icall
	}
}
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	ff 91       	pop	r31
    2194:	ef 91       	pop	r30
    2196:	bf 91       	pop	r27
    2198:	af 91       	pop	r26
    219a:	9f 91       	pop	r25
    219c:	8f 91       	pop	r24
    219e:	7f 91       	pop	r23
    21a0:	6f 91       	pop	r22
    21a2:	5f 91       	pop	r21
    21a4:	4f 91       	pop	r20
    21a6:	3f 91       	pop	r19
    21a8:	2f 91       	pop	r18
    21aa:	0f 90       	pop	r0
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	0f 90       	pop	r0
    21b0:	1f 90       	pop	r1
    21b2:	18 95       	reti

000021b4 <__vector_3>:

void __vector_3(void)
{
    21b4:	1f 92       	push	r1
    21b6:	0f 92       	push	r0
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	0f 92       	push	r0
    21bc:	11 24       	eor	r1, r1
    21be:	2f 93       	push	r18
    21c0:	3f 93       	push	r19
    21c2:	4f 93       	push	r20
    21c4:	5f 93       	push	r21
    21c6:	6f 93       	push	r22
    21c8:	7f 93       	push	r23
    21ca:	8f 93       	push	r24
    21cc:	9f 93       	push	r25
    21ce:	af 93       	push	r26
    21d0:	bf 93       	push	r27
    21d2:	ef 93       	push	r30
    21d4:	ff 93       	push	r31
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT2_FPtr != NULLPTR)
    21de:	80 91 8e 01 	lds	r24, 0x018E
    21e2:	90 91 8f 01 	lds	r25, 0x018F
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	29 f0       	breq	.+10     	; 0x21f4 <__vector_3+0x40>
	{
		EXTI_INT2_FPtr();
    21ea:	e0 91 8e 01 	lds	r30, 0x018E
    21ee:	f0 91 8f 01 	lds	r31, 0x018F
    21f2:	09 95       	icall
	}
}
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	ff 91       	pop	r31
    21fa:	ef 91       	pop	r30
    21fc:	bf 91       	pop	r27
    21fe:	af 91       	pop	r26
    2200:	9f 91       	pop	r25
    2202:	8f 91       	pop	r24
    2204:	7f 91       	pop	r23
    2206:	6f 91       	pop	r22
    2208:	5f 91       	pop	r21
    220a:	4f 91       	pop	r20
    220c:	3f 91       	pop	r19
    220e:	2f 91       	pop	r18
    2210:	0f 90       	pop	r0
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	0f 90       	pop	r0
    2216:	1f 90       	pop	r1
    2218:	18 95       	reti

0000221a <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	28 97       	sbiw	r28, 0x08	; 8
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	8a 83       	std	Y+2, r24	; 0x02
    2230:	6b 83       	std	Y+3, r22	; 0x03
    2232:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
    2238:	8c 81       	ldd	r24, Y+4	; 0x04
    223a:	88 23       	and	r24, r24
    223c:	09 f0       	breq	.+2      	; 0x2240 <DIO_voidSetPinValue+0x26>
    223e:	76 c0       	rjmp	.+236    	; 0x232c <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	38 87       	std	Y+8, r19	; 0x08
    2248:	2f 83       	std	Y+7, r18	; 0x07
    224a:	8f 81       	ldd	r24, Y+7	; 0x07
    224c:	98 85       	ldd	r25, Y+8	; 0x08
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	91 05       	cpc	r25, r1
    2252:	59 f1       	breq	.+86     	; 0x22aa <DIO_voidSetPinValue+0x90>
    2254:	2f 81       	ldd	r18, Y+7	; 0x07
    2256:	38 85       	ldd	r19, Y+8	; 0x08
    2258:	22 30       	cpi	r18, 0x02	; 2
    225a:	31 05       	cpc	r19, r1
    225c:	2c f4       	brge	.+10     	; 0x2268 <DIO_voidSetPinValue+0x4e>
    225e:	8f 81       	ldd	r24, Y+7	; 0x07
    2260:	98 85       	ldd	r25, Y+8	; 0x08
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f0       	breq	.+26     	; 0x2280 <DIO_voidSetPinValue+0x66>
    2266:	60 c0       	rjmp	.+192    	; 0x2328 <DIO_voidSetPinValue+0x10e>
    2268:	2f 81       	ldd	r18, Y+7	; 0x07
    226a:	38 85       	ldd	r19, Y+8	; 0x08
    226c:	22 30       	cpi	r18, 0x02	; 2
    226e:	31 05       	cpc	r19, r1
    2270:	89 f1       	breq	.+98     	; 0x22d4 <DIO_voidSetPinValue+0xba>
    2272:	8f 81       	ldd	r24, Y+7	; 0x07
    2274:	98 85       	ldd	r25, Y+8	; 0x08
    2276:	83 30       	cpi	r24, 0x03	; 3
    2278:	91 05       	cpc	r25, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <DIO_voidSetPinValue+0x64>
    227c:	40 c0       	rjmp	.+128    	; 0x22fe <DIO_voidSetPinValue+0xe4>
    227e:	54 c0       	rjmp	.+168    	; 0x2328 <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
    2280:	ab e3       	ldi	r26, 0x3B	; 59
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	eb e3       	ldi	r30, 0x3B	; 59
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	48 2f       	mov	r20, r24
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	02 2e       	mov	r0, r18
    2298:	02 c0       	rjmp	.+4      	; 0x229e <DIO_voidSetPinValue+0x84>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	0a 94       	dec	r0
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <DIO_voidSetPinValue+0x80>
    22a2:	80 95       	com	r24
    22a4:	84 23       	and	r24, r20
    22a6:	8c 93       	st	X, r24
    22a8:	b5 c0       	rjmp	.+362    	; 0x2414 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
    22aa:	a8 e3       	ldi	r26, 0x38	; 56
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e8 e3       	ldi	r30, 0x38	; 56
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	48 2f       	mov	r20, r24
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	02 2e       	mov	r0, r18
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <DIO_voidSetPinValue+0xae>
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	0a 94       	dec	r0
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <DIO_voidSetPinValue+0xaa>
    22cc:	80 95       	com	r24
    22ce:	84 23       	and	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	a0 c0       	rjmp	.+320    	; 0x2414 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
    22d4:	a5 e3       	ldi	r26, 0x35	; 53
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e5 e3       	ldi	r30, 0x35	; 53
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_voidSetPinValue+0xd8>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_voidSetPinValue+0xd4>
    22f6:	80 95       	com	r24
    22f8:	84 23       	and	r24, r20
    22fa:	8c 93       	st	X, r24
    22fc:	8b c0       	rjmp	.+278    	; 0x2414 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
    22fe:	a2 e3       	ldi	r26, 0x32	; 50
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e2 e3       	ldi	r30, 0x32	; 50
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	48 2f       	mov	r20, r24
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	02 2e       	mov	r0, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <DIO_voidSetPinValue+0x102>
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	0a 94       	dec	r0
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <DIO_voidSetPinValue+0xfe>
    2320:	80 95       	com	r24
    2322:	84 23       	and	r24, r20
    2324:	8c 93       	st	X, r24
    2326:	76 c0       	rjmp	.+236    	; 0x2414 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
    2328:	19 82       	std	Y+1, r1	; 0x01
    232a:	74 c0       	rjmp	.+232    	; 0x2414 <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
    232c:	8c 81       	ldd	r24, Y+4	; 0x04
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	09 f0       	breq	.+2      	; 0x2334 <DIO_voidSetPinValue+0x11a>
    2332:	70 c0       	rjmp	.+224    	; 0x2414 <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	3e 83       	std	Y+6, r19	; 0x06
    233c:	2d 83       	std	Y+5, r18	; 0x05
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	91 05       	cpc	r25, r1
    2346:	49 f1       	breq	.+82     	; 0x239a <DIO_voidSetPinValue+0x180>
    2348:	2d 81       	ldd	r18, Y+5	; 0x05
    234a:	3e 81       	ldd	r19, Y+6	; 0x06
    234c:	22 30       	cpi	r18, 0x02	; 2
    234e:	31 05       	cpc	r19, r1
    2350:	2c f4       	brge	.+10     	; 0x235c <DIO_voidSetPinValue+0x142>
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	61 f0       	breq	.+24     	; 0x2372 <DIO_voidSetPinValue+0x158>
    235a:	5b c0       	rjmp	.+182    	; 0x2412 <DIO_voidSetPinValue+0x1f8>
    235c:	2d 81       	ldd	r18, Y+5	; 0x05
    235e:	3e 81       	ldd	r19, Y+6	; 0x06
    2360:	22 30       	cpi	r18, 0x02	; 2
    2362:	31 05       	cpc	r19, r1
    2364:	71 f1       	breq	.+92     	; 0x23c2 <DIO_voidSetPinValue+0x1a8>
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	83 30       	cpi	r24, 0x03	; 3
    236c:	91 05       	cpc	r25, r1
    236e:	e9 f1       	breq	.+122    	; 0x23ea <DIO_voidSetPinValue+0x1d0>
    2370:	50 c0       	rjmp	.+160    	; 0x2412 <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
    2372:	ab e3       	ldi	r26, 0x3B	; 59
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	eb e3       	ldi	r30, 0x3B	; 59
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	48 2f       	mov	r20, r24
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	02 2e       	mov	r0, r18
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <DIO_voidSetPinValue+0x176>
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <DIO_voidSetPinValue+0x172>
    2394:	84 2b       	or	r24, r20
    2396:	8c 93       	st	X, r24
    2398:	3d c0       	rjmp	.+122    	; 0x2414 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
    239a:	a8 e3       	ldi	r26, 0x38	; 56
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e8 e3       	ldi	r30, 0x38	; 56
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	48 2f       	mov	r20, r24
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 2e       	mov	r0, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <DIO_voidSetPinValue+0x19e>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <DIO_voidSetPinValue+0x19a>
    23bc:	84 2b       	or	r24, r20
    23be:	8c 93       	st	X, r24
    23c0:	29 c0       	rjmp	.+82     	; 0x2414 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
    23c2:	a5 e3       	ldi	r26, 0x35	; 53
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e5 e3       	ldi	r30, 0x35	; 53
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	48 2f       	mov	r20, r24
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <DIO_voidSetPinValue+0x1c6>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <DIO_voidSetPinValue+0x1c2>
    23e4:	84 2b       	or	r24, r20
    23e6:	8c 93       	st	X, r24
    23e8:	15 c0       	rjmp	.+42     	; 0x2414 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
    23ea:	a2 e3       	ldi	r26, 0x32	; 50
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e2 e3       	ldi	r30, 0x32	; 50
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 2e       	mov	r0, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <DIO_voidSetPinValue+0x1ee>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	0a 94       	dec	r0
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <DIO_voidSetPinValue+0x1ea>
    240c:	84 2b       	or	r24, r20
    240e:	8c 93       	st	X, r24
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
    2412:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    2414:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
    2416:	28 96       	adiw	r28, 0x08	; 8
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	28 97       	sbiw	r28, 0x08	; 8
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	8a 83       	std	Y+2, r24	; 0x02
    243e:	6b 83       	std	Y+3, r22	; 0x03
    2440:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
    2446:	8c 81       	ldd	r24, Y+4	; 0x04
    2448:	88 23       	and	r24, r24
    244a:	09 f0       	breq	.+2      	; 0x244e <DIO_voidSetPinDirection+0x26>
    244c:	76 c0       	rjmp	.+236    	; 0x253a <DIO_voidSetPinDirection+0x112>
    {
        switch (EN_port)
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	38 87       	std	Y+8, r19	; 0x08
    2456:	2f 83       	std	Y+7, r18	; 0x07
    2458:	8f 81       	ldd	r24, Y+7	; 0x07
    245a:	98 85       	ldd	r25, Y+8	; 0x08
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	91 05       	cpc	r25, r1
    2460:	59 f1       	breq	.+86     	; 0x24b8 <DIO_voidSetPinDirection+0x90>
    2462:	2f 81       	ldd	r18, Y+7	; 0x07
    2464:	38 85       	ldd	r19, Y+8	; 0x08
    2466:	22 30       	cpi	r18, 0x02	; 2
    2468:	31 05       	cpc	r19, r1
    246a:	2c f4       	brge	.+10     	; 0x2476 <DIO_voidSetPinDirection+0x4e>
    246c:	8f 81       	ldd	r24, Y+7	; 0x07
    246e:	98 85       	ldd	r25, Y+8	; 0x08
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	69 f0       	breq	.+26     	; 0x248e <DIO_voidSetPinDirection+0x66>
    2474:	60 c0       	rjmp	.+192    	; 0x2536 <DIO_voidSetPinDirection+0x10e>
    2476:	2f 81       	ldd	r18, Y+7	; 0x07
    2478:	38 85       	ldd	r19, Y+8	; 0x08
    247a:	22 30       	cpi	r18, 0x02	; 2
    247c:	31 05       	cpc	r19, r1
    247e:	89 f1       	breq	.+98     	; 0x24e2 <DIO_voidSetPinDirection+0xba>
    2480:	8f 81       	ldd	r24, Y+7	; 0x07
    2482:	98 85       	ldd	r25, Y+8	; 0x08
    2484:	83 30       	cpi	r24, 0x03	; 3
    2486:	91 05       	cpc	r25, r1
    2488:	09 f4       	brne	.+2      	; 0x248c <DIO_voidSetPinDirection+0x64>
    248a:	40 c0       	rjmp	.+128    	; 0x250c <DIO_voidSetPinDirection+0xe4>
    248c:	54 c0       	rjmp	.+168    	; 0x2536 <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
    248e:	aa e3       	ldi	r26, 0x3A	; 58
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	ea e3       	ldi	r30, 0x3A	; 58
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	48 2f       	mov	r20, r24
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	02 2e       	mov	r0, r18
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <DIO_voidSetPinDirection+0x84>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	0a 94       	dec	r0
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <DIO_voidSetPinDirection+0x80>
    24b0:	80 95       	com	r24
    24b2:	84 23       	and	r24, r20
    24b4:	8c 93       	st	X, r24
    24b6:	b5 c0       	rjmp	.+362    	; 0x2622 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
    24b8:	a7 e3       	ldi	r26, 0x37	; 55
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e7 e3       	ldi	r30, 0x37	; 55
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	48 2f       	mov	r20, r24
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	02 2e       	mov	r0, r18
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <DIO_voidSetPinDirection+0xae>
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	0a 94       	dec	r0
    24d8:	e2 f7       	brpl	.-8      	; 0x24d2 <DIO_voidSetPinDirection+0xaa>
    24da:	80 95       	com	r24
    24dc:	84 23       	and	r24, r20
    24de:	8c 93       	st	X, r24
    24e0:	a0 c0       	rjmp	.+320    	; 0x2622 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
    24e2:	a4 e3       	ldi	r26, 0x34	; 52
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e4 e3       	ldi	r30, 0x34	; 52
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	48 2f       	mov	r20, r24
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	02 2e       	mov	r0, r18
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <DIO_voidSetPinDirection+0xd8>
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	0a 94       	dec	r0
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <DIO_voidSetPinDirection+0xd4>
    2504:	80 95       	com	r24
    2506:	84 23       	and	r24, r20
    2508:	8c 93       	st	X, r24
    250a:	8b c0       	rjmp	.+278    	; 0x2622 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
    250c:	a1 e3       	ldi	r26, 0x31	; 49
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e1 e3       	ldi	r30, 0x31	; 49
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	48 2f       	mov	r20, r24
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 2e       	mov	r0, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <DIO_voidSetPinDirection+0x102>
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	0a 94       	dec	r0
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <DIO_voidSetPinDirection+0xfe>
    252e:	80 95       	com	r24
    2530:	84 23       	and	r24, r20
    2532:	8c 93       	st	X, r24
    2534:	76 c0       	rjmp	.+236    	; 0x2622 <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
    2536:	19 82       	std	Y+1, r1	; 0x01
    2538:	74 c0       	rjmp	.+232    	; 0x2622 <DIO_voidSetPinDirection+0x1fa>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	09 f0       	breq	.+2      	; 0x2542 <DIO_voidSetPinDirection+0x11a>
    2540:	70 c0       	rjmp	.+224    	; 0x2622 <DIO_voidSetPinDirection+0x1fa>
    {
        switch (EN_port)
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	3e 83       	std	Y+6, r19	; 0x06
    254a:	2d 83       	std	Y+5, r18	; 0x05
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	91 05       	cpc	r25, r1
    2554:	49 f1       	breq	.+82     	; 0x25a8 <DIO_voidSetPinDirection+0x180>
    2556:	2d 81       	ldd	r18, Y+5	; 0x05
    2558:	3e 81       	ldd	r19, Y+6	; 0x06
    255a:	22 30       	cpi	r18, 0x02	; 2
    255c:	31 05       	cpc	r19, r1
    255e:	2c f4       	brge	.+10     	; 0x256a <DIO_voidSetPinDirection+0x142>
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	61 f0       	breq	.+24     	; 0x2580 <DIO_voidSetPinDirection+0x158>
    2568:	5b c0       	rjmp	.+182    	; 0x2620 <DIO_voidSetPinDirection+0x1f8>
    256a:	2d 81       	ldd	r18, Y+5	; 0x05
    256c:	3e 81       	ldd	r19, Y+6	; 0x06
    256e:	22 30       	cpi	r18, 0x02	; 2
    2570:	31 05       	cpc	r19, r1
    2572:	71 f1       	breq	.+92     	; 0x25d0 <DIO_voidSetPinDirection+0x1a8>
    2574:	8d 81       	ldd	r24, Y+5	; 0x05
    2576:	9e 81       	ldd	r25, Y+6	; 0x06
    2578:	83 30       	cpi	r24, 0x03	; 3
    257a:	91 05       	cpc	r25, r1
    257c:	e9 f1       	breq	.+122    	; 0x25f8 <DIO_voidSetPinDirection+0x1d0>
    257e:	50 c0       	rjmp	.+160    	; 0x2620 <DIO_voidSetPinDirection+0x1f8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
    2580:	aa e3       	ldi	r26, 0x3A	; 58
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	ea e3       	ldi	r30, 0x3A	; 58
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	48 2f       	mov	r20, r24
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	02 2e       	mov	r0, r18
    2598:	02 c0       	rjmp	.+4      	; 0x259e <DIO_voidSetPinDirection+0x176>
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	0a 94       	dec	r0
    25a0:	e2 f7       	brpl	.-8      	; 0x259a <DIO_voidSetPinDirection+0x172>
    25a2:	84 2b       	or	r24, r20
    25a4:	8c 93       	st	X, r24
    25a6:	3d c0       	rjmp	.+122    	; 0x2622 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
    25a8:	a7 e3       	ldi	r26, 0x37	; 55
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e7 e3       	ldi	r30, 0x37	; 55
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	48 2f       	mov	r20, r24
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	02 2e       	mov	r0, r18
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <DIO_voidSetPinDirection+0x19e>
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	0a 94       	dec	r0
    25c8:	e2 f7       	brpl	.-8      	; 0x25c2 <DIO_voidSetPinDirection+0x19a>
    25ca:	84 2b       	or	r24, r20
    25cc:	8c 93       	st	X, r24
    25ce:	29 c0       	rjmp	.+82     	; 0x2622 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
    25d0:	a4 e3       	ldi	r26, 0x34	; 52
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e4 e3       	ldi	r30, 0x34	; 52
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	48 2f       	mov	r20, r24
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	02 2e       	mov	r0, r18
    25e8:	02 c0       	rjmp	.+4      	; 0x25ee <DIO_voidSetPinDirection+0x1c6>
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	0a 94       	dec	r0
    25f0:	e2 f7       	brpl	.-8      	; 0x25ea <DIO_voidSetPinDirection+0x1c2>
    25f2:	84 2b       	or	r24, r20
    25f4:	8c 93       	st	X, r24
    25f6:	15 c0       	rjmp	.+42     	; 0x2622 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
    25f8:	a1 e3       	ldi	r26, 0x31	; 49
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e1 e3       	ldi	r30, 0x31	; 49
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	48 2f       	mov	r20, r24
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	02 2e       	mov	r0, r18
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <DIO_voidSetPinDirection+0x1ee>
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	0a 94       	dec	r0
    2618:	e2 f7       	brpl	.-8      	; 0x2612 <DIO_voidSetPinDirection+0x1ea>
    261a:	84 2b       	or	r24, r20
    261c:	8c 93       	st	X, r24
    261e:	01 c0       	rjmp	.+2      	; 0x2622 <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
    2620:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    2622:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
    2624:	28 96       	adiw	r28, 0x08	; 8
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <DIO_u8GetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	00 d0       	rcall	.+0      	; 0x263c <DIO_u8GetPinValue+0x6>
    263c:	00 d0       	rcall	.+0      	; 0x263e <DIO_u8GetPinValue+0x8>
    263e:	0f 92       	push	r0
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	8a 83       	std	Y+2, r24	; 0x02
    2646:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	3d 83       	std	Y+5, r19	; 0x05
    2650:	2c 83       	std	Y+4, r18	; 0x04
    2652:	4c 81       	ldd	r20, Y+4	; 0x04
    2654:	5d 81       	ldd	r21, Y+5	; 0x05
    2656:	41 30       	cpi	r20, 0x01	; 1
    2658:	51 05       	cpc	r21, r1
    265a:	41 f1       	breq	.+80     	; 0x26ac <DIO_u8GetPinValue+0x76>
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	82 30       	cpi	r24, 0x02	; 2
    2662:	91 05       	cpc	r25, r1
    2664:	34 f4       	brge	.+12     	; 0x2672 <DIO_u8GetPinValue+0x3c>
    2666:	2c 81       	ldd	r18, Y+4	; 0x04
    2668:	3d 81       	ldd	r19, Y+5	; 0x05
    266a:	21 15       	cp	r18, r1
    266c:	31 05       	cpc	r19, r1
    266e:	61 f0       	breq	.+24     	; 0x2688 <DIO_u8GetPinValue+0x52>
    2670:	52 c0       	rjmp	.+164    	; 0x2716 <DIO_u8GetPinValue+0xe0>
    2672:	4c 81       	ldd	r20, Y+4	; 0x04
    2674:	5d 81       	ldd	r21, Y+5	; 0x05
    2676:	42 30       	cpi	r20, 0x02	; 2
    2678:	51 05       	cpc	r21, r1
    267a:	51 f1       	breq	.+84     	; 0x26d0 <DIO_u8GetPinValue+0x9a>
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	9d 81       	ldd	r25, Y+5	; 0x05
    2680:	83 30       	cpi	r24, 0x03	; 3
    2682:	91 05       	cpc	r25, r1
    2684:	b9 f1       	breq	.+110    	; 0x26f4 <DIO_u8GetPinValue+0xbe>
    2686:	47 c0       	rjmp	.+142    	; 0x2716 <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
    2688:	e9 e3       	ldi	r30, 0x39	; 57
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	88 2f       	mov	r24, r24
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a9 01       	movw	r20, r18
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <DIO_u8GetPinValue+0x6a>
    269c:	55 95       	asr	r21
    269e:	47 95       	ror	r20
    26a0:	8a 95       	dec	r24
    26a2:	e2 f7       	brpl	.-8      	; 0x269c <DIO_u8GetPinValue+0x66>
    26a4:	ca 01       	movw	r24, r20
    26a6:	81 70       	andi	r24, 0x01	; 1
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	35 c0       	rjmp	.+106    	; 0x2716 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
    26ac:	e6 e3       	ldi	r30, 0x36	; 54
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a9 01       	movw	r20, r18
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <DIO_u8GetPinValue+0x8e>
    26c0:	55 95       	asr	r21
    26c2:	47 95       	ror	r20
    26c4:	8a 95       	dec	r24
    26c6:	e2 f7       	brpl	.-8      	; 0x26c0 <DIO_u8GetPinValue+0x8a>
    26c8:	ca 01       	movw	r24, r20
    26ca:	81 70       	andi	r24, 0x01	; 1
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	23 c0       	rjmp	.+70     	; 0x2716 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
    26d0:	e3 e3       	ldi	r30, 0x33	; 51
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	28 2f       	mov	r18, r24
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a9 01       	movw	r20, r18
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <DIO_u8GetPinValue+0xb2>
    26e4:	55 95       	asr	r21
    26e6:	47 95       	ror	r20
    26e8:	8a 95       	dec	r24
    26ea:	e2 f7       	brpl	.-8      	; 0x26e4 <DIO_u8GetPinValue+0xae>
    26ec:	ca 01       	movw	r24, r20
    26ee:	81 70       	andi	r24, 0x01	; 1
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	11 c0       	rjmp	.+34     	; 0x2716 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
    26f4:	e0 e3       	ldi	r30, 0x30	; 48
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	88 2f       	mov	r24, r24
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	a9 01       	movw	r20, r18
    2706:	02 c0       	rjmp	.+4      	; 0x270c <DIO_u8GetPinValue+0xd6>
    2708:	55 95       	asr	r21
    270a:	47 95       	ror	r20
    270c:	8a 95       	dec	r24
    270e:	e2 f7       	brpl	.-8      	; 0x2708 <DIO_u8GetPinValue+0xd2>
    2710:	ca 01       	movw	r24, r20
    2712:	81 70       	andi	r24, 0x01	; 1
    2714:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	00 d0       	rcall	.+0      	; 0x272e <DIO_voidTogPin+0x6>
    272e:	00 d0       	rcall	.+0      	; 0x2730 <DIO_voidTogPin+0x8>
    2730:	0f 92       	push	r0
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	8a 83       	std	Y+2, r24	; 0x02
    2738:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	3d 83       	std	Y+5, r19	; 0x05
    2746:	2c 83       	std	Y+4, r18	; 0x04
    2748:	8c 81       	ldd	r24, Y+4	; 0x04
    274a:	9d 81       	ldd	r25, Y+5	; 0x05
    274c:	81 30       	cpi	r24, 0x01	; 1
    274e:	91 05       	cpc	r25, r1
    2750:	49 f1       	breq	.+82     	; 0x27a4 <DIO_voidTogPin+0x7c>
    2752:	2c 81       	ldd	r18, Y+4	; 0x04
    2754:	3d 81       	ldd	r19, Y+5	; 0x05
    2756:	22 30       	cpi	r18, 0x02	; 2
    2758:	31 05       	cpc	r19, r1
    275a:	2c f4       	brge	.+10     	; 0x2766 <DIO_voidTogPin+0x3e>
    275c:	8c 81       	ldd	r24, Y+4	; 0x04
    275e:	9d 81       	ldd	r25, Y+5	; 0x05
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	61 f0       	breq	.+24     	; 0x277c <DIO_voidTogPin+0x54>
    2764:	5b c0       	rjmp	.+182    	; 0x281c <DIO_voidTogPin+0xf4>
    2766:	2c 81       	ldd	r18, Y+4	; 0x04
    2768:	3d 81       	ldd	r19, Y+5	; 0x05
    276a:	22 30       	cpi	r18, 0x02	; 2
    276c:	31 05       	cpc	r19, r1
    276e:	71 f1       	breq	.+92     	; 0x27cc <DIO_voidTogPin+0xa4>
    2770:	8c 81       	ldd	r24, Y+4	; 0x04
    2772:	9d 81       	ldd	r25, Y+5	; 0x05
    2774:	83 30       	cpi	r24, 0x03	; 3
    2776:	91 05       	cpc	r25, r1
    2778:	e9 f1       	breq	.+122    	; 0x27f4 <DIO_voidTogPin+0xcc>
    277a:	50 c0       	rjmp	.+160    	; 0x281c <DIO_voidTogPin+0xf4>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
    277c:	ab e3       	ldi	r26, 0x3B	; 59
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	eb e3       	ldi	r30, 0x3B	; 59
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	48 2f       	mov	r20, r24
    2788:	8b 81       	ldd	r24, Y+3	; 0x03
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	02 2e       	mov	r0, r18
    2794:	02 c0       	rjmp	.+4      	; 0x279a <DIO_voidTogPin+0x72>
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	0a 94       	dec	r0
    279c:	e2 f7       	brpl	.-8      	; 0x2796 <DIO_voidTogPin+0x6e>
    279e:	84 27       	eor	r24, r20
    27a0:	8c 93       	st	X, r24
    27a2:	3d c0       	rjmp	.+122    	; 0x281e <DIO_voidTogPin+0xf6>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
    27a4:	a8 e3       	ldi	r26, 0x38	; 56
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e8 e3       	ldi	r30, 0x38	; 56
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	48 2f       	mov	r20, r24
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 2e       	mov	r0, r18
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <DIO_voidTogPin+0x9a>
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	0a 94       	dec	r0
    27c4:	e2 f7       	brpl	.-8      	; 0x27be <DIO_voidTogPin+0x96>
    27c6:	84 27       	eor	r24, r20
    27c8:	8c 93       	st	X, r24
    27ca:	29 c0       	rjmp	.+82     	; 0x281e <DIO_voidTogPin+0xf6>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
    27cc:	a5 e3       	ldi	r26, 0x35	; 53
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e5 e3       	ldi	r30, 0x35	; 53
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	48 2f       	mov	r20, r24
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	28 2f       	mov	r18, r24
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	02 2e       	mov	r0, r18
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <DIO_voidTogPin+0xc2>
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	0a 94       	dec	r0
    27ec:	e2 f7       	brpl	.-8      	; 0x27e6 <DIO_voidTogPin+0xbe>
    27ee:	84 27       	eor	r24, r20
    27f0:	8c 93       	st	X, r24
    27f2:	15 c0       	rjmp	.+42     	; 0x281e <DIO_voidTogPin+0xf6>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
    27f4:	a2 e3       	ldi	r26, 0x32	; 50
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e2 e3       	ldi	r30, 0x32	; 50
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	48 2f       	mov	r20, r24
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	02 2e       	mov	r0, r18
    280c:	02 c0       	rjmp	.+4      	; 0x2812 <DIO_voidTogPin+0xea>
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	0a 94       	dec	r0
    2814:	e2 f7       	brpl	.-8      	; 0x280e <DIO_voidTogPin+0xe6>
    2816:	84 27       	eor	r24, r20
    2818:	8c 93       	st	X, r24
    281a:	01 c0       	rjmp	.+2      	; 0x281e <DIO_voidTogPin+0xf6>
        break;
    default:
        state = E_ERROR;
    281c:	19 82       	std	Y+1, r1	; 0x01
        break;
    }

    return state;
    281e:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <DIO_voidSetPortValue+0x6>
    2836:	00 d0       	rcall	.+0      	; 0x2838 <DIO_voidSetPortValue+0x8>
    2838:	0f 92       	push	r0
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	8a 83       	std	Y+2, r24	; 0x02
    2840:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	3d 83       	std	Y+5, r19	; 0x05
    284e:	2c 83       	std	Y+4, r18	; 0x04
    2850:	8c 81       	ldd	r24, Y+4	; 0x04
    2852:	9d 81       	ldd	r25, Y+5	; 0x05
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	91 05       	cpc	r25, r1
    2858:	d1 f0       	breq	.+52     	; 0x288e <DIO_voidSetPortValue+0x5e>
    285a:	2c 81       	ldd	r18, Y+4	; 0x04
    285c:	3d 81       	ldd	r19, Y+5	; 0x05
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	31 05       	cpc	r19, r1
    2862:	2c f4       	brge	.+10     	; 0x286e <DIO_voidSetPortValue+0x3e>
    2864:	8c 81       	ldd	r24, Y+4	; 0x04
    2866:	9d 81       	ldd	r25, Y+5	; 0x05
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	61 f0       	breq	.+24     	; 0x2884 <DIO_voidSetPortValue+0x54>
    286c:	1f c0       	rjmp	.+62     	; 0x28ac <DIO_voidSetPortValue+0x7c>
    286e:	2c 81       	ldd	r18, Y+4	; 0x04
    2870:	3d 81       	ldd	r19, Y+5	; 0x05
    2872:	22 30       	cpi	r18, 0x02	; 2
    2874:	31 05       	cpc	r19, r1
    2876:	81 f0       	breq	.+32     	; 0x2898 <DIO_voidSetPortValue+0x68>
    2878:	8c 81       	ldd	r24, Y+4	; 0x04
    287a:	9d 81       	ldd	r25, Y+5	; 0x05
    287c:	83 30       	cpi	r24, 0x03	; 3
    287e:	91 05       	cpc	r25, r1
    2880:	81 f0       	breq	.+32     	; 0x28a2 <DIO_voidSetPortValue+0x72>
    2882:	14 c0       	rjmp	.+40     	; 0x28ac <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
    2884:	eb e3       	ldi	r30, 0x3B	; 59
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	80 83       	st	Z, r24
    288c:	10 c0       	rjmp	.+32     	; 0x28ae <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_B:
        PORTB = EN_Value;
    288e:	e8 e3       	ldi	r30, 0x38	; 56
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	80 83       	st	Z, r24
    2896:	0b c0       	rjmp	.+22     	; 0x28ae <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_C:
        PORTC = EN_Value;
    2898:	e5 e3       	ldi	r30, 0x35	; 53
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	80 83       	st	Z, r24
    28a0:	06 c0       	rjmp	.+12     	; 0x28ae <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_D:
        PORTD = EN_Value;
    28a2:	e2 e3       	ldi	r30, 0x32	; 50
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	80 83       	st	Z, r24
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <DIO_voidSetPortValue+0x7e>
        break;
    default:
        state = E_ERROR;
    28ac:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <DIO_voidSetPortDirection+0x6>
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <DIO_voidSetPortDirection+0x8>
    28c8:	0f 92       	push	r0
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	8a 83       	std	Y+2, r24	; 0x02
    28d0:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	3d 83       	std	Y+5, r19	; 0x05
    28de:	2c 83       	std	Y+4, r18	; 0x04
    28e0:	8c 81       	ldd	r24, Y+4	; 0x04
    28e2:	9d 81       	ldd	r25, Y+5	; 0x05
    28e4:	81 30       	cpi	r24, 0x01	; 1
    28e6:	91 05       	cpc	r25, r1
    28e8:	d1 f0       	breq	.+52     	; 0x291e <DIO_voidSetPortDirection+0x5e>
    28ea:	2c 81       	ldd	r18, Y+4	; 0x04
    28ec:	3d 81       	ldd	r19, Y+5	; 0x05
    28ee:	22 30       	cpi	r18, 0x02	; 2
    28f0:	31 05       	cpc	r19, r1
    28f2:	2c f4       	brge	.+10     	; 0x28fe <DIO_voidSetPortDirection+0x3e>
    28f4:	8c 81       	ldd	r24, Y+4	; 0x04
    28f6:	9d 81       	ldd	r25, Y+5	; 0x05
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	61 f0       	breq	.+24     	; 0x2914 <DIO_voidSetPortDirection+0x54>
    28fc:	1f c0       	rjmp	.+62     	; 0x293c <DIO_voidSetPortDirection+0x7c>
    28fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2900:	3d 81       	ldd	r19, Y+5	; 0x05
    2902:	22 30       	cpi	r18, 0x02	; 2
    2904:	31 05       	cpc	r19, r1
    2906:	81 f0       	breq	.+32     	; 0x2928 <DIO_voidSetPortDirection+0x68>
    2908:	8c 81       	ldd	r24, Y+4	; 0x04
    290a:	9d 81       	ldd	r25, Y+5	; 0x05
    290c:	83 30       	cpi	r24, 0x03	; 3
    290e:	91 05       	cpc	r25, r1
    2910:	81 f0       	breq	.+32     	; 0x2932 <DIO_voidSetPortDirection+0x72>
    2912:	14 c0       	rjmp	.+40     	; 0x293c <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
    2914:	ea e3       	ldi	r30, 0x3A	; 58
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	80 83       	st	Z, r24
    291c:	10 c0       	rjmp	.+32     	; 0x293e <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_B:
        DDRB = EN_Direction;
    291e:	e7 e3       	ldi	r30, 0x37	; 55
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	80 83       	st	Z, r24
    2926:	0b c0       	rjmp	.+22     	; 0x293e <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_C:
        DDRC = EN_Direction;
    2928:	e4 e3       	ldi	r30, 0x34	; 52
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	80 83       	st	Z, r24
    2930:	06 c0       	rjmp	.+12     	; 0x293e <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_D:
        DDRD = EN_Direction;
    2932:	e1 e3       	ldi	r30, 0x31	; 49
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	80 83       	st	Z, r24
    293a:	01 c0       	rjmp	.+2      	; 0x293e <DIO_voidSetPortDirection+0x7e>
        break;
    default:
        state = E_ERROR;
    293c:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    293e:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	00 d0       	rcall	.+0      	; 0x2956 <DIO_voidInpullUp+0x6>
    2956:	00 d0       	rcall	.+0      	; 0x2958 <DIO_voidInpullUp+0x8>
    2958:	0f 92       	push	r0
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	8a 83       	std	Y+2, r24	; 0x02
    2960:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	3d 83       	std	Y+5, r19	; 0x05
    296e:	2c 83       	std	Y+4, r18	; 0x04
    2970:	8c 81       	ldd	r24, Y+4	; 0x04
    2972:	9d 81       	ldd	r25, Y+5	; 0x05
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	91 05       	cpc	r25, r1
    2978:	09 f4       	brne	.+2      	; 0x297c <DIO_voidInpullUp+0x2c>
    297a:	3e c0       	rjmp	.+124    	; 0x29f8 <DIO_voidInpullUp+0xa8>
    297c:	2c 81       	ldd	r18, Y+4	; 0x04
    297e:	3d 81       	ldd	r19, Y+5	; 0x05
    2980:	22 30       	cpi	r18, 0x02	; 2
    2982:	31 05       	cpc	r19, r1
    2984:	2c f4       	brge	.+10     	; 0x2990 <DIO_voidInpullUp+0x40>
    2986:	8c 81       	ldd	r24, Y+4	; 0x04
    2988:	9d 81       	ldd	r25, Y+5	; 0x05
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	71 f0       	breq	.+28     	; 0x29aa <DIO_voidInpullUp+0x5a>
    298e:	a9 c0       	rjmp	.+338    	; 0x2ae2 <DIO_voidInpullUp+0x192>
    2990:	2c 81       	ldd	r18, Y+4	; 0x04
    2992:	3d 81       	ldd	r19, Y+5	; 0x05
    2994:	22 30       	cpi	r18, 0x02	; 2
    2996:	31 05       	cpc	r19, r1
    2998:	09 f4       	brne	.+2      	; 0x299c <DIO_voidInpullUp+0x4c>
    299a:	55 c0       	rjmp	.+170    	; 0x2a46 <DIO_voidInpullUp+0xf6>
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	9d 81       	ldd	r25, Y+5	; 0x05
    29a0:	83 30       	cpi	r24, 0x03	; 3
    29a2:	91 05       	cpc	r25, r1
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <DIO_voidInpullUp+0x58>
    29a6:	76 c0       	rjmp	.+236    	; 0x2a94 <DIO_voidInpullUp+0x144>
    29a8:	9c c0       	rjmp	.+312    	; 0x2ae2 <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
    29aa:	aa e3       	ldi	r26, 0x3A	; 58
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	ea e3       	ldi	r30, 0x3A	; 58
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	48 2f       	mov	r20, r24
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <DIO_voidInpullUp+0x76>
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	2a 95       	dec	r18
    29c8:	e2 f7       	brpl	.-8      	; 0x29c2 <DIO_voidInpullUp+0x72>
    29ca:	80 95       	com	r24
    29cc:	84 23       	and	r24, r20
    29ce:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
    29d0:	ab e3       	ldi	r26, 0x3B	; 59
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	eb e3       	ldi	r30, 0x3B	; 59
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	48 2f       	mov	r20, r24
    29dc:	8b 81       	ldd	r24, Y+3	; 0x03
    29de:	28 2f       	mov	r18, r24
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	02 2e       	mov	r0, r18
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <DIO_voidInpullUp+0x9e>
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	0a 94       	dec	r0
    29f0:	e2 f7       	brpl	.-8      	; 0x29ea <DIO_voidInpullUp+0x9a>
    29f2:	84 2b       	or	r24, r20
    29f4:	8c 93       	st	X, r24
    29f6:	76 c0       	rjmp	.+236    	; 0x2ae4 <DIO_voidInpullUp+0x194>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
    29f8:	a7 e3       	ldi	r26, 0x37	; 55
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e7 e3       	ldi	r30, 0x37	; 55
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	48 2f       	mov	r20, r24
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	02 c0       	rjmp	.+4      	; 0x2a14 <DIO_voidInpullUp+0xc4>
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	2a 95       	dec	r18
    2a16:	e2 f7       	brpl	.-8      	; 0x2a10 <DIO_voidInpullUp+0xc0>
    2a18:	80 95       	com	r24
    2a1a:	84 23       	and	r24, r20
    2a1c:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
    2a1e:	a8 e3       	ldi	r26, 0x38	; 56
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e8 e3       	ldi	r30, 0x38	; 56
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	48 2f       	mov	r20, r24
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	28 2f       	mov	r18, r24
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	02 2e       	mov	r0, r18
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <DIO_voidInpullUp+0xec>
    2a38:	88 0f       	add	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	0a 94       	dec	r0
    2a3e:	e2 f7       	brpl	.-8      	; 0x2a38 <DIO_voidInpullUp+0xe8>
    2a40:	84 2b       	or	r24, r20
    2a42:	8c 93       	st	X, r24
    2a44:	4f c0       	rjmp	.+158    	; 0x2ae4 <DIO_voidInpullUp+0x194>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
    2a46:	a4 e3       	ldi	r26, 0x34	; 52
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e4 e3       	ldi	r30, 0x34	; 52
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	48 2f       	mov	r20, r24
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <DIO_voidInpullUp+0x112>
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	2a 95       	dec	r18
    2a64:	e2 f7       	brpl	.-8      	; 0x2a5e <DIO_voidInpullUp+0x10e>
    2a66:	80 95       	com	r24
    2a68:	84 23       	and	r24, r20
    2a6a:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
    2a6c:	a5 e3       	ldi	r26, 0x35	; 53
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e5 e3       	ldi	r30, 0x35	; 53
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	48 2f       	mov	r20, r24
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	02 2e       	mov	r0, r18
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <DIO_voidInpullUp+0x13a>
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	0a 94       	dec	r0
    2a8c:	e2 f7       	brpl	.-8      	; 0x2a86 <DIO_voidInpullUp+0x136>
    2a8e:	84 2b       	or	r24, r20
    2a90:	8c 93       	st	X, r24
    2a92:	28 c0       	rjmp	.+80     	; 0x2ae4 <DIO_voidInpullUp+0x194>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
    2a94:	a1 e3       	ldi	r26, 0x31	; 49
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e1 e3       	ldi	r30, 0x31	; 49
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	48 2f       	mov	r20, r24
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	02 c0       	rjmp	.+4      	; 0x2ab0 <DIO_voidInpullUp+0x160>
    2aac:	88 0f       	add	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	2a 95       	dec	r18
    2ab2:	e2 f7       	brpl	.-8      	; 0x2aac <DIO_voidInpullUp+0x15c>
    2ab4:	80 95       	com	r24
    2ab6:	84 23       	and	r24, r20
    2ab8:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
    2aba:	a2 e3       	ldi	r26, 0x32	; 50
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e2 e3       	ldi	r30, 0x32	; 50
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	48 2f       	mov	r20, r24
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	02 2e       	mov	r0, r18
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <DIO_voidInpullUp+0x188>
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	0a 94       	dec	r0
    2ada:	e2 f7       	brpl	.-8      	; 0x2ad4 <DIO_voidInpullUp+0x184>
    2adc:	84 2b       	or	r24, r20
    2ade:	8c 93       	st	X, r24
    2ae0:	01 c0       	rjmp	.+2      	; 0x2ae4 <DIO_voidInpullUp+0x194>
        break;
    default:
        state = E_ERROR;
    2ae2:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <Exti_ultra>:
/**
 * @brief This Function is Called Inside EXTI ISR to Detect Change in Signal
 * 
 */
void Exti_ultra(void)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
	if (Flag == FALLING)
    2afe:	80 91 94 01 	lds	r24, 0x0194
    2b02:	88 23       	and	r24, r24
    2b04:	d9 f4       	brne	.+54     	; 0x2b3c <Exti_ultra+0x46>
	{
		TCNT2 = 0;
    2b06:	e4 e4       	ldi	r30, 0x44	; 68
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	10 82       	st	Z, r1
		count = ZERO;
    2b0c:	10 92 95 01 	sts	0x0195, r1
    2b10:	10 92 96 01 	sts	0x0196, r1
    2b14:	10 92 97 01 	sts	0x0197, r1
    2b18:	10 92 98 01 	sts	0x0198, r1
		Flag = RISING;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	80 93 94 01 	sts	0x0194, r24
		EXTI_ENTriggerEdge(EXTI_INT2, FALLING_EDGE);
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	0e 94 76 0f 	call	0x1eec	; 0x1eec <EXTI_ENTriggerEdge>
		count = ZERO;
    2b2a:	10 92 95 01 	sts	0x0195, r1
    2b2e:	10 92 96 01 	sts	0x0196, r1
    2b32:	10 92 97 01 	sts	0x0197, r1
    2b36:	10 92 98 01 	sts	0x0198, r1
    2b3a:	2a c0       	rjmp	.+84     	; 0x2b90 <Exti_ultra+0x9a>
	}
	else if (Flag == RISING)
    2b3c:	80 91 94 01 	lds	r24, 0x0194
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	31 f5       	brne	.+76     	; 0x2b90 <Exti_ultra+0x9a>
	{
		t2 = TCNT2 + (count * TIMER2_REG_CAPACITY);
    2b44:	e4 e4       	ldi	r30, 0x44	; 68
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	80 91 95 01 	lds	r24, 0x0195
    2b56:	90 91 96 01 	lds	r25, 0x0196
    2b5a:	a0 91 97 01 	lds	r26, 0x0197
    2b5e:	b0 91 98 01 	lds	r27, 0x0198
    2b62:	ba 2f       	mov	r27, r26
    2b64:	a9 2f       	mov	r26, r25
    2b66:	98 2f       	mov	r25, r24
    2b68:	88 27       	eor	r24, r24
    2b6a:	82 0f       	add	r24, r18
    2b6c:	93 1f       	adc	r25, r19
    2b6e:	a4 1f       	adc	r26, r20
    2b70:	b5 1f       	adc	r27, r21
    2b72:	80 93 90 01 	sts	0x0190, r24
    2b76:	90 93 91 01 	sts	0x0191, r25
    2b7a:	a0 93 92 01 	sts	0x0192, r26
    2b7e:	b0 93 93 01 	sts	0x0193, r27
		Flag = READ_DISTANCE;
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	80 93 94 01 	sts	0x0194, r24
		EXTI_ENTriggerEdge(EXTI_INT2, RISING_EDGE);
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	63 e0       	ldi	r22, 0x03	; 3
    2b8c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <EXTI_ENTriggerEdge>
	}
}
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <Ultra_voidtimee>:
/**
 * @brief this function is called inside TIMER2 ISR To count Number Of OVF
 * 
 */
void Ultra_voidtimee(void)
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
	count++;
    2b9e:	80 91 95 01 	lds	r24, 0x0195
    2ba2:	90 91 96 01 	lds	r25, 0x0196
    2ba6:	a0 91 97 01 	lds	r26, 0x0197
    2baa:	b0 91 98 01 	lds	r27, 0x0198
    2bae:	01 96       	adiw	r24, 0x01	; 1
    2bb0:	a1 1d       	adc	r26, r1
    2bb2:	b1 1d       	adc	r27, r1
    2bb4:	80 93 95 01 	sts	0x0195, r24
    2bb8:	90 93 96 01 	sts	0x0196, r25
    2bbc:	a0 93 97 01 	sts	0x0197, r26
    2bc0:	b0 93 98 01 	sts	0x0198, r27
}
    2bc4:	cf 91       	pop	r28
    2bc6:	df 91       	pop	r29
    2bc8:	08 95       	ret

00002bca <Ultrasonic_init>:
 * @brief Initalize Ultrasonic
 * 
 * @return EN_ERRORSTATE_t Error state
 */
EN_ERRORSTATE_t Ultrasonic_init(void)
{
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	0f 92       	push	r0
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
	EN_ERRORSTATE_t state;
	state = E_OK;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	89 83       	std	Y+1, r24	; 0x01
	/* Direction for Trig Pin */
	DIO_voidSetPinDirection(TRIG_PORT, TRIG_PIN, OUTPUT);
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	63 e0       	ldi	r22, 0x03	; 3
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
	/* Enable EXTI int2 */
	EXTI_ENEnable(EXTI_INT2);
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <EXTI_ENEnable>
	/* Direction for Trig Pin */
	DIO_voidSetPinDirection(ECHO_PORT, ECHO_PIN, INPUT);
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	62 e0       	ldi	r22, 0x02	; 2
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
	EXTI_ENTriggerEdge(EXTI_INT2, RISING_EDGE);
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	63 e0       	ldi	r22, 0x03	; 3
    2bf6:	0e 94 76 0f 	call	0x1eec	; 0x1eec <EXTI_ENTriggerEdge>

	/* initalize Timer2 for calculate time of */
	Timer2_init(TIMER2_NORMAL_MODE, TIMER2_SCALER_8);
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	62 e0       	ldi	r22, 0x02	; 2
    2bfe:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <Timer2_init>
	Timer2_OV_InterruptEnable();
    2c02:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Timer2_OV_InterruptEnable>
	EXTI_SetCallBack(EXTI_INT2, Exti_ultra);
    2c06:	2b e7       	ldi	r18, 0x7B	; 123
    2c08:	35 e1       	ldi	r19, 0x15	; 21
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	b9 01       	movw	r22, r18
    2c0e:	0e 94 35 10 	call	0x206a	; 0x206a <EXTI_SetCallBack>
	Timer2_OVF_SetCallBack(Ultra_voidtimee);
    2c12:	8b ec       	ldi	r24, 0xCB	; 203
    2c14:	95 e1       	ldi	r25, 0x15	; 21
    2c16:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Timer2_OVF_SetCallBack>

	return state;
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c1c:	0f 90       	pop	r0
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <Ultrasonic_u16GetDistance>:
 * @brief This function for calculate distance 
 * 
 * @param data store distance 
 */
void Ultrasonic_u16GetDistance(uint16_t *data)
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	e4 97       	sbiw	r28, 0x34	; 52
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	9c ab       	std	Y+52, r25	; 0x34
    2c3a:	8b ab       	std	Y+51, r24	; 0x33
	DIO_voidSetPinValue(TRIG_PORT, TRIG_PIN, LOW);
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	63 e0       	ldi	r22, 0x03	; 3
    2c40:	40 e0       	ldi	r20, 0x00	; 0
    2c42:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	a0 ea       	ldi	r26, 0xA0	; 160
    2c4c:	b0 e4       	ldi	r27, 0x40	; 64
    2c4e:	8d a7       	std	Y+45, r24	; 0x2d
    2c50:	9e a7       	std	Y+46, r25	; 0x2e
    2c52:	af a7       	std	Y+47, r26	; 0x2f
    2c54:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c56:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c58:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c5e:	2b ea       	ldi	r18, 0xAB	; 171
    2c60:	3a ea       	ldi	r19, 0xAA	; 170
    2c62:	4a e2       	ldi	r20, 0x2A	; 42
    2c64:	50 e4       	ldi	r21, 0x40	; 64
    2c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	89 a7       	std	Y+41, r24	; 0x29
    2c70:	9a a7       	std	Y+42, r25	; 0x2a
    2c72:	ab a7       	std	Y+43, r26	; 0x2b
    2c74:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c76:	69 a5       	ldd	r22, Y+41	; 0x29
    2c78:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e8       	ldi	r20, 0x80	; 128
    2c84:	5f e3       	ldi	r21, 0x3F	; 63
    2c86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8a:	88 23       	and	r24, r24
    2c8c:	1c f4       	brge	.+6      	; 0x2c94 <Ultrasonic_u16GetDistance+0x70>
		__ticks = 1;
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	88 a7       	std	Y+40, r24	; 0x28
    2c92:	91 c0       	rjmp	.+290    	; 0x2db6 <Ultrasonic_u16GetDistance+0x192>
	else if (__tmp > 255)
    2c94:	69 a5       	ldd	r22, Y+41	; 0x29
    2c96:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	4f e7       	ldi	r20, 0x7F	; 127
    2ca2:	53 e4       	ldi	r21, 0x43	; 67
    2ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca8:	18 16       	cp	r1, r24
    2caa:	0c f0       	brlt	.+2      	; 0x2cae <Ultrasonic_u16GetDistance+0x8a>
    2cac:	7b c0       	rjmp	.+246    	; 0x2da4 <Ultrasonic_u16GetDistance+0x180>
	{
		_delay_ms(__us / 1000.0);
    2cae:	6d a5       	ldd	r22, Y+45	; 0x2d
    2cb0:	7e a5       	ldd	r23, Y+46	; 0x2e
    2cb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4a e7       	ldi	r20, 0x7A	; 122
    2cbc:	54 e4       	ldi	r21, 0x44	; 68
    2cbe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	8c a3       	std	Y+36, r24	; 0x24
    2cc8:	9d a3       	std	Y+37, r25	; 0x25
    2cca:	ae a3       	std	Y+38, r26	; 0x26
    2ccc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cce:	6c a1       	ldd	r22, Y+36	; 0x24
    2cd0:	7d a1       	ldd	r23, Y+37	; 0x25
    2cd2:	8e a1       	ldd	r24, Y+38	; 0x26
    2cd4:	9f a1       	ldd	r25, Y+39	; 0x27
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	4a ef       	ldi	r20, 0xFA	; 250
    2cdc:	54 e4       	ldi	r21, 0x44	; 68
    2cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	88 a3       	std	Y+32, r24	; 0x20
    2ce8:	99 a3       	std	Y+33, r25	; 0x21
    2cea:	aa a3       	std	Y+34, r26	; 0x22
    2cec:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2cee:	68 a1       	ldd	r22, Y+32	; 0x20
    2cf0:	79 a1       	ldd	r23, Y+33	; 0x21
    2cf2:	8a a1       	ldd	r24, Y+34	; 0x22
    2cf4:	9b a1       	ldd	r25, Y+35	; 0x23
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e8       	ldi	r20, 0x80	; 128
    2cfc:	5f e3       	ldi	r21, 0x3F	; 63
    2cfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d02:	88 23       	and	r24, r24
    2d04:	2c f4       	brge	.+10     	; 0x2d10 <Ultrasonic_u16GetDistance+0xec>
		__ticks = 1;
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	9f 8f       	std	Y+31, r25	; 0x1f
    2d0c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d0e:	3f c0       	rjmp	.+126    	; 0x2d8e <Ultrasonic_u16GetDistance+0x16a>
	else if (__tmp > 65535)
    2d10:	68 a1       	ldd	r22, Y+32	; 0x20
    2d12:	79 a1       	ldd	r23, Y+33	; 0x21
    2d14:	8a a1       	ldd	r24, Y+34	; 0x22
    2d16:	9b a1       	ldd	r25, Y+35	; 0x23
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	3f ef       	ldi	r19, 0xFF	; 255
    2d1c:	4f e7       	ldi	r20, 0x7F	; 127
    2d1e:	57 e4       	ldi	r21, 0x47	; 71
    2d20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d24:	18 16       	cp	r1, r24
    2d26:	4c f5       	brge	.+82     	; 0x2d7a <Ultrasonic_u16GetDistance+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d28:	6c a1       	ldd	r22, Y+36	; 0x24
    2d2a:	7d a1       	ldd	r23, Y+37	; 0x25
    2d2c:	8e a1       	ldd	r24, Y+38	; 0x26
    2d2e:	9f a1       	ldd	r25, Y+39	; 0x27
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e2       	ldi	r20, 0x20	; 32
    2d36:	51 e4       	ldi	r21, 0x41	; 65
    2d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	bc 01       	movw	r22, r24
    2d42:	cd 01       	movw	r24, r26
    2d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	9f 8f       	std	Y+31, r25	; 0x1f
    2d4e:	8e 8f       	std	Y+30, r24	; 0x1e
    2d50:	0f c0       	rjmp	.+30     	; 0x2d70 <Ultrasonic_u16GetDistance+0x14c>
    2d52:	88 ec       	ldi	r24, 0xC8	; 200
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9d 8f       	std	Y+29, r25	; 0x1d
    2d58:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d5c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <Ultrasonic_u16GetDistance+0x13a>
    2d62:	9d 8f       	std	Y+29, r25	; 0x1d
    2d64:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d68:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	9f 8f       	std	Y+31, r25	; 0x1f
    2d6e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d72:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	69 f7       	brne	.-38     	; 0x2d52 <Ultrasonic_u16GetDistance+0x12e>
    2d78:	24 c0       	rjmp	.+72     	; 0x2dc2 <Ultrasonic_u16GetDistance+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7a:	68 a1       	ldd	r22, Y+32	; 0x20
    2d7c:	79 a1       	ldd	r23, Y+33	; 0x21
    2d7e:	8a a1       	ldd	r24, Y+34	; 0x22
    2d80:	9b a1       	ldd	r25, Y+35	; 0x23
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	9f 8f       	std	Y+31, r25	; 0x1f
    2d8c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d92:	9b 8f       	std	Y+27, r25	; 0x1b
    2d94:	8a 8f       	std	Y+26, r24	; 0x1a
    2d96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d98:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <Ultrasonic_u16GetDistance+0x176>
    2d9e:	9b 8f       	std	Y+27, r25	; 0x1b
    2da0:	8a 8f       	std	Y+26, r24	; 0x1a
    2da2:	0f c0       	rjmp	.+30     	; 0x2dc2 <Ultrasonic_u16GetDistance+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2da4:	69 a5       	ldd	r22, Y+41	; 0x29
    2da6:	7a a5       	ldd	r23, Y+42	; 0x2a
    2da8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2daa:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	88 a7       	std	Y+40, r24	; 0x28
    2db6:	88 a5       	ldd	r24, Y+40	; 0x28
    2db8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dba:	89 8d       	ldd	r24, Y+25	; 0x19
    2dbc:	8a 95       	dec	r24
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <Ultrasonic_u16GetDistance+0x198>
    2dc0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	DIO_voidSetPinValue(TRIG_PORT, TRIG_PIN, HIGH);
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	63 e0       	ldi	r22, 0x03	; 3
    2dc6:	41 e0       	ldi	r20, 0x01	; 1
    2dc8:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	a0 e2       	ldi	r26, 0x20	; 32
    2dd2:	b1 e4       	ldi	r27, 0x41	; 65
    2dd4:	8d 8b       	std	Y+21, r24	; 0x15
    2dd6:	9e 8b       	std	Y+22, r25	; 0x16
    2dd8:	af 8b       	std	Y+23, r26	; 0x17
    2dda:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dde:	7e 89       	ldd	r23, Y+22	; 0x16
    2de0:	8f 89       	ldd	r24, Y+23	; 0x17
    2de2:	98 8d       	ldd	r25, Y+24	; 0x18
    2de4:	2b ea       	ldi	r18, 0xAB	; 171
    2de6:	3a ea       	ldi	r19, 0xAA	; 170
    2de8:	4a e2       	ldi	r20, 0x2A	; 42
    2dea:	50 e4       	ldi	r21, 0x40	; 64
    2dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	89 8b       	std	Y+17, r24	; 0x11
    2df6:	9a 8b       	std	Y+18, r25	; 0x12
    2df8:	ab 8b       	std	Y+19, r26	; 0x13
    2dfa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2dfc:	69 89       	ldd	r22, Y+17	; 0x11
    2dfe:	7a 89       	ldd	r23, Y+18	; 0x12
    2e00:	8b 89       	ldd	r24, Y+19	; 0x13
    2e02:	9c 89       	ldd	r25, Y+20	; 0x14
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e8       	ldi	r20, 0x80	; 128
    2e0a:	5f e3       	ldi	r21, 0x3F	; 63
    2e0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e10:	88 23       	and	r24, r24
    2e12:	1c f4       	brge	.+6      	; 0x2e1a <Ultrasonic_u16GetDistance+0x1f6>
		__ticks = 1;
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	88 8b       	std	Y+16, r24	; 0x10
    2e18:	91 c0       	rjmp	.+290    	; 0x2f3c <Ultrasonic_u16GetDistance+0x318>
	else if (__tmp > 255)
    2e1a:	69 89       	ldd	r22, Y+17	; 0x11
    2e1c:	7a 89       	ldd	r23, Y+18	; 0x12
    2e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e20:	9c 89       	ldd	r25, Y+20	; 0x14
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	4f e7       	ldi	r20, 0x7F	; 127
    2e28:	53 e4       	ldi	r21, 0x43	; 67
    2e2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e2e:	18 16       	cp	r1, r24
    2e30:	0c f0       	brlt	.+2      	; 0x2e34 <Ultrasonic_u16GetDistance+0x210>
    2e32:	7b c0       	rjmp	.+246    	; 0x2f2a <Ultrasonic_u16GetDistance+0x306>
	{
		_delay_ms(__us / 1000.0);
    2e34:	6d 89       	ldd	r22, Y+21	; 0x15
    2e36:	7e 89       	ldd	r23, Y+22	; 0x16
    2e38:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	4a e7       	ldi	r20, 0x7A	; 122
    2e42:	54 e4       	ldi	r21, 0x44	; 68
    2e44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	8c 87       	std	Y+12, r24	; 0x0c
    2e4e:	9d 87       	std	Y+13, r25	; 0x0d
    2e50:	ae 87       	std	Y+14, r26	; 0x0e
    2e52:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e54:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e56:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e58:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	4a ef       	ldi	r20, 0xFA	; 250
    2e62:	54 e4       	ldi	r21, 0x44	; 68
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	88 87       	std	Y+8, r24	; 0x08
    2e6e:	99 87       	std	Y+9, r25	; 0x09
    2e70:	aa 87       	std	Y+10, r26	; 0x0a
    2e72:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e74:	68 85       	ldd	r22, Y+8	; 0x08
    2e76:	79 85       	ldd	r23, Y+9	; 0x09
    2e78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e8       	ldi	r20, 0x80	; 128
    2e82:	5f e3       	ldi	r21, 0x3F	; 63
    2e84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e88:	88 23       	and	r24, r24
    2e8a:	2c f4       	brge	.+10     	; 0x2e96 <Ultrasonic_u16GetDistance+0x272>
		__ticks = 1;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	9f 83       	std	Y+7, r25	; 0x07
    2e92:	8e 83       	std	Y+6, r24	; 0x06
    2e94:	3f c0       	rjmp	.+126    	; 0x2f14 <Ultrasonic_u16GetDistance+0x2f0>
	else if (__tmp > 65535)
    2e96:	68 85       	ldd	r22, Y+8	; 0x08
    2e98:	79 85       	ldd	r23, Y+9	; 0x09
    2e9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	3f ef       	ldi	r19, 0xFF	; 255
    2ea2:	4f e7       	ldi	r20, 0x7F	; 127
    2ea4:	57 e4       	ldi	r21, 0x47	; 71
    2ea6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eaa:	18 16       	cp	r1, r24
    2eac:	4c f5       	brge	.+82     	; 0x2f00 <Ultrasonic_u16GetDistance+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eae:	6c 85       	ldd	r22, Y+12	; 0x0c
    2eb0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2eb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e2       	ldi	r20, 0x20	; 32
    2ebc:	51 e4       	ldi	r21, 0x41	; 65
    2ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	9f 83       	std	Y+7, r25	; 0x07
    2ed4:	8e 83       	std	Y+6, r24	; 0x06
    2ed6:	0f c0       	rjmp	.+30     	; 0x2ef6 <Ultrasonic_u16GetDistance+0x2d2>
    2ed8:	88 ec       	ldi	r24, 0xC8	; 200
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9d 83       	std	Y+5, r25	; 0x05
    2ede:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <Ultrasonic_u16GetDistance+0x2c0>
    2ee8:	9d 83       	std	Y+5, r25	; 0x05
    2eea:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eec:	8e 81       	ldd	r24, Y+6	; 0x06
    2eee:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	9f 83       	std	Y+7, r25	; 0x07
    2ef4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef8:	9f 81       	ldd	r25, Y+7	; 0x07
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	69 f7       	brne	.-38     	; 0x2ed8 <Ultrasonic_u16GetDistance+0x2b4>
    2efe:	24 c0       	rjmp	.+72     	; 0x2f48 <Ultrasonic_u16GetDistance+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f00:	68 85       	ldd	r22, Y+8	; 0x08
    2f02:	79 85       	ldd	r23, Y+9	; 0x09
    2f04:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f06:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9f 83       	std	Y+7, r25	; 0x07
    2f12:	8e 83       	std	Y+6, r24	; 0x06
    2f14:	8e 81       	ldd	r24, Y+6	; 0x06
    2f16:	9f 81       	ldd	r25, Y+7	; 0x07
    2f18:	9b 83       	std	Y+3, r25	; 0x03
    2f1a:	8a 83       	std	Y+2, r24	; 0x02
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <Ultrasonic_u16GetDistance+0x2fc>
    2f24:	9b 83       	std	Y+3, r25	; 0x03
    2f26:	8a 83       	std	Y+2, r24	; 0x02
    2f28:	0f c0       	rjmp	.+30     	; 0x2f48 <Ultrasonic_u16GetDistance+0x324>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f2a:	69 89       	ldd	r22, Y+17	; 0x11
    2f2c:	7a 89       	ldd	r23, Y+18	; 0x12
    2f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f30:	9c 89       	ldd	r25, Y+20	; 0x14
    2f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	88 8b       	std	Y+16, r24	; 0x10
    2f3c:	88 89       	ldd	r24, Y+16	; 0x10
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	8a 95       	dec	r24
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <Ultrasonic_u16GetDistance+0x31e>
    2f46:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(TRIG_PORT, TRIG_PIN, LOW);
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	63 e0       	ldi	r22, 0x03	; 3
    2f4c:	40 e0       	ldi	r20, 0x00	; 0
    2f4e:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	uint16_t dis = ZERO;
    2f52:	1a aa       	std	Y+50, r1	; 0x32
    2f54:	19 aa       	std	Y+49, r1	; 0x31
    2f56:	18 c0       	rjmp	.+48     	; 0x2f88 <Ultrasonic_u16GetDistance+0x364>
	while (Flag == READ_DISTANCE)
	{
		dis = (uint16_t)t2 / 58;
    2f58:	80 91 90 01 	lds	r24, 0x0190
    2f5c:	90 91 91 01 	lds	r25, 0x0191
    2f60:	a0 91 92 01 	lds	r26, 0x0192
    2f64:	b0 91 93 01 	lds	r27, 0x0193
    2f68:	2a e3       	ldi	r18, 0x3A	; 58
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	b9 01       	movw	r22, r18
    2f6e:	0e 94 2e 23 	call	0x465c	; 0x465c <__udivmodhi4>
    2f72:	cb 01       	movw	r24, r22
    2f74:	9a ab       	std	Y+50, r25	; 0x32
    2f76:	89 ab       	std	Y+49, r24	; 0x31
		*data = dis;
    2f78:	eb a9       	ldd	r30, Y+51	; 0x33
    2f7a:	fc a9       	ldd	r31, Y+52	; 0x34
    2f7c:	89 a9       	ldd	r24, Y+49	; 0x31
    2f7e:	9a a9       	ldd	r25, Y+50	; 0x32
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	80 83       	st	Z, r24
		Flag = FALLING;
    2f84:	10 92 94 01 	sts	0x0194, r1
	_delay_us(5);
	DIO_voidSetPinValue(TRIG_PORT, TRIG_PIN, HIGH);
	_delay_us(10);
	DIO_voidSetPinValue(TRIG_PORT, TRIG_PIN, LOW);
	uint16_t dis = ZERO;
	while (Flag == READ_DISTANCE)
    2f88:	80 91 94 01 	lds	r24, 0x0194
    2f8c:	82 30       	cpi	r24, 0x02	; 2
    2f8e:	21 f3       	breq	.-56     	; 0x2f58 <Ultrasonic_u16GetDistance+0x334>
	{
		dis = (uint16_t)t2 / 58;
		*data = dis;
		Flag = FALLING;
	}
}
    2f90:	e4 96       	adiw	r28, 0x34	; 52
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <MOTOR_voidInit>:

#include "DIO.h"
#include "MOTOR.h"


void MOTOR_voidInit(void){
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
#if  NUM_OF_MOTORS == CONNECT_TWO_MOTOR
/*INIATE MOTOR ONE ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR1_PORT, MOTOR1_PIN1,OUTPUT);
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	62 e0       	ldi	r22, 0x02	; 2
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,  MOTOR1_PIN2,OUTPUT);
    2fb4:	83 e0       	ldi	r24, 0x03	; 3
    2fb6:	63 e0       	ldi	r22, 0x03	; 3
    2fb8:	41 e0       	ldi	r20, 0x01	; 1
    2fba:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,MOTOR1_ENABLE,OUTPUT);
    2fbe:	83 e0       	ldi	r24, 0x03	; 3
    2fc0:	64 e0       	ldi	r22, 0x04	; 4
    2fc2:	41 e0       	ldi	r20, 0x01	; 1
    2fc4:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>

/*INIATE MOTOR TWO ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR2_PORT, MOTOR2_PIN1,OUTPUT);
    2fc8:	83 e0       	ldi	r24, 0x03	; 3
    2fca:	66 e0       	ldi	r22, 0x06	; 6
    2fcc:	41 e0       	ldi	r20, 0x01	; 1
    2fce:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR2_PORT,  MOTOR2_PIN2,OUTPUT);
    2fd2:	83 e0       	ldi	r24, 0x03	; 3
    2fd4:	67 e0       	ldi	r22, 0x07	; 7
    2fd6:	41 e0       	ldi	r20, 0x01	; 1
    2fd8:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR2_PORT,MOTOR2_ENABLE,OUTPUT);
    2fdc:	83 e0       	ldi	r24, 0x03	; 3
    2fde:	65 e0       	ldi	r22, 0x05	; 5
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,  MOTOR1_PIN2,OUTPUT);
DIO_voidSetPinDirection(MOTOR1_PORT,MOTOR1_ENABLE,OUTPUT);

#endif
#if MOTOR_STATE ==  MOTOR_Generate_pwm
DIO_voidSetPinDirection (MOTOR_PORT, MOTOR_PIN1,OUTPUT);
    2fe6:	83 e0       	ldi	r24, 0x03	; 3
    2fe8:	65 e0       	ldi	r22, 0x05	; 5
    2fea:	41 e0       	ldi	r20, 0x01	; 1
    2fec:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,  MOTOR_PIN2,OUTPUT);
    2ff0:	83 e0       	ldi	r24, 0x03	; 3
    2ff2:	66 e0       	ldi	r22, 0x06	; 6
    2ff4:	41 e0       	ldi	r20, 0x01	; 1
    2ff6:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,MOTOR1_ENABLE,OUTPUT);
    2ffa:	83 e0       	ldi	r24, 0x03	; 3
    2ffc:	64 e0       	ldi	r22, 0x04	; 4
    2ffe:	41 e0       	ldi	r20, 0x01	; 1
    3000:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN1,HIGH);
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	65 e0       	ldi	r22, 0x05	; 5
    3008:	41 e0       	ldi	r20, 0x01	; 1
    300a:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN2,LOW);
    300e:	83 e0       	ldi	r24, 0x03	; 3
    3010:	66 e0       	ldi	r22, 0x06	; 6
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
#else
#endif
}
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	08 95       	ret

0000301e <MOTOR_voidRotateClkWise>:

void MOTOR_voidRotateClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	00 d0       	rcall	.+0      	; 0x3024 <MOTOR_voidRotateClkWise+0x6>
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	89 83       	std	Y+1, r24	; 0x01
    302a:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_uint8_ttop == 1){
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	81 f4       	brne	.+32     	; 0x3052 <MOTOR_voidRotateClkWise+0x34>
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,HIGH);
    3032:	83 e0       	ldi	r24, 0x03	; 3
    3034:	62 e0       	ldi	r22, 0x02	; 2
    3036:	41 e0       	ldi	r20, 0x01	; 1
    3038:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    303c:	83 e0       	ldi	r24, 0x03	; 3
    303e:	63 e0       	ldi	r22, 0x03	; 3
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE, HIGH);
    3046:	83 e0       	ldi	r24, 0x03	; 3
    3048:	64 e0       	ldi	r22, 0x04	; 4
    304a:	41 e0       	ldi	r20, 0x01	; 1
    304c:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    3050:	0d c0       	rjmp	.+26     	; 0x306c <MOTOR_voidRotateClkWise+0x4e>
	}
	else if(copy_uint8_ttop == 0){
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	88 23       	and	r24, r24
    3056:	51 f4       	brne	.+20     	; 0x306c <MOTOR_voidRotateClkWise+0x4e>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    3058:	83 e0       	ldi	r24, 0x03	; 3
    305a:	62 e0       	ldi	r22, 0x02	; 2
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    3062:	83 e0       	ldi	r24, 0x03	; 3
    3064:	63 e0       	ldi	r22, 0x03	; 3
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	}
	/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown== 1){
    306c:	8a 81       	ldd	r24, Y+2	; 0x02
    306e:	81 30       	cpi	r24, 0x01	; 1
    3070:	81 f4       	brne	.+32     	; 0x3092 <MOTOR_voidRotateClkWise+0x74>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,HIGH);
    3072:	83 e0       	ldi	r24, 0x03	; 3
    3074:	66 e0       	ldi	r22, 0x06	; 6
    3076:	41 e0       	ldi	r20, 0x01	; 1
    3078:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	67 e0       	ldi	r22, 0x07	; 7
    3080:	40 e0       	ldi	r20, 0x00	; 0
    3082:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_ENABLE, HIGH);
    3086:	83 e0       	ldi	r24, 0x03	; 3
    3088:	65 e0       	ldi	r22, 0x05	; 5
    308a:	41 e0       	ldi	r20, 0x01	; 1
    308c:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    3090:	0d c0       	rjmp	.+26     	; 0x30ac <MOTOR_voidRotateClkWise+0x8e>
	}
	else if(copy_uint8_tdown == 0){
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	88 23       	and	r24, r24
    3096:	51 f4       	brne	.+20     	; 0x30ac <MOTOR_voidRotateClkWise+0x8e>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN1,LOW);
    3098:	83 e0       	ldi	r24, 0x03	; 3
    309a:	66 e0       	ldi	r22, 0x06	; 6
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
    30a2:	83 e0       	ldi	r24, 0x03	; 3
    30a4:	67 e0       	ldi	r22, 0x07	; 7
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	}

}
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <MOTOR_voidRotateAntiClkWise>:
void MOTOR_voidRotateAntiClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <MOTOR_voidRotateAntiClkWise+0x6>
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	89 83       	std	Y+1, r24	; 0x01
    30c2:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_uint8_ttop == 1)
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	81 30       	cpi	r24, 0x01	; 1
    30c8:	81 f4       	brne	.+32     	; 0x30ea <MOTOR_voidRotateAntiClkWise+0x34>
	{
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    30ca:	83 e0       	ldi	r24, 0x03	; 3
    30cc:	62 e0       	ldi	r22, 0x02	; 2
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,  MOTOR1_PIN2,HIGH);
    30d4:	83 e0       	ldi	r24, 0x03	; 3
    30d6:	63 e0       	ldi	r22, 0x03	; 3
    30d8:	41 e0       	ldi	r20, 0x01	; 1
    30da:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE,HIGH);
    30de:	83 e0       	ldi	r24, 0x03	; 3
    30e0:	64 e0       	ldi	r22, 0x04	; 4
    30e2:	41 e0       	ldi	r20, 0x01	; 1
    30e4:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    30e8:	0d c0       	rjmp	.+26     	; 0x3104 <MOTOR_voidRotateAntiClkWise+0x4e>
	}
	else if(copy_uint8_ttop== 0)
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	88 23       	and	r24, r24
    30ee:	51 f4       	brne	.+20     	; 0x3104 <MOTOR_voidRotateAntiClkWise+0x4e>
	{
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    30f0:	83 e0       	ldi	r24, 0x03	; 3
    30f2:	62 e0       	ldi	r22, 0x02	; 2
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    30fa:	83 e0       	ldi	r24, 0x03	; 3
    30fc:	63 e0       	ldi	r22, 0x03	; 3
    30fe:	40 e0       	ldi	r20, 0x00	; 0
    3100:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	}
		/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown == 1)
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	81 30       	cpi	r24, 0x01	; 1
    3108:	81 f4       	brne	.+32     	; 0x312a <MOTOR_voidRotateAntiClkWise+0x74>
	{
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
    310a:	83 e0       	ldi	r24, 0x03	; 3
    310c:	66 e0       	ldi	r22, 0x06	; 6
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,HIGH);
    3114:	83 e0       	ldi	r24, 0x03	; 3
    3116:	67 e0       	ldi	r22, 0x07	; 7
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_ENABLE,HIGH);
    311e:	83 e0       	ldi	r24, 0x03	; 3
    3120:	65 e0       	ldi	r22, 0x05	; 5
    3122:	41 e0       	ldi	r20, 0x01	; 1
    3124:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    3128:	0d c0       	rjmp	.+26     	; 0x3144 <MOTOR_voidRotateAntiClkWise+0x8e>
	}


	else if(copy_uint8_tdown == 0 ){
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	88 23       	and	r24, r24
    312e:	51 f4       	brne	.+20     	; 0x3144 <MOTOR_voidRotateAntiClkWise+0x8e>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
    3130:	83 e0       	ldi	r24, 0x03	; 3
    3132:	66 e0       	ldi	r22, 0x06	; 6
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
    313a:	83 e0       	ldi	r24, 0x03	; 3
    313c:	67 e0       	ldi	r22, 0x07	; 7
    313e:	40 e0       	ldi	r20, 0x00	; 0
    3140:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	}


}
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <MOTOR_voidStop>:

void MOTOR_voidStop(void){
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN1,LOW);
    3156:	83 e0       	ldi	r24, 0x03	; 3
    3158:	62 e0       	ldi	r22, 0x02	; 2
    315a:	40 e0       	ldi	r20, 0x00	; 0
    315c:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN2,LOW);
    3160:	83 e0       	ldi	r24, 0x03	; 3
    3162:	63 e0       	ldi	r22, 0x03	; 3
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN1,LOW);
    316a:	83 e0       	ldi	r24, 0x03	; 3
    316c:	66 e0       	ldi	r22, 0x06	; 6
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN2,LOW);
    3174:	83 e0       	ldi	r24, 0x03	; 3
    3176:	67 e0       	ldi	r22, 0x07	; 7
    3178:	40 e0       	ldi	r20, 0x00	; 0
    317a:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_ENABLE,LOW);
    317e:	83 e0       	ldi	r24, 0x03	; 3
    3180:	65 e0       	ldi	r22, 0x05	; 5
    3182:	40 e0       	ldi	r20, 0x00	; 0
    3184:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
}
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <LCD_voidInit>:
 * @brief Initialize LCD Pins and LCD Mode
 * 
 * Select Mode From Config.h File LCD_enum_8BITS_MODE - LCD_enum_4BITS_MODE
 */
void LCD_voidInit(void)
{
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	61 e0       	ldi	r22, 0x01	; 1
    319a:	41 e0       	ldi	r20, 0x01	; 1
    319c:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT, LCD_E_PIN, OUTPUT);
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	63 e0       	ldi	r22, 0x03	; 3
    31a4:	41 e0       	ldi	r20, 0x01	; 1
    31a6:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT, LCD_RW_PIN, OUTPUT);
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	62 e0       	ldi	r22, 0x02	; 2
    31ae:	41 e0       	ldi	r20, 0x01	; 1
    31b0:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(LCD_E_PORT, LCD_RW_PIN, LOW);
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	62 e0       	ldi	r22, 0x02	; 2
    31b8:	40 e0       	ldi	r20, 0x00	; 0
    31ba:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	LCD_voidSendCommand(LCD_COM_CLEAR);
	_delay_ms(3);

/* 4 Bit Mode */
#elif LCD_CURRENT_MODE == LCD_4BITS_MODE
	DIO_voidSetPinDirection(LCD_4BITS_PORT, LCD_4BITS_PIN1, OUTPUT);
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	64 e0       	ldi	r22, 0x04	; 4
    31c2:	41 e0       	ldi	r20, 0x01	; 1
    31c4:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BITS_PORT, LCD_4BITS_PIN2, OUTPUT);
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	65 e0       	ldi	r22, 0x05	; 5
    31cc:	41 e0       	ldi	r20, 0x01	; 1
    31ce:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BITS_PORT, LCD_4BITS_PIN3, OUTPUT);
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	66 e0       	ldi	r22, 0x06	; 6
    31d6:	41 e0       	ldi	r20, 0x01	; 1
    31d8:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BITS_PORT, LCD_4BITS_PIN4, OUTPUT);
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	67 e0       	ldi	r22, 0x07	; 7
    31e0:	41 e0       	ldi	r20, 0x01	; 1
    31e2:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>

	//_delay_ms(35);
	if (Get_State()==first_state_delay_35ms){
    31e6:	0e 94 aa 08 	call	0x1154	; 0x1154 <Get_State>
    31ea:	81 30       	cpi	r24, 0x01	; 1
    31ec:	21 f4       	brne	.+8      	; 0x31f6 <LCD_voidInit+0x68>
		LCD_voidSendCommand(LCD_COM_HOME);
    31ee:	82 e0       	ldi	r24, 0x02	; 2
    31f0:	0e 94 1d 19 	call	0x323a	; 0x323a <LCD_voidSendCommand>
    31f4:	1f c0       	rjmp	.+62     	; 0x3234 <LCD_voidInit+0xa6>
	}
	else if(Get_State()==second_state_delay_1ms){
    31f6:	0e 94 aa 08 	call	0x1154	; 0x1154 <Get_State>
    31fa:	82 30       	cpi	r24, 0x02	; 2
    31fc:	21 f4       	brne	.+8      	; 0x3206 <LCD_voidInit+0x78>
//	_delay_ms(1);
		LCD_voidSendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    31fe:	88 e2       	ldi	r24, 0x28	; 40
    3200:	0e 94 1d 19 	call	0x323a	; 0x323a <LCD_voidSendCommand>
    3204:	17 c0       	rjmp	.+46     	; 0x3234 <LCD_voidInit+0xa6>
	}

//	_delay_ms(1);
	else if(Get_State()==third_state_delay_1ms){
    3206:	0e 94 aa 08 	call	0x1154	; 0x1154 <Get_State>
    320a:	83 30       	cpi	r24, 0x03	; 3
    320c:	21 f4       	brne	.+8      	; 0x3216 <LCD_voidInit+0x88>
	LCD_voidSendCommand(CURSOR_ON);
    320e:	8e e0       	ldi	r24, 0x0E	; 14
    3210:	0e 94 1d 19 	call	0x323a	; 0x323a <LCD_voidSendCommand>
    3214:	0f c0       	rjmp	.+30     	; 0x3234 <LCD_voidInit+0xa6>
	}
	//_delay_ms(1);
	else if(Get_State()==forth_state_delay_1ms){
    3216:	0e 94 aa 08 	call	0x1154	; 0x1154 <Get_State>
    321a:	84 30       	cpi	r24, 0x04	; 4
    321c:	21 f4       	brne	.+8      	; 0x3226 <LCD_voidInit+0x98>
	LCD_voidSendCommand(LCD_COM_CLEAR);
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	0e 94 1d 19 	call	0x323a	; 0x323a <LCD_voidSendCommand>
    3224:	07 c0       	rjmp	.+14     	; 0x3234 <LCD_voidInit+0xa6>
	}
	//_delay_ms(1);
	else if(Get_State()==fifth_state_delay_1ms){
    3226:	0e 94 aa 08 	call	0x1154	; 0x1154 <Get_State>
    322a:	85 30       	cpi	r24, 0x05	; 5
    322c:	19 f4       	brne	.+6      	; 0x3234 <LCD_voidInit+0xa6>
	LCD_voidSendCommand(LCD_COM_ENTRYMODE);
    322e:	86 e0       	ldi	r24, 0x06	; 6
    3230:	0e 94 1d 19 	call	0x323a	; 0x323a <LCD_voidSendCommand>
	}

//	_delay_ms(3);
#endif
}
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	08 95       	ret

0000323a <LCD_voidSendCommand>:
 * @brief Send Command to Lcd
 * 
 * @param command Command
 */
void LCD_voidSendCommand(uint8_t command)
{
    323a:	0f 93       	push	r16
    323c:	1f 93       	push	r17
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	c1 56       	subi	r28, 0x61	; 97
    3248:	d0 40       	sbci	r29, 0x00	; 0
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	fe 01       	movw	r30, r28
    3256:	ef 59       	subi	r30, 0x9F	; 159
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 83       	st	Z, r24
    325c:	fe 01       	movw	r30, r28
    325e:	e3 5a       	subi	r30, 0xA3	; 163
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e8       	ldi	r25, 0x80	; 128
    3266:	a7 e7       	ldi	r26, 0x77	; 119
    3268:	b4 e4       	ldi	r27, 0x44	; 68
    326a:	80 83       	st	Z, r24
    326c:	91 83       	std	Z+1, r25	; 0x01
    326e:	a2 83       	std	Z+2, r26	; 0x02
    3270:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3272:	8e 01       	movw	r16, r28
    3274:	07 5a       	subi	r16, 0xA7	; 167
    3276:	1f 4f       	sbci	r17, 0xFF	; 255
    3278:	fe 01       	movw	r30, r28
    327a:	e3 5a       	subi	r30, 0xA3	; 163
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	60 81       	ld	r22, Z
    3280:	71 81       	ldd	r23, Z+1	; 0x01
    3282:	82 81       	ldd	r24, Z+2	; 0x02
    3284:	93 81       	ldd	r25, Z+3	; 0x03
    3286:	2b ea       	ldi	r18, 0xAB	; 171
    3288:	3a ea       	ldi	r19, 0xAA	; 170
    328a:	4a e2       	ldi	r20, 0x2A	; 42
    328c:	50 e4       	ldi	r21, 0x40	; 64
    328e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	f8 01       	movw	r30, r16
    3298:	80 83       	st	Z, r24
    329a:	91 83       	std	Z+1, r25	; 0x01
    329c:	a2 83       	std	Z+2, r26	; 0x02
    329e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32a0:	fe 01       	movw	r30, r28
    32a2:	e7 5a       	subi	r30, 0xA7	; 167
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	60 81       	ld	r22, Z
    32a8:	71 81       	ldd	r23, Z+1	; 0x01
    32aa:	82 81       	ldd	r24, Z+2	; 0x02
    32ac:	93 81       	ldd	r25, Z+3	; 0x03
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e8       	ldi	r20, 0x80	; 128
    32b4:	5f e3       	ldi	r21, 0x3F	; 63
    32b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ba:	88 23       	and	r24, r24
    32bc:	34 f4       	brge	.+12     	; 0x32ca <LCD_voidSendCommand+0x90>
		__ticks = 1;
    32be:	fe 01       	movw	r30, r28
    32c0:	e8 5a       	subi	r30, 0xA8	; 168
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	80 83       	st	Z, r24
    32c8:	e0 c0       	rjmp	.+448    	; 0x348a <LCD_voidSendCommand+0x250>
	else if (__tmp > 255)
    32ca:	fe 01       	movw	r30, r28
    32cc:	e7 5a       	subi	r30, 0xA7	; 167
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	60 81       	ld	r22, Z
    32d2:	71 81       	ldd	r23, Z+1	; 0x01
    32d4:	82 81       	ldd	r24, Z+2	; 0x02
    32d6:	93 81       	ldd	r25, Z+3	; 0x03
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	4f e7       	ldi	r20, 0x7F	; 127
    32de:	53 e4       	ldi	r21, 0x43	; 67
    32e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32e4:	18 16       	cp	r1, r24
    32e6:	0c f0       	brlt	.+2      	; 0x32ea <LCD_voidSendCommand+0xb0>
    32e8:	c0 c0       	rjmp	.+384    	; 0x346a <LCD_voidSendCommand+0x230>
	{
		_delay_ms(__us / 1000.0);
    32ea:	fe 01       	movw	r30, r28
    32ec:	e3 5a       	subi	r30, 0xA3	; 163
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	4a e7       	ldi	r20, 0x7A	; 122
    32fe:	54 e4       	ldi	r21, 0x44	; 68
    3300:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	fe 01       	movw	r30, r28
    330a:	ec 5a       	subi	r30, 0xAC	; 172
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 83       	st	Z, r24
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	a2 83       	std	Z+2, r26	; 0x02
    3314:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3316:	8e 01       	movw	r16, r28
    3318:	00 5b       	subi	r16, 0xB0	; 176
    331a:	1f 4f       	sbci	r17, 0xFF	; 255
    331c:	fe 01       	movw	r30, r28
    331e:	ec 5a       	subi	r30, 0xAC	; 172
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	4a ef       	ldi	r20, 0xFA	; 250
    3330:	54 e4       	ldi	r21, 0x44	; 68
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	f8 01       	movw	r30, r16
    333c:	80 83       	st	Z, r24
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	a2 83       	std	Z+2, r26	; 0x02
    3342:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3344:	fe 01       	movw	r30, r28
    3346:	e0 5b       	subi	r30, 0xB0	; 176
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	60 81       	ld	r22, Z
    334c:	71 81       	ldd	r23, Z+1	; 0x01
    334e:	82 81       	ldd	r24, Z+2	; 0x02
    3350:	93 81       	ldd	r25, Z+3	; 0x03
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e8       	ldi	r20, 0x80	; 128
    3358:	5f e3       	ldi	r21, 0x3F	; 63
    335a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    335e:	88 23       	and	r24, r24
    3360:	44 f4       	brge	.+16     	; 0x3372 <LCD_voidSendCommand+0x138>
		__ticks = 1;
    3362:	fe 01       	movw	r30, r28
    3364:	e2 5b       	subi	r30, 0xB2	; 178
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	91 83       	std	Z+1, r25	; 0x01
    336e:	80 83       	st	Z, r24
    3370:	64 c0       	rjmp	.+200    	; 0x343a <LCD_voidSendCommand+0x200>
	else if (__tmp > 65535)
    3372:	fe 01       	movw	r30, r28
    3374:	e0 5b       	subi	r30, 0xB0	; 176
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	60 81       	ld	r22, Z
    337a:	71 81       	ldd	r23, Z+1	; 0x01
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	93 81       	ldd	r25, Z+3	; 0x03
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	3f ef       	ldi	r19, 0xFF	; 255
    3384:	4f e7       	ldi	r20, 0x7F	; 127
    3386:	57 e4       	ldi	r21, 0x47	; 71
    3388:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    338c:	18 16       	cp	r1, r24
    338e:	0c f0       	brlt	.+2      	; 0x3392 <LCD_voidSendCommand+0x158>
    3390:	43 c0       	rjmp	.+134    	; 0x3418 <LCD_voidSendCommand+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3392:	fe 01       	movw	r30, r28
    3394:	ec 5a       	subi	r30, 0xAC	; 172
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	60 81       	ld	r22, Z
    339a:	71 81       	ldd	r23, Z+1	; 0x01
    339c:	82 81       	ldd	r24, Z+2	; 0x02
    339e:	93 81       	ldd	r25, Z+3	; 0x03
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e2       	ldi	r20, 0x20	; 32
    33a6:	51 e4       	ldi	r21, 0x41	; 65
    33a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	8e 01       	movw	r16, r28
    33b2:	02 5b       	subi	r16, 0xB2	; 178
    33b4:	1f 4f       	sbci	r17, 0xFF	; 255
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	f8 01       	movw	r30, r16
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	80 83       	st	Z, r24
    33c8:	1f c0       	rjmp	.+62     	; 0x3408 <LCD_voidSendCommand+0x1ce>
    33ca:	fe 01       	movw	r30, r28
    33cc:	e4 5b       	subi	r30, 0xB4	; 180
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	88 ec       	ldi	r24, 0xC8	; 200
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33d8:	fe 01       	movw	r30, r28
    33da:	e4 5b       	subi	r30, 0xB4	; 180
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	80 81       	ld	r24, Z
    33e0:	91 81       	ldd	r25, Z+1	; 0x01
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <LCD_voidSendCommand+0x1a8>
    33e6:	fe 01       	movw	r30, r28
    33e8:	e4 5b       	subi	r30, 0xB4	; 180
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	91 83       	std	Z+1, r25	; 0x01
    33ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f0:	de 01       	movw	r26, r28
    33f2:	a2 5b       	subi	r26, 0xB2	; 178
    33f4:	bf 4f       	sbci	r27, 0xFF	; 255
    33f6:	fe 01       	movw	r30, r28
    33f8:	e2 5b       	subi	r30, 0xB2	; 178
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	80 81       	ld	r24, Z
    33fe:	91 81       	ldd	r25, Z+1	; 0x01
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	11 96       	adiw	r26, 0x01	; 1
    3404:	9c 93       	st	X, r25
    3406:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3408:	fe 01       	movw	r30, r28
    340a:	e2 5b       	subi	r30, 0xB2	; 178
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	80 81       	ld	r24, Z
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	d1 f6       	brne	.-76     	; 0x33ca <LCD_voidSendCommand+0x190>
    3416:	4b c0       	rjmp	.+150    	; 0x34ae <LCD_voidSendCommand+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3418:	8e 01       	movw	r16, r28
    341a:	02 5b       	subi	r16, 0xB2	; 178
    341c:	1f 4f       	sbci	r17, 0xFF	; 255
    341e:	fe 01       	movw	r30, r28
    3420:	e0 5b       	subi	r30, 0xB0	; 176
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	f8 01       	movw	r30, r16
    3436:	91 83       	std	Z+1, r25	; 0x01
    3438:	80 83       	st	Z, r24
    343a:	de 01       	movw	r26, r28
    343c:	a6 5b       	subi	r26, 0xB6	; 182
    343e:	bf 4f       	sbci	r27, 0xFF	; 255
    3440:	fe 01       	movw	r30, r28
    3442:	e2 5b       	subi	r30, 0xB2	; 178
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	80 81       	ld	r24, Z
    3448:	91 81       	ldd	r25, Z+1	; 0x01
    344a:	11 96       	adiw	r26, 0x01	; 1
    344c:	9c 93       	st	X, r25
    344e:	8e 93       	st	-X, r24
    3450:	fe 01       	movw	r30, r28
    3452:	e6 5b       	subi	r30, 0xB6	; 182
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	80 81       	ld	r24, Z
    3458:	91 81       	ldd	r25, Z+1	; 0x01
    345a:	01 97       	sbiw	r24, 0x01	; 1
    345c:	f1 f7       	brne	.-4      	; 0x345a <LCD_voidSendCommand+0x220>
    345e:	fe 01       	movw	r30, r28
    3460:	e6 5b       	subi	r30, 0xB6	; 182
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	80 83       	st	Z, r24
    3468:	22 c0       	rjmp	.+68     	; 0x34ae <LCD_voidSendCommand+0x274>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    346a:	8e 01       	movw	r16, r28
    346c:	08 5a       	subi	r16, 0xA8	; 168
    346e:	1f 4f       	sbci	r17, 0xFF	; 255
    3470:	fe 01       	movw	r30, r28
    3472:	e7 5a       	subi	r30, 0xA7	; 167
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	60 81       	ld	r22, Z
    3478:	71 81       	ldd	r23, Z+1	; 0x01
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	93 81       	ldd	r25, Z+3	; 0x03
    347e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	f8 01       	movw	r30, r16
    3488:	80 83       	st	Z, r24
    348a:	de 01       	movw	r26, r28
    348c:	a7 5b       	subi	r26, 0xB7	; 183
    348e:	bf 4f       	sbci	r27, 0xFF	; 255
    3490:	fe 01       	movw	r30, r28
    3492:	e8 5a       	subi	r30, 0xA8	; 168
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 81       	ld	r24, Z
    3498:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    349a:	fe 01       	movw	r30, r28
    349c:	e7 5b       	subi	r30, 0xB7	; 183
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	80 81       	ld	r24, Z
    34a2:	8a 95       	dec	r24
    34a4:	f1 f7       	brne	.-4      	; 0x34a2 <LCD_voidSendCommand+0x268>
    34a6:	fe 01       	movw	r30, r28
    34a8:	e7 5b       	subi	r30, 0xB7	; 183
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 83       	st	Z, r24
	_delay_us(990);
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	61 e0       	ldi	r22, 0x01	; 1
    34b2:	40 e0       	ldi	r20, 0x00	; 0
    34b4:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	_delay_ms(1);
	DIO_voidSetPortValue(PORTA_ID, LCD_E_PIN, LOW);

#elif LCD_CURRENT_MODE == LCD_4BITS_MODE

	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN1, GETBIT(command, PIN4));
    34b8:	fe 01       	movw	r30, r28
    34ba:	ef 59       	subi	r30, 0x9F	; 159
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	80 81       	ld	r24, Z
    34c0:	82 95       	swap	r24
    34c2:	8f 70       	andi	r24, 0x0F	; 15
    34c4:	98 2f       	mov	r25, r24
    34c6:	91 70       	andi	r25, 0x01	; 1
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	64 e0       	ldi	r22, 0x04	; 4
    34cc:	49 2f       	mov	r20, r25
    34ce:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN2, GETBIT(command,  PIN5));
    34d2:	fe 01       	movw	r30, r28
    34d4:	ef 59       	subi	r30, 0x9F	; 159
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 81       	ld	r24, Z
    34da:	82 95       	swap	r24
    34dc:	86 95       	lsr	r24
    34de:	87 70       	andi	r24, 0x07	; 7
    34e0:	98 2f       	mov	r25, r24
    34e2:	91 70       	andi	r25, 0x01	; 1
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	65 e0       	ldi	r22, 0x05	; 5
    34e8:	49 2f       	mov	r20, r25
    34ea:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN3, GETBIT(command,  PIN6));
    34ee:	fe 01       	movw	r30, r28
    34f0:	ef 59       	subi	r30, 0x9F	; 159
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 81       	ld	r24, Z
    34f6:	82 95       	swap	r24
    34f8:	86 95       	lsr	r24
    34fa:	86 95       	lsr	r24
    34fc:	83 70       	andi	r24, 0x03	; 3
    34fe:	98 2f       	mov	r25, r24
    3500:	91 70       	andi	r25, 0x01	; 1
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	66 e0       	ldi	r22, 0x06	; 6
    3506:	49 2f       	mov	r20, r25
    3508:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN4, GETBIT(command,  PIN7));
    350c:	fe 01       	movw	r30, r28
    350e:	ef 59       	subi	r30, 0x9F	; 159
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	80 81       	ld	r24, Z
    3514:	98 2f       	mov	r25, r24
    3516:	99 1f       	adc	r25, r25
    3518:	99 27       	eor	r25, r25
    351a:	99 1f       	adc	r25, r25
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	67 e0       	ldi	r22, 0x07	; 7
    3520:	49 2f       	mov	r20, r25
    3522:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, HIGH);
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	63 e0       	ldi	r22, 0x03	; 3
    352a:	41 e0       	ldi	r20, 0x01	; 1
    352c:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    3530:	fe 01       	movw	r30, r28
    3532:	eb 5b       	subi	r30, 0xBB	; 187
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e8       	ldi	r25, 0x80	; 128
    353a:	a7 e7       	ldi	r26, 0x77	; 119
    353c:	b4 e4       	ldi	r27, 0x44	; 68
    353e:	80 83       	st	Z, r24
    3540:	91 83       	std	Z+1, r25	; 0x01
    3542:	a2 83       	std	Z+2, r26	; 0x02
    3544:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3546:	8e 01       	movw	r16, r28
    3548:	0f 5b       	subi	r16, 0xBF	; 191
    354a:	1f 4f       	sbci	r17, 0xFF	; 255
    354c:	fe 01       	movw	r30, r28
    354e:	eb 5b       	subi	r30, 0xBB	; 187
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	60 81       	ld	r22, Z
    3554:	71 81       	ldd	r23, Z+1	; 0x01
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	93 81       	ldd	r25, Z+3	; 0x03
    355a:	2b ea       	ldi	r18, 0xAB	; 171
    355c:	3a ea       	ldi	r19, 0xAA	; 170
    355e:	4a e2       	ldi	r20, 0x2A	; 42
    3560:	50 e4       	ldi	r21, 0x40	; 64
    3562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	f8 01       	movw	r30, r16
    356c:	80 83       	st	Z, r24
    356e:	91 83       	std	Z+1, r25	; 0x01
    3570:	a2 83       	std	Z+2, r26	; 0x02
    3572:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3574:	fe 01       	movw	r30, r28
    3576:	ef 5b       	subi	r30, 0xBF	; 191
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	60 81       	ld	r22, Z
    357c:	71 81       	ldd	r23, Z+1	; 0x01
    357e:	82 81       	ldd	r24, Z+2	; 0x02
    3580:	93 81       	ldd	r25, Z+3	; 0x03
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e8       	ldi	r20, 0x80	; 128
    3588:	5f e3       	ldi	r21, 0x3F	; 63
    358a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358e:	88 23       	and	r24, r24
    3590:	34 f4       	brge	.+12     	; 0x359e <LCD_voidSendCommand+0x364>
		__ticks = 1;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	fe 01       	movw	r30, r28
    3596:	e0 5c       	subi	r30, 0xC0	; 192
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 83       	st	Z, r24
    359c:	9d c0       	rjmp	.+314    	; 0x36d8 <LCD_voidSendCommand+0x49e>
	else if (__tmp > 255)
    359e:	fe 01       	movw	r30, r28
    35a0:	ef 5b       	subi	r30, 0xBF	; 191
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	60 81       	ld	r22, Z
    35a6:	71 81       	ldd	r23, Z+1	; 0x01
    35a8:	82 81       	ldd	r24, Z+2	; 0x02
    35aa:	93 81       	ldd	r25, Z+3	; 0x03
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	4f e7       	ldi	r20, 0x7F	; 127
    35b2:	53 e4       	ldi	r21, 0x43	; 67
    35b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b8:	18 16       	cp	r1, r24
    35ba:	0c f0       	brlt	.+2      	; 0x35be <LCD_voidSendCommand+0x384>
    35bc:	7e c0       	rjmp	.+252    	; 0x36ba <LCD_voidSendCommand+0x480>
	{
		_delay_ms(__us / 1000.0);
    35be:	fe 01       	movw	r30, r28
    35c0:	eb 5b       	subi	r30, 0xBB	; 187
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	60 81       	ld	r22, Z
    35c6:	71 81       	ldd	r23, Z+1	; 0x01
    35c8:	82 81       	ldd	r24, Z+2	; 0x02
    35ca:	93 81       	ldd	r25, Z+3	; 0x03
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	4a e7       	ldi	r20, 0x7A	; 122
    35d2:	54 e4       	ldi	r21, 0x44	; 68
    35d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	8c af       	std	Y+60, r24	; 0x3c
    35de:	9d af       	std	Y+61, r25	; 0x3d
    35e0:	ae af       	std	Y+62, r26	; 0x3e
    35e2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    35e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    35e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    35ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	4a ef       	ldi	r20, 0xFA	; 250
    35f2:	54 e4       	ldi	r21, 0x44	; 68
    35f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	88 af       	std	Y+56, r24	; 0x38
    35fe:	99 af       	std	Y+57, r25	; 0x39
    3600:	aa af       	std	Y+58, r26	; 0x3a
    3602:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3604:	68 ad       	ldd	r22, Y+56	; 0x38
    3606:	79 ad       	ldd	r23, Y+57	; 0x39
    3608:	8a ad       	ldd	r24, Y+58	; 0x3a
    360a:	9b ad       	ldd	r25, Y+59	; 0x3b
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e8       	ldi	r20, 0x80	; 128
    3612:	5f e3       	ldi	r21, 0x3F	; 63
    3614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3618:	88 23       	and	r24, r24
    361a:	2c f4       	brge	.+10     	; 0x3626 <LCD_voidSendCommand+0x3ec>
		__ticks = 1;
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9f ab       	std	Y+55, r25	; 0x37
    3622:	8e ab       	std	Y+54, r24	; 0x36
    3624:	3f c0       	rjmp	.+126    	; 0x36a4 <LCD_voidSendCommand+0x46a>
	else if (__tmp > 65535)
    3626:	68 ad       	ldd	r22, Y+56	; 0x38
    3628:	79 ad       	ldd	r23, Y+57	; 0x39
    362a:	8a ad       	ldd	r24, Y+58	; 0x3a
    362c:	9b ad       	ldd	r25, Y+59	; 0x3b
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	3f ef       	ldi	r19, 0xFF	; 255
    3632:	4f e7       	ldi	r20, 0x7F	; 127
    3634:	57 e4       	ldi	r21, 0x47	; 71
    3636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    363a:	18 16       	cp	r1, r24
    363c:	4c f5       	brge	.+82     	; 0x3690 <LCD_voidSendCommand+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3640:	7d ad       	ldd	r23, Y+61	; 0x3d
    3642:	8e ad       	ldd	r24, Y+62	; 0x3e
    3644:	9f ad       	ldd	r25, Y+63	; 0x3f
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e2       	ldi	r20, 0x20	; 32
    364c:	51 e4       	ldi	r21, 0x41	; 65
    364e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	9f ab       	std	Y+55, r25	; 0x37
    3664:	8e ab       	std	Y+54, r24	; 0x36
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <LCD_voidSendCommand+0x44c>
    3668:	88 ec       	ldi	r24, 0xC8	; 200
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	9d ab       	std	Y+53, r25	; 0x35
    366e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3670:	8c a9       	ldd	r24, Y+52	; 0x34
    3672:	9d a9       	ldd	r25, Y+53	; 0x35
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <LCD_voidSendCommand+0x43a>
    3678:	9d ab       	std	Y+53, r25	; 0x35
    367a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367c:	8e a9       	ldd	r24, Y+54	; 0x36
    367e:	9f a9       	ldd	r25, Y+55	; 0x37
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	9f ab       	std	Y+55, r25	; 0x37
    3684:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3686:	8e a9       	ldd	r24, Y+54	; 0x36
    3688:	9f a9       	ldd	r25, Y+55	; 0x37
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	69 f7       	brne	.-38     	; 0x3668 <LCD_voidSendCommand+0x42e>
    368e:	2d c0       	rjmp	.+90     	; 0x36ea <LCD_voidSendCommand+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3690:	68 ad       	ldd	r22, Y+56	; 0x38
    3692:	79 ad       	ldd	r23, Y+57	; 0x39
    3694:	8a ad       	ldd	r24, Y+58	; 0x3a
    3696:	9b ad       	ldd	r25, Y+59	; 0x3b
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9f ab       	std	Y+55, r25	; 0x37
    36a2:	8e ab       	std	Y+54, r24	; 0x36
    36a4:	8e a9       	ldd	r24, Y+54	; 0x36
    36a6:	9f a9       	ldd	r25, Y+55	; 0x37
    36a8:	9b ab       	std	Y+51, r25	; 0x33
    36aa:	8a ab       	std	Y+50, r24	; 0x32
    36ac:	8a a9       	ldd	r24, Y+50	; 0x32
    36ae:	9b a9       	ldd	r25, Y+51	; 0x33
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <LCD_voidSendCommand+0x476>
    36b4:	9b ab       	std	Y+51, r25	; 0x33
    36b6:	8a ab       	std	Y+50, r24	; 0x32
    36b8:	18 c0       	rjmp	.+48     	; 0x36ea <LCD_voidSendCommand+0x4b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    36ba:	fe 01       	movw	r30, r28
    36bc:	ef 5b       	subi	r30, 0xBF	; 191
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	fe 01       	movw	r30, r28
    36d2:	e0 5c       	subi	r30, 0xC0	; 192
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 83       	st	Z, r24
    36d8:	fe 01       	movw	r30, r28
    36da:	e0 5c       	subi	r30, 0xC0	; 192
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 81       	ld	r24, Z
    36e0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36e2:	89 a9       	ldd	r24, Y+49	; 0x31
    36e4:	8a 95       	dec	r24
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <LCD_voidSendCommand+0x4aa>
    36e8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(990);
	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, LOW);
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	63 e0       	ldi	r22, 0x03	; 3
    36ee:	40 e0       	ldi	r20, 0x00	; 0
    36f0:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	90 e8       	ldi	r25, 0x80	; 128
    36f8:	a7 e7       	ldi	r26, 0x77	; 119
    36fa:	b4 e4       	ldi	r27, 0x44	; 68
    36fc:	8d a7       	std	Y+45, r24	; 0x2d
    36fe:	9e a7       	std	Y+46, r25	; 0x2e
    3700:	af a7       	std	Y+47, r26	; 0x2f
    3702:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3704:	6d a5       	ldd	r22, Y+45	; 0x2d
    3706:	7e a5       	ldd	r23, Y+46	; 0x2e
    3708:	8f a5       	ldd	r24, Y+47	; 0x2f
    370a:	98 a9       	ldd	r25, Y+48	; 0x30
    370c:	2b ea       	ldi	r18, 0xAB	; 171
    370e:	3a ea       	ldi	r19, 0xAA	; 170
    3710:	4a e2       	ldi	r20, 0x2A	; 42
    3712:	50 e4       	ldi	r21, 0x40	; 64
    3714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	89 a7       	std	Y+41, r24	; 0x29
    371e:	9a a7       	std	Y+42, r25	; 0x2a
    3720:	ab a7       	std	Y+43, r26	; 0x2b
    3722:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3724:	69 a5       	ldd	r22, Y+41	; 0x29
    3726:	7a a5       	ldd	r23, Y+42	; 0x2a
    3728:	8b a5       	ldd	r24, Y+43	; 0x2b
    372a:	9c a5       	ldd	r25, Y+44	; 0x2c
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e8       	ldi	r20, 0x80	; 128
    3732:	5f e3       	ldi	r21, 0x3F	; 63
    3734:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3738:	88 23       	and	r24, r24
    373a:	1c f4       	brge	.+6      	; 0x3742 <LCD_voidSendCommand+0x508>
		__ticks = 1;
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	88 a7       	std	Y+40, r24	; 0x28
    3740:	91 c0       	rjmp	.+290    	; 0x3864 <LCD_voidSendCommand+0x62a>
	else if (__tmp > 255)
    3742:	69 a5       	ldd	r22, Y+41	; 0x29
    3744:	7a a5       	ldd	r23, Y+42	; 0x2a
    3746:	8b a5       	ldd	r24, Y+43	; 0x2b
    3748:	9c a5       	ldd	r25, Y+44	; 0x2c
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	4f e7       	ldi	r20, 0x7F	; 127
    3750:	53 e4       	ldi	r21, 0x43	; 67
    3752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3756:	18 16       	cp	r1, r24
    3758:	0c f0       	brlt	.+2      	; 0x375c <LCD_voidSendCommand+0x522>
    375a:	7b c0       	rjmp	.+246    	; 0x3852 <LCD_voidSendCommand+0x618>
	{
		_delay_ms(__us / 1000.0);
    375c:	6d a5       	ldd	r22, Y+45	; 0x2d
    375e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3760:	8f a5       	ldd	r24, Y+47	; 0x2f
    3762:	98 a9       	ldd	r25, Y+48	; 0x30
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	4a e7       	ldi	r20, 0x7A	; 122
    376a:	54 e4       	ldi	r21, 0x44	; 68
    376c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	8c a3       	std	Y+36, r24	; 0x24
    3776:	9d a3       	std	Y+37, r25	; 0x25
    3778:	ae a3       	std	Y+38, r26	; 0x26
    377a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377c:	6c a1       	ldd	r22, Y+36	; 0x24
    377e:	7d a1       	ldd	r23, Y+37	; 0x25
    3780:	8e a1       	ldd	r24, Y+38	; 0x26
    3782:	9f a1       	ldd	r25, Y+39	; 0x27
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	4a ef       	ldi	r20, 0xFA	; 250
    378a:	54 e4       	ldi	r21, 0x44	; 68
    378c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	88 a3       	std	Y+32, r24	; 0x20
    3796:	99 a3       	std	Y+33, r25	; 0x21
    3798:	aa a3       	std	Y+34, r26	; 0x22
    379a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    379c:	68 a1       	ldd	r22, Y+32	; 0x20
    379e:	79 a1       	ldd	r23, Y+33	; 0x21
    37a0:	8a a1       	ldd	r24, Y+34	; 0x22
    37a2:	9b a1       	ldd	r25, Y+35	; 0x23
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 e8       	ldi	r20, 0x80	; 128
    37aa:	5f e3       	ldi	r21, 0x3F	; 63
    37ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37b0:	88 23       	and	r24, r24
    37b2:	2c f4       	brge	.+10     	; 0x37be <LCD_voidSendCommand+0x584>
		__ticks = 1;
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	9f 8f       	std	Y+31, r25	; 0x1f
    37ba:	8e 8f       	std	Y+30, r24	; 0x1e
    37bc:	3f c0       	rjmp	.+126    	; 0x383c <LCD_voidSendCommand+0x602>
	else if (__tmp > 65535)
    37be:	68 a1       	ldd	r22, Y+32	; 0x20
    37c0:	79 a1       	ldd	r23, Y+33	; 0x21
    37c2:	8a a1       	ldd	r24, Y+34	; 0x22
    37c4:	9b a1       	ldd	r25, Y+35	; 0x23
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	3f ef       	ldi	r19, 0xFF	; 255
    37ca:	4f e7       	ldi	r20, 0x7F	; 127
    37cc:	57 e4       	ldi	r21, 0x47	; 71
    37ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37d2:	18 16       	cp	r1, r24
    37d4:	4c f5       	brge	.+82     	; 0x3828 <LCD_voidSendCommand+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d6:	6c a1       	ldd	r22, Y+36	; 0x24
    37d8:	7d a1       	ldd	r23, Y+37	; 0x25
    37da:	8e a1       	ldd	r24, Y+38	; 0x26
    37dc:	9f a1       	ldd	r25, Y+39	; 0x27
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e2       	ldi	r20, 0x20	; 32
    37e4:	51 e4       	ldi	r21, 0x41	; 65
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	bc 01       	movw	r22, r24
    37f0:	cd 01       	movw	r24, r26
    37f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	9f 8f       	std	Y+31, r25	; 0x1f
    37fc:	8e 8f       	std	Y+30, r24	; 0x1e
    37fe:	0f c0       	rjmp	.+30     	; 0x381e <LCD_voidSendCommand+0x5e4>
    3800:	88 ec       	ldi	r24, 0xC8	; 200
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	9d 8f       	std	Y+29, r25	; 0x1d
    3806:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3808:	8c 8d       	ldd	r24, Y+28	; 0x1c
    380a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	f1 f7       	brne	.-4      	; 0x380c <LCD_voidSendCommand+0x5d2>
    3810:	9d 8f       	std	Y+29, r25	; 0x1d
    3812:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3814:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3816:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3818:	01 97       	sbiw	r24, 0x01	; 1
    381a:	9f 8f       	std	Y+31, r25	; 0x1f
    381c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3820:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3822:	00 97       	sbiw	r24, 0x00	; 0
    3824:	69 f7       	brne	.-38     	; 0x3800 <LCD_voidSendCommand+0x5c6>
    3826:	24 c0       	rjmp	.+72     	; 0x3870 <LCD_voidSendCommand+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3828:	68 a1       	ldd	r22, Y+32	; 0x20
    382a:	79 a1       	ldd	r23, Y+33	; 0x21
    382c:	8a a1       	ldd	r24, Y+34	; 0x22
    382e:	9b a1       	ldd	r25, Y+35	; 0x23
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	9f 8f       	std	Y+31, r25	; 0x1f
    383a:	8e 8f       	std	Y+30, r24	; 0x1e
    383c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    383e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3840:	9b 8f       	std	Y+27, r25	; 0x1b
    3842:	8a 8f       	std	Y+26, r24	; 0x1a
    3844:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3846:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3848:	01 97       	sbiw	r24, 0x01	; 1
    384a:	f1 f7       	brne	.-4      	; 0x3848 <LCD_voidSendCommand+0x60e>
    384c:	9b 8f       	std	Y+27, r25	; 0x1b
    384e:	8a 8f       	std	Y+26, r24	; 0x1a
    3850:	0f c0       	rjmp	.+30     	; 0x3870 <LCD_voidSendCommand+0x636>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3852:	69 a5       	ldd	r22, Y+41	; 0x29
    3854:	7a a5       	ldd	r23, Y+42	; 0x2a
    3856:	8b a5       	ldd	r24, Y+43	; 0x2b
    3858:	9c a5       	ldd	r25, Y+44	; 0x2c
    385a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	88 a7       	std	Y+40, r24	; 0x28
    3864:	88 a5       	ldd	r24, Y+40	; 0x28
    3866:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3868:	89 8d       	ldd	r24, Y+25	; 0x19
    386a:	8a 95       	dec	r24
    386c:	f1 f7       	brne	.-4      	; 0x386a <LCD_voidSendCommand+0x630>
    386e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(990);
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN1, GETBIT(command, PIN0));
    3870:	fe 01       	movw	r30, r28
    3872:	ef 59       	subi	r30, 0x9F	; 159
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	80 81       	ld	r24, Z
    3878:	98 2f       	mov	r25, r24
    387a:	91 70       	andi	r25, 0x01	; 1
    387c:	80 e0       	ldi	r24, 0x00	; 0
    387e:	64 e0       	ldi	r22, 0x04	; 4
    3880:	49 2f       	mov	r20, r25
    3882:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN2, GETBIT(command, PIN1));
    3886:	fe 01       	movw	r30, r28
    3888:	ef 59       	subi	r30, 0x9F	; 159
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	80 81       	ld	r24, Z
    388e:	86 95       	lsr	r24
    3890:	98 2f       	mov	r25, r24
    3892:	91 70       	andi	r25, 0x01	; 1
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	65 e0       	ldi	r22, 0x05	; 5
    3898:	49 2f       	mov	r20, r25
    389a:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN3, GETBIT(command, PIN2));
    389e:	fe 01       	movw	r30, r28
    38a0:	ef 59       	subi	r30, 0x9F	; 159
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	86 95       	lsr	r24
    38a8:	86 95       	lsr	r24
    38aa:	98 2f       	mov	r25, r24
    38ac:	91 70       	andi	r25, 0x01	; 1
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	66 e0       	ldi	r22, 0x06	; 6
    38b2:	49 2f       	mov	r20, r25
    38b4:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN4, GETBIT(command, PIN3));
    38b8:	fe 01       	movw	r30, r28
    38ba:	ef 59       	subi	r30, 0x9F	; 159
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	80 81       	ld	r24, Z
    38c0:	86 95       	lsr	r24
    38c2:	86 95       	lsr	r24
    38c4:	86 95       	lsr	r24
    38c6:	98 2f       	mov	r25, r24
    38c8:	91 70       	andi	r25, 0x01	; 1
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	67 e0       	ldi	r22, 0x07	; 7
    38ce:	49 2f       	mov	r20, r25
    38d0:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, HIGH);
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	63 e0       	ldi	r22, 0x03	; 3
    38d8:	41 e0       	ldi	r20, 0x01	; 1
    38da:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	90 e8       	ldi	r25, 0x80	; 128
    38e2:	a7 e7       	ldi	r26, 0x77	; 119
    38e4:	b4 e4       	ldi	r27, 0x44	; 68
    38e6:	8d 8b       	std	Y+21, r24	; 0x15
    38e8:	9e 8b       	std	Y+22, r25	; 0x16
    38ea:	af 8b       	std	Y+23, r26	; 0x17
    38ec:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38ee:	6d 89       	ldd	r22, Y+21	; 0x15
    38f0:	7e 89       	ldd	r23, Y+22	; 0x16
    38f2:	8f 89       	ldd	r24, Y+23	; 0x17
    38f4:	98 8d       	ldd	r25, Y+24	; 0x18
    38f6:	2b ea       	ldi	r18, 0xAB	; 171
    38f8:	3a ea       	ldi	r19, 0xAA	; 170
    38fa:	4a e2       	ldi	r20, 0x2A	; 42
    38fc:	50 e4       	ldi	r21, 0x40	; 64
    38fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	89 8b       	std	Y+17, r24	; 0x11
    3908:	9a 8b       	std	Y+18, r25	; 0x12
    390a:	ab 8b       	std	Y+19, r26	; 0x13
    390c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    390e:	69 89       	ldd	r22, Y+17	; 0x11
    3910:	7a 89       	ldd	r23, Y+18	; 0x12
    3912:	8b 89       	ldd	r24, Y+19	; 0x13
    3914:	9c 89       	ldd	r25, Y+20	; 0x14
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	40 e8       	ldi	r20, 0x80	; 128
    391c:	5f e3       	ldi	r21, 0x3F	; 63
    391e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3922:	88 23       	and	r24, r24
    3924:	1c f4       	brge	.+6      	; 0x392c <LCD_voidSendCommand+0x6f2>
		__ticks = 1;
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	88 8b       	std	Y+16, r24	; 0x10
    392a:	91 c0       	rjmp	.+290    	; 0x3a4e <LCD_voidSendCommand+0x814>
	else if (__tmp > 255)
    392c:	69 89       	ldd	r22, Y+17	; 0x11
    392e:	7a 89       	ldd	r23, Y+18	; 0x12
    3930:	8b 89       	ldd	r24, Y+19	; 0x13
    3932:	9c 89       	ldd	r25, Y+20	; 0x14
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	4f e7       	ldi	r20, 0x7F	; 127
    393a:	53 e4       	ldi	r21, 0x43	; 67
    393c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3940:	18 16       	cp	r1, r24
    3942:	0c f0       	brlt	.+2      	; 0x3946 <LCD_voidSendCommand+0x70c>
    3944:	7b c0       	rjmp	.+246    	; 0x3a3c <LCD_voidSendCommand+0x802>
	{
		_delay_ms(__us / 1000.0);
    3946:	6d 89       	ldd	r22, Y+21	; 0x15
    3948:	7e 89       	ldd	r23, Y+22	; 0x16
    394a:	8f 89       	ldd	r24, Y+23	; 0x17
    394c:	98 8d       	ldd	r25, Y+24	; 0x18
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	4a e7       	ldi	r20, 0x7A	; 122
    3954:	54 e4       	ldi	r21, 0x44	; 68
    3956:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	8c 87       	std	Y+12, r24	; 0x0c
    3960:	9d 87       	std	Y+13, r25	; 0x0d
    3962:	ae 87       	std	Y+14, r26	; 0x0e
    3964:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3966:	6c 85       	ldd	r22, Y+12	; 0x0c
    3968:	7d 85       	ldd	r23, Y+13	; 0x0d
    396a:	8e 85       	ldd	r24, Y+14	; 0x0e
    396c:	9f 85       	ldd	r25, Y+15	; 0x0f
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	4a ef       	ldi	r20, 0xFA	; 250
    3974:	54 e4       	ldi	r21, 0x44	; 68
    3976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	88 87       	std	Y+8, r24	; 0x08
    3980:	99 87       	std	Y+9, r25	; 0x09
    3982:	aa 87       	std	Y+10, r26	; 0x0a
    3984:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3986:	68 85       	ldd	r22, Y+8	; 0x08
    3988:	79 85       	ldd	r23, Y+9	; 0x09
    398a:	8a 85       	ldd	r24, Y+10	; 0x0a
    398c:	9b 85       	ldd	r25, Y+11	; 0x0b
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	40 e8       	ldi	r20, 0x80	; 128
    3994:	5f e3       	ldi	r21, 0x3F	; 63
    3996:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    399a:	88 23       	and	r24, r24
    399c:	2c f4       	brge	.+10     	; 0x39a8 <LCD_voidSendCommand+0x76e>
		__ticks = 1;
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	9f 83       	std	Y+7, r25	; 0x07
    39a4:	8e 83       	std	Y+6, r24	; 0x06
    39a6:	3f c0       	rjmp	.+126    	; 0x3a26 <LCD_voidSendCommand+0x7ec>
	else if (__tmp > 65535)
    39a8:	68 85       	ldd	r22, Y+8	; 0x08
    39aa:	79 85       	ldd	r23, Y+9	; 0x09
    39ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    39ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	3f ef       	ldi	r19, 0xFF	; 255
    39b4:	4f e7       	ldi	r20, 0x7F	; 127
    39b6:	57 e4       	ldi	r21, 0x47	; 71
    39b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39bc:	18 16       	cp	r1, r24
    39be:	4c f5       	brge	.+82     	; 0x3a12 <LCD_voidSendCommand+0x7d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    39c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    39c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    39c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	40 e2       	ldi	r20, 0x20	; 32
    39ce:	51 e4       	ldi	r21, 0x41	; 65
    39d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	bc 01       	movw	r22, r24
    39da:	cd 01       	movw	r24, r26
    39dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	9f 83       	std	Y+7, r25	; 0x07
    39e6:	8e 83       	std	Y+6, r24	; 0x06
    39e8:	0f c0       	rjmp	.+30     	; 0x3a08 <LCD_voidSendCommand+0x7ce>
    39ea:	88 ec       	ldi	r24, 0xC8	; 200
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	9d 83       	std	Y+5, r25	; 0x05
    39f0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39f2:	8c 81       	ldd	r24, Y+4	; 0x04
    39f4:	9d 81       	ldd	r25, Y+5	; 0x05
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	f1 f7       	brne	.-4      	; 0x39f6 <LCD_voidSendCommand+0x7bc>
    39fa:	9d 83       	std	Y+5, r25	; 0x05
    39fc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3a00:	9f 81       	ldd	r25, Y+7	; 0x07
    3a02:	01 97       	sbiw	r24, 0x01	; 1
    3a04:	9f 83       	std	Y+7, r25	; 0x07
    3a06:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a08:	8e 81       	ldd	r24, Y+6	; 0x06
    3a0a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a0c:	00 97       	sbiw	r24, 0x00	; 0
    3a0e:	69 f7       	brne	.-38     	; 0x39ea <LCD_voidSendCommand+0x7b0>
    3a10:	24 c0       	rjmp	.+72     	; 0x3a5a <LCD_voidSendCommand+0x820>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a12:	68 85       	ldd	r22, Y+8	; 0x08
    3a14:	79 85       	ldd	r23, Y+9	; 0x09
    3a16:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a18:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	9f 83       	std	Y+7, r25	; 0x07
    3a24:	8e 83       	std	Y+6, r24	; 0x06
    3a26:	8e 81       	ldd	r24, Y+6	; 0x06
    3a28:	9f 81       	ldd	r25, Y+7	; 0x07
    3a2a:	9b 83       	std	Y+3, r25	; 0x03
    3a2c:	8a 83       	std	Y+2, r24	; 0x02
    3a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a30:	9b 81       	ldd	r25, Y+3	; 0x03
    3a32:	01 97       	sbiw	r24, 0x01	; 1
    3a34:	f1 f7       	brne	.-4      	; 0x3a32 <LCD_voidSendCommand+0x7f8>
    3a36:	9b 83       	std	Y+3, r25	; 0x03
    3a38:	8a 83       	std	Y+2, r24	; 0x02
    3a3a:	0f c0       	rjmp	.+30     	; 0x3a5a <LCD_voidSendCommand+0x820>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a3c:	69 89       	ldd	r22, Y+17	; 0x11
    3a3e:	7a 89       	ldd	r23, Y+18	; 0x12
    3a40:	8b 89       	ldd	r24, Y+19	; 0x13
    3a42:	9c 89       	ldd	r25, Y+20	; 0x14
    3a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a48:	dc 01       	movw	r26, r24
    3a4a:	cb 01       	movw	r24, r22
    3a4c:	88 8b       	std	Y+16, r24	; 0x10
    3a4e:	88 89       	ldd	r24, Y+16	; 0x10
    3a50:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	8a 95       	dec	r24
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <LCD_voidSendCommand+0x81a>
    3a58:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(990);
	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, LOW);
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	63 e0       	ldi	r22, 0x03	; 3
    3a5e:	40 e0       	ldi	r20, 0x00	; 0
    3a60:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>

#endif
}
    3a64:	cf 59       	subi	r28, 0x9F	; 159
    3a66:	df 4f       	sbci	r29, 0xFF	; 255
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	f8 94       	cli
    3a6c:	de bf       	out	0x3e, r29	; 62
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	cd bf       	out	0x3d, r28	; 61
    3a72:	cf 91       	pop	r28
    3a74:	df 91       	pop	r29
    3a76:	1f 91       	pop	r17
    3a78:	0f 91       	pop	r16
    3a7a:	08 95       	ret

00003a7c <LCD_voidWriteChar>:
 * @brief Write One Byte On Lcd
 * 
 * @param ch Byte to write
 */
void LCD_voidWriteChar(uint8_t ch)
{
    3a7c:	0f 93       	push	r16
    3a7e:	1f 93       	push	r17
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	c9 54       	subi	r28, 0x49	; 73
    3a8a:	d0 40       	sbci	r29, 0x00	; 0
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	f8 94       	cli
    3a90:	de bf       	out	0x3e, r29	; 62
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	cd bf       	out	0x3d, r28	; 61
    3a96:	fe 01       	movw	r30, r28
    3a98:	e7 5b       	subi	r30, 0xB7	; 183
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	80 83       	st	Z, r24
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	eb 5b       	subi	r30, 0xBB	; 187
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	90 e8       	ldi	r25, 0x80	; 128
    3aa8:	a7 e7       	ldi	r26, 0x77	; 119
    3aaa:	b4 e4       	ldi	r27, 0x44	; 68
    3aac:	80 83       	st	Z, r24
    3aae:	91 83       	std	Z+1, r25	; 0x01
    3ab0:	a2 83       	std	Z+2, r26	; 0x02
    3ab2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ab4:	8e 01       	movw	r16, r28
    3ab6:	0f 5b       	subi	r16, 0xBF	; 191
    3ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aba:	fe 01       	movw	r30, r28
    3abc:	eb 5b       	subi	r30, 0xBB	; 187
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	60 81       	ld	r22, Z
    3ac2:	71 81       	ldd	r23, Z+1	; 0x01
    3ac4:	82 81       	ldd	r24, Z+2	; 0x02
    3ac6:	93 81       	ldd	r25, Z+3	; 0x03
    3ac8:	2b ea       	ldi	r18, 0xAB	; 171
    3aca:	3a ea       	ldi	r19, 0xAA	; 170
    3acc:	4a e2       	ldi	r20, 0x2A	; 42
    3ace:	50 e4       	ldi	r21, 0x40	; 64
    3ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	f8 01       	movw	r30, r16
    3ada:	80 83       	st	Z, r24
    3adc:	91 83       	std	Z+1, r25	; 0x01
    3ade:	a2 83       	std	Z+2, r26	; 0x02
    3ae0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	ef 5b       	subi	r30, 0xBF	; 191
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	60 81       	ld	r22, Z
    3aea:	71 81       	ldd	r23, Z+1	; 0x01
    3aec:	82 81       	ldd	r24, Z+2	; 0x02
    3aee:	93 81       	ldd	r25, Z+3	; 0x03
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e8       	ldi	r20, 0x80	; 128
    3af6:	5f e3       	ldi	r21, 0x3F	; 63
    3af8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3afc:	88 23       	and	r24, r24
    3afe:	34 f4       	brge	.+12     	; 0x3b0c <LCD_voidWriteChar+0x90>
		__ticks = 1;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	fe 01       	movw	r30, r28
    3b04:	e0 5c       	subi	r30, 0xC0	; 192
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	80 83       	st	Z, r24
    3b0a:	9d c0       	rjmp	.+314    	; 0x3c46 <LCD_voidWriteChar+0x1ca>
	else if (__tmp > 255)
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	ef 5b       	subi	r30, 0xBF	; 191
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	60 81       	ld	r22, Z
    3b14:	71 81       	ldd	r23, Z+1	; 0x01
    3b16:	82 81       	ldd	r24, Z+2	; 0x02
    3b18:	93 81       	ldd	r25, Z+3	; 0x03
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	4f e7       	ldi	r20, 0x7F	; 127
    3b20:	53 e4       	ldi	r21, 0x43	; 67
    3b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b26:	18 16       	cp	r1, r24
    3b28:	0c f0       	brlt	.+2      	; 0x3b2c <LCD_voidWriteChar+0xb0>
    3b2a:	7e c0       	rjmp	.+252    	; 0x3c28 <LCD_voidWriteChar+0x1ac>
	{
		_delay_ms(__us / 1000.0);
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	eb 5b       	subi	r30, 0xBB	; 187
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	60 81       	ld	r22, Z
    3b34:	71 81       	ldd	r23, Z+1	; 0x01
    3b36:	82 81       	ldd	r24, Z+2	; 0x02
    3b38:	93 81       	ldd	r25, Z+3	; 0x03
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	4a e7       	ldi	r20, 0x7A	; 122
    3b40:	54 e4       	ldi	r21, 0x44	; 68
    3b42:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	8c af       	std	Y+60, r24	; 0x3c
    3b4c:	9d af       	std	Y+61, r25	; 0x3d
    3b4e:	ae af       	std	Y+62, r26	; 0x3e
    3b50:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b52:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b54:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b56:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b58:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b5a:	20 e0       	ldi	r18, 0x00	; 0
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	4a ef       	ldi	r20, 0xFA	; 250
    3b60:	54 e4       	ldi	r21, 0x44	; 68
    3b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b66:	dc 01       	movw	r26, r24
    3b68:	cb 01       	movw	r24, r22
    3b6a:	88 af       	std	Y+56, r24	; 0x38
    3b6c:	99 af       	std	Y+57, r25	; 0x39
    3b6e:	aa af       	std	Y+58, r26	; 0x3a
    3b70:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3b72:	68 ad       	ldd	r22, Y+56	; 0x38
    3b74:	79 ad       	ldd	r23, Y+57	; 0x39
    3b76:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b78:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b7a:	20 e0       	ldi	r18, 0x00	; 0
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	40 e8       	ldi	r20, 0x80	; 128
    3b80:	5f e3       	ldi	r21, 0x3F	; 63
    3b82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b86:	88 23       	and	r24, r24
    3b88:	2c f4       	brge	.+10     	; 0x3b94 <LCD_voidWriteChar+0x118>
		__ticks = 1;
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	9f ab       	std	Y+55, r25	; 0x37
    3b90:	8e ab       	std	Y+54, r24	; 0x36
    3b92:	3f c0       	rjmp	.+126    	; 0x3c12 <LCD_voidWriteChar+0x196>
	else if (__tmp > 65535)
    3b94:	68 ad       	ldd	r22, Y+56	; 0x38
    3b96:	79 ad       	ldd	r23, Y+57	; 0x39
    3b98:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b9a:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	3f ef       	ldi	r19, 0xFF	; 255
    3ba0:	4f e7       	ldi	r20, 0x7F	; 127
    3ba2:	57 e4       	ldi	r21, 0x47	; 71
    3ba4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ba8:	18 16       	cp	r1, r24
    3baa:	4c f5       	brge	.+82     	; 0x3bfe <LCD_voidWriteChar+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bac:	6c ad       	ldd	r22, Y+60	; 0x3c
    3bae:	7d ad       	ldd	r23, Y+61	; 0x3d
    3bb0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3bb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	40 e2       	ldi	r20, 0x20	; 32
    3bba:	51 e4       	ldi	r21, 0x41	; 65
    3bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	bc 01       	movw	r22, r24
    3bc6:	cd 01       	movw	r24, r26
    3bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	9f ab       	std	Y+55, r25	; 0x37
    3bd2:	8e ab       	std	Y+54, r24	; 0x36
    3bd4:	0f c0       	rjmp	.+30     	; 0x3bf4 <LCD_voidWriteChar+0x178>
    3bd6:	88 ec       	ldi	r24, 0xC8	; 200
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	9d ab       	std	Y+53, r25	; 0x35
    3bdc:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bde:	8c a9       	ldd	r24, Y+52	; 0x34
    3be0:	9d a9       	ldd	r25, Y+53	; 0x35
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	f1 f7       	brne	.-4      	; 0x3be2 <LCD_voidWriteChar+0x166>
    3be6:	9d ab       	std	Y+53, r25	; 0x35
    3be8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bea:	8e a9       	ldd	r24, Y+54	; 0x36
    3bec:	9f a9       	ldd	r25, Y+55	; 0x37
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	9f ab       	std	Y+55, r25	; 0x37
    3bf2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bf4:	8e a9       	ldd	r24, Y+54	; 0x36
    3bf6:	9f a9       	ldd	r25, Y+55	; 0x37
    3bf8:	00 97       	sbiw	r24, 0x00	; 0
    3bfa:	69 f7       	brne	.-38     	; 0x3bd6 <LCD_voidWriteChar+0x15a>
    3bfc:	2d c0       	rjmp	.+90     	; 0x3c58 <LCD_voidWriteChar+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bfe:	68 ad       	ldd	r22, Y+56	; 0x38
    3c00:	79 ad       	ldd	r23, Y+57	; 0x39
    3c02:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c04:	9b ad       	ldd	r25, Y+59	; 0x3b
    3c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	9f ab       	std	Y+55, r25	; 0x37
    3c10:	8e ab       	std	Y+54, r24	; 0x36
    3c12:	8e a9       	ldd	r24, Y+54	; 0x36
    3c14:	9f a9       	ldd	r25, Y+55	; 0x37
    3c16:	9b ab       	std	Y+51, r25	; 0x33
    3c18:	8a ab       	std	Y+50, r24	; 0x32
    3c1a:	8a a9       	ldd	r24, Y+50	; 0x32
    3c1c:	9b a9       	ldd	r25, Y+51	; 0x33
    3c1e:	01 97       	sbiw	r24, 0x01	; 1
    3c20:	f1 f7       	brne	.-4      	; 0x3c1e <LCD_voidWriteChar+0x1a2>
    3c22:	9b ab       	std	Y+51, r25	; 0x33
    3c24:	8a ab       	std	Y+50, r24	; 0x32
    3c26:	18 c0       	rjmp	.+48     	; 0x3c58 <LCD_voidWriteChar+0x1dc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c28:	fe 01       	movw	r30, r28
    3c2a:	ef 5b       	subi	r30, 0xBF	; 191
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	60 81       	ld	r22, Z
    3c30:	71 81       	ldd	r23, Z+1	; 0x01
    3c32:	82 81       	ldd	r24, Z+2	; 0x02
    3c34:	93 81       	ldd	r25, Z+3	; 0x03
    3c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e0 5c       	subi	r30, 0xC0	; 192
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	80 83       	st	Z, r24
    3c46:	fe 01       	movw	r30, r28
    3c48:	e0 5c       	subi	r30, 0xC0	; 192
    3c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4c:	80 81       	ld	r24, Z
    3c4e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c50:	89 a9       	ldd	r24, Y+49	; 0x31
    3c52:	8a 95       	dec	r24
    3c54:	f1 f7       	brne	.-4      	; 0x3c52 <LCD_voidWriteChar+0x1d6>
    3c56:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(990);
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	61 e0       	ldi	r22, 0x01	; 1
    3c5c:	41 e0       	ldi	r20, 0x01	; 1
    3c5e:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTA_ID, LCD_E_PIN, HIGH);
	_delay_ms(1);
	DIO_voidSetPinValue(PORTA_ID, LCD_E_PIN, LOW);

#elif LCD_CURRENT_MODE == LCD_4BITS_MODE
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN1, GETBIT(ch, PIN4));
    3c62:	fe 01       	movw	r30, r28
    3c64:	e7 5b       	subi	r30, 0xB7	; 183
    3c66:	ff 4f       	sbci	r31, 0xFF	; 255
    3c68:	80 81       	ld	r24, Z
    3c6a:	82 95       	swap	r24
    3c6c:	8f 70       	andi	r24, 0x0F	; 15
    3c6e:	98 2f       	mov	r25, r24
    3c70:	91 70       	andi	r25, 0x01	; 1
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	64 e0       	ldi	r22, 0x04	; 4
    3c76:	49 2f       	mov	r20, r25
    3c78:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN2, GETBIT(ch, PIN5));
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	e7 5b       	subi	r30, 0xB7	; 183
    3c80:	ff 4f       	sbci	r31, 0xFF	; 255
    3c82:	80 81       	ld	r24, Z
    3c84:	82 95       	swap	r24
    3c86:	86 95       	lsr	r24
    3c88:	87 70       	andi	r24, 0x07	; 7
    3c8a:	98 2f       	mov	r25, r24
    3c8c:	91 70       	andi	r25, 0x01	; 1
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	65 e0       	ldi	r22, 0x05	; 5
    3c92:	49 2f       	mov	r20, r25
    3c94:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN3, GETBIT(ch, PIN6));
    3c98:	fe 01       	movw	r30, r28
    3c9a:	e7 5b       	subi	r30, 0xB7	; 183
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	80 81       	ld	r24, Z
    3ca0:	82 95       	swap	r24
    3ca2:	86 95       	lsr	r24
    3ca4:	86 95       	lsr	r24
    3ca6:	83 70       	andi	r24, 0x03	; 3
    3ca8:	98 2f       	mov	r25, r24
    3caa:	91 70       	andi	r25, 0x01	; 1
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	66 e0       	ldi	r22, 0x06	; 6
    3cb0:	49 2f       	mov	r20, r25
    3cb2:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN4, GETBIT(ch, PIN7));
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e7 5b       	subi	r30, 0xB7	; 183
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	80 81       	ld	r24, Z
    3cbe:	98 2f       	mov	r25, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	99 27       	eor	r25, r25
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	67 e0       	ldi	r22, 0x07	; 7
    3cca:	49 2f       	mov	r20, r25
    3ccc:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, HIGH);
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	63 e0       	ldi	r22, 0x03	; 3
    3cd4:	41 e0       	ldi	r20, 0x01	; 1
    3cd6:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	90 e8       	ldi	r25, 0x80	; 128
    3cde:	a7 e7       	ldi	r26, 0x77	; 119
    3ce0:	b4 e4       	ldi	r27, 0x44	; 68
    3ce2:	8d a7       	std	Y+45, r24	; 0x2d
    3ce4:	9e a7       	std	Y+46, r25	; 0x2e
    3ce6:	af a7       	std	Y+47, r26	; 0x2f
    3ce8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3cea:	6d a5       	ldd	r22, Y+45	; 0x2d
    3cec:	7e a5       	ldd	r23, Y+46	; 0x2e
    3cee:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cf0:	98 a9       	ldd	r25, Y+48	; 0x30
    3cf2:	2b ea       	ldi	r18, 0xAB	; 171
    3cf4:	3a ea       	ldi	r19, 0xAA	; 170
    3cf6:	4a e2       	ldi	r20, 0x2A	; 42
    3cf8:	50 e4       	ldi	r21, 0x40	; 64
    3cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	89 a7       	std	Y+41, r24	; 0x29
    3d04:	9a a7       	std	Y+42, r25	; 0x2a
    3d06:	ab a7       	std	Y+43, r26	; 0x2b
    3d08:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3d0a:	69 a5       	ldd	r22, Y+41	; 0x29
    3d0c:	7a a5       	ldd	r23, Y+42	; 0x2a
    3d0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d10:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 e8       	ldi	r20, 0x80	; 128
    3d18:	5f e3       	ldi	r21, 0x3F	; 63
    3d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d1e:	88 23       	and	r24, r24
    3d20:	1c f4       	brge	.+6      	; 0x3d28 <LCD_voidWriteChar+0x2ac>
		__ticks = 1;
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	88 a7       	std	Y+40, r24	; 0x28
    3d26:	91 c0       	rjmp	.+290    	; 0x3e4a <LCD_voidWriteChar+0x3ce>
	else if (__tmp > 255)
    3d28:	69 a5       	ldd	r22, Y+41	; 0x29
    3d2a:	7a a5       	ldd	r23, Y+42	; 0x2a
    3d2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	4f e7       	ldi	r20, 0x7F	; 127
    3d36:	53 e4       	ldi	r21, 0x43	; 67
    3d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d3c:	18 16       	cp	r1, r24
    3d3e:	0c f0       	brlt	.+2      	; 0x3d42 <LCD_voidWriteChar+0x2c6>
    3d40:	7b c0       	rjmp	.+246    	; 0x3e38 <LCD_voidWriteChar+0x3bc>
	{
		_delay_ms(__us / 1000.0);
    3d42:	6d a5       	ldd	r22, Y+45	; 0x2d
    3d44:	7e a5       	ldd	r23, Y+46	; 0x2e
    3d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d48:	98 a9       	ldd	r25, Y+48	; 0x30
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	4a e7       	ldi	r20, 0x7A	; 122
    3d50:	54 e4       	ldi	r21, 0x44	; 68
    3d52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	8c a3       	std	Y+36, r24	; 0x24
    3d5c:	9d a3       	std	Y+37, r25	; 0x25
    3d5e:	ae a3       	std	Y+38, r26	; 0x26
    3d60:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d62:	6c a1       	ldd	r22, Y+36	; 0x24
    3d64:	7d a1       	ldd	r23, Y+37	; 0x25
    3d66:	8e a1       	ldd	r24, Y+38	; 0x26
    3d68:	9f a1       	ldd	r25, Y+39	; 0x27
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	4a ef       	ldi	r20, 0xFA	; 250
    3d70:	54 e4       	ldi	r21, 0x44	; 68
    3d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	88 a3       	std	Y+32, r24	; 0x20
    3d7c:	99 a3       	std	Y+33, r25	; 0x21
    3d7e:	aa a3       	std	Y+34, r26	; 0x22
    3d80:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3d82:	68 a1       	ldd	r22, Y+32	; 0x20
    3d84:	79 a1       	ldd	r23, Y+33	; 0x21
    3d86:	8a a1       	ldd	r24, Y+34	; 0x22
    3d88:	9b a1       	ldd	r25, Y+35	; 0x23
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	40 e8       	ldi	r20, 0x80	; 128
    3d90:	5f e3       	ldi	r21, 0x3F	; 63
    3d92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d96:	88 23       	and	r24, r24
    3d98:	2c f4       	brge	.+10     	; 0x3da4 <LCD_voidWriteChar+0x328>
		__ticks = 1;
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	9f 8f       	std	Y+31, r25	; 0x1f
    3da0:	8e 8f       	std	Y+30, r24	; 0x1e
    3da2:	3f c0       	rjmp	.+126    	; 0x3e22 <LCD_voidWriteChar+0x3a6>
	else if (__tmp > 65535)
    3da4:	68 a1       	ldd	r22, Y+32	; 0x20
    3da6:	79 a1       	ldd	r23, Y+33	; 0x21
    3da8:	8a a1       	ldd	r24, Y+34	; 0x22
    3daa:	9b a1       	ldd	r25, Y+35	; 0x23
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	3f ef       	ldi	r19, 0xFF	; 255
    3db0:	4f e7       	ldi	r20, 0x7F	; 127
    3db2:	57 e4       	ldi	r21, 0x47	; 71
    3db4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3db8:	18 16       	cp	r1, r24
    3dba:	4c f5       	brge	.+82     	; 0x3e0e <LCD_voidWriteChar+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dbc:	6c a1       	ldd	r22, Y+36	; 0x24
    3dbe:	7d a1       	ldd	r23, Y+37	; 0x25
    3dc0:	8e a1       	ldd	r24, Y+38	; 0x26
    3dc2:	9f a1       	ldd	r25, Y+39	; 0x27
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	40 e2       	ldi	r20, 0x20	; 32
    3dca:	51 e4       	ldi	r21, 0x41	; 65
    3dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	bc 01       	movw	r22, r24
    3dd6:	cd 01       	movw	r24, r26
    3dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	9f 8f       	std	Y+31, r25	; 0x1f
    3de2:	8e 8f       	std	Y+30, r24	; 0x1e
    3de4:	0f c0       	rjmp	.+30     	; 0x3e04 <LCD_voidWriteChar+0x388>
    3de6:	88 ec       	ldi	r24, 0xC8	; 200
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	9d 8f       	std	Y+29, r25	; 0x1d
    3dec:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3df0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3df2:	01 97       	sbiw	r24, 0x01	; 1
    3df4:	f1 f7       	brne	.-4      	; 0x3df2 <LCD_voidWriteChar+0x376>
    3df6:	9d 8f       	std	Y+29, r25	; 0x1d
    3df8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3dfc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3dfe:	01 97       	sbiw	r24, 0x01	; 1
    3e00:	9f 8f       	std	Y+31, r25	; 0x1f
    3e02:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3e08:	00 97       	sbiw	r24, 0x00	; 0
    3e0a:	69 f7       	brne	.-38     	; 0x3de6 <LCD_voidWriteChar+0x36a>
    3e0c:	24 c0       	rjmp	.+72     	; 0x3e56 <LCD_voidWriteChar+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e0e:	68 a1       	ldd	r22, Y+32	; 0x20
    3e10:	79 a1       	ldd	r23, Y+33	; 0x21
    3e12:	8a a1       	ldd	r24, Y+34	; 0x22
    3e14:	9b a1       	ldd	r25, Y+35	; 0x23
    3e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	9f 8f       	std	Y+31, r25	; 0x1f
    3e20:	8e 8f       	std	Y+30, r24	; 0x1e
    3e22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3e26:	9b 8f       	std	Y+27, r25	; 0x1b
    3e28:	8a 8f       	std	Y+26, r24	; 0x1a
    3e2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	f1 f7       	brne	.-4      	; 0x3e2e <LCD_voidWriteChar+0x3b2>
    3e32:	9b 8f       	std	Y+27, r25	; 0x1b
    3e34:	8a 8f       	std	Y+26, r24	; 0x1a
    3e36:	0f c0       	rjmp	.+30     	; 0x3e56 <LCD_voidWriteChar+0x3da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e38:	69 a5       	ldd	r22, Y+41	; 0x29
    3e3a:	7a a5       	ldd	r23, Y+42	; 0x2a
    3e3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	88 a7       	std	Y+40, r24	; 0x28
    3e4a:	88 a5       	ldd	r24, Y+40	; 0x28
    3e4c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e4e:	89 8d       	ldd	r24, Y+25	; 0x19
    3e50:	8a 95       	dec	r24
    3e52:	f1 f7       	brne	.-4      	; 0x3e50 <LCD_voidWriteChar+0x3d4>
    3e54:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(990);
	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, LOW);
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	63 e0       	ldi	r22, 0x03	; 3
    3e5a:	40 e0       	ldi	r20, 0x00	; 0
    3e5c:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN1, GETBIT(ch, PIN0));
    3e60:	fe 01       	movw	r30, r28
    3e62:	e7 5b       	subi	r30, 0xB7	; 183
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	80 81       	ld	r24, Z
    3e68:	98 2f       	mov	r25, r24
    3e6a:	91 70       	andi	r25, 0x01	; 1
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	64 e0       	ldi	r22, 0x04	; 4
    3e70:	49 2f       	mov	r20, r25
    3e72:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN2, GETBIT(ch, PIN1));
    3e76:	fe 01       	movw	r30, r28
    3e78:	e7 5b       	subi	r30, 0xB7	; 183
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	80 81       	ld	r24, Z
    3e7e:	86 95       	lsr	r24
    3e80:	98 2f       	mov	r25, r24
    3e82:	91 70       	andi	r25, 0x01	; 1
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	65 e0       	ldi	r22, 0x05	; 5
    3e88:	49 2f       	mov	r20, r25
    3e8a:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN3, GETBIT(ch, PIN2));
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e7 5b       	subi	r30, 0xB7	; 183
    3e92:	ff 4f       	sbci	r31, 0xFF	; 255
    3e94:	80 81       	ld	r24, Z
    3e96:	86 95       	lsr	r24
    3e98:	86 95       	lsr	r24
    3e9a:	98 2f       	mov	r25, r24
    3e9c:	91 70       	andi	r25, 0x01	; 1
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	66 e0       	ldi	r22, 0x06	; 6
    3ea2:	49 2f       	mov	r20, r25
    3ea4:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BITS_PORT, LCD_4BITS_PIN4, GETBIT(ch, PIN3));
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	e7 5b       	subi	r30, 0xB7	; 183
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	80 81       	ld	r24, Z
    3eb0:	86 95       	lsr	r24
    3eb2:	86 95       	lsr	r24
    3eb4:	86 95       	lsr	r24
    3eb6:	98 2f       	mov	r25, r24
    3eb8:	91 70       	andi	r25, 0x01	; 1
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	67 e0       	ldi	r22, 0x07	; 7
    3ebe:	49 2f       	mov	r20, r25
    3ec0:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, HIGH);
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	63 e0       	ldi	r22, 0x03	; 3
    3ec8:	41 e0       	ldi	r20, 0x01	; 1
    3eca:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	90 e8       	ldi	r25, 0x80	; 128
    3ed2:	a7 e7       	ldi	r26, 0x77	; 119
    3ed4:	b4 e4       	ldi	r27, 0x44	; 68
    3ed6:	8d 8b       	std	Y+21, r24	; 0x15
    3ed8:	9e 8b       	std	Y+22, r25	; 0x16
    3eda:	af 8b       	std	Y+23, r26	; 0x17
    3edc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ede:	6d 89       	ldd	r22, Y+21	; 0x15
    3ee0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ee6:	2b ea       	ldi	r18, 0xAB	; 171
    3ee8:	3a ea       	ldi	r19, 0xAA	; 170
    3eea:	4a e2       	ldi	r20, 0x2A	; 42
    3eec:	50 e4       	ldi	r21, 0x40	; 64
    3eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	89 8b       	std	Y+17, r24	; 0x11
    3ef8:	9a 8b       	std	Y+18, r25	; 0x12
    3efa:	ab 8b       	std	Y+19, r26	; 0x13
    3efc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3efe:	69 89       	ldd	r22, Y+17	; 0x11
    3f00:	7a 89       	ldd	r23, Y+18	; 0x12
    3f02:	8b 89       	ldd	r24, Y+19	; 0x13
    3f04:	9c 89       	ldd	r25, Y+20	; 0x14
    3f06:	20 e0       	ldi	r18, 0x00	; 0
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	40 e8       	ldi	r20, 0x80	; 128
    3f0c:	5f e3       	ldi	r21, 0x3F	; 63
    3f0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f12:	88 23       	and	r24, r24
    3f14:	1c f4       	brge	.+6      	; 0x3f1c <LCD_voidWriteChar+0x4a0>
		__ticks = 1;
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	88 8b       	std	Y+16, r24	; 0x10
    3f1a:	91 c0       	rjmp	.+290    	; 0x403e <LCD_voidWriteChar+0x5c2>
	else if (__tmp > 255)
    3f1c:	69 89       	ldd	r22, Y+17	; 0x11
    3f1e:	7a 89       	ldd	r23, Y+18	; 0x12
    3f20:	8b 89       	ldd	r24, Y+19	; 0x13
    3f22:	9c 89       	ldd	r25, Y+20	; 0x14
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	4f e7       	ldi	r20, 0x7F	; 127
    3f2a:	53 e4       	ldi	r21, 0x43	; 67
    3f2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f30:	18 16       	cp	r1, r24
    3f32:	0c f0       	brlt	.+2      	; 0x3f36 <LCD_voidWriteChar+0x4ba>
    3f34:	7b c0       	rjmp	.+246    	; 0x402c <LCD_voidWriteChar+0x5b0>
	{
		_delay_ms(__us / 1000.0);
    3f36:	6d 89       	ldd	r22, Y+21	; 0x15
    3f38:	7e 89       	ldd	r23, Y+22	; 0x16
    3f3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	4a e7       	ldi	r20, 0x7A	; 122
    3f44:	54 e4       	ldi	r21, 0x44	; 68
    3f46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	8c 87       	std	Y+12, r24	; 0x0c
    3f50:	9d 87       	std	Y+13, r25	; 0x0d
    3f52:	ae 87       	std	Y+14, r26	; 0x0e
    3f54:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f56:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f58:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	4a ef       	ldi	r20, 0xFA	; 250
    3f64:	54 e4       	ldi	r21, 0x44	; 68
    3f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	cb 01       	movw	r24, r22
    3f6e:	88 87       	std	Y+8, r24	; 0x08
    3f70:	99 87       	std	Y+9, r25	; 0x09
    3f72:	aa 87       	std	Y+10, r26	; 0x0a
    3f74:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3f76:	68 85       	ldd	r22, Y+8	; 0x08
    3f78:	79 85       	ldd	r23, Y+9	; 0x09
    3f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e8       	ldi	r20, 0x80	; 128
    3f84:	5f e3       	ldi	r21, 0x3F	; 63
    3f86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f8a:	88 23       	and	r24, r24
    3f8c:	2c f4       	brge	.+10     	; 0x3f98 <LCD_voidWriteChar+0x51c>
		__ticks = 1;
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	9f 83       	std	Y+7, r25	; 0x07
    3f94:	8e 83       	std	Y+6, r24	; 0x06
    3f96:	3f c0       	rjmp	.+126    	; 0x4016 <LCD_voidWriteChar+0x59a>
	else if (__tmp > 65535)
    3f98:	68 85       	ldd	r22, Y+8	; 0x08
    3f9a:	79 85       	ldd	r23, Y+9	; 0x09
    3f9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	3f ef       	ldi	r19, 0xFF	; 255
    3fa4:	4f e7       	ldi	r20, 0x7F	; 127
    3fa6:	57 e4       	ldi	r21, 0x47	; 71
    3fa8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fac:	18 16       	cp	r1, r24
    3fae:	4c f5       	brge	.+82     	; 0x4002 <LCD_voidWriteChar+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb0:	6c 85       	ldd	r22, Y+12	; 0x0c
    3fb2:	7d 85       	ldd	r23, Y+13	; 0x0d
    3fb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	40 e2       	ldi	r20, 0x20	; 32
    3fbe:	51 e4       	ldi	r21, 0x41	; 65
    3fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	bc 01       	movw	r22, r24
    3fca:	cd 01       	movw	r24, r26
    3fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	9f 83       	std	Y+7, r25	; 0x07
    3fd6:	8e 83       	std	Y+6, r24	; 0x06
    3fd8:	0f c0       	rjmp	.+30     	; 0x3ff8 <LCD_voidWriteChar+0x57c>
    3fda:	88 ec       	ldi	r24, 0xC8	; 200
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	9d 83       	std	Y+5, r25	; 0x05
    3fe0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    3fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	f1 f7       	brne	.-4      	; 0x3fe6 <LCD_voidWriteChar+0x56a>
    3fea:	9d 83       	std	Y+5, r25	; 0x05
    3fec:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fee:	8e 81       	ldd	r24, Y+6	; 0x06
    3ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
    3ff4:	9f 83       	std	Y+7, r25	; 0x07
    3ff6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff8:	8e 81       	ldd	r24, Y+6	; 0x06
    3ffa:	9f 81       	ldd	r25, Y+7	; 0x07
    3ffc:	00 97       	sbiw	r24, 0x00	; 0
    3ffe:	69 f7       	brne	.-38     	; 0x3fda <LCD_voidWriteChar+0x55e>
    4000:	24 c0       	rjmp	.+72     	; 0x404a <LCD_voidWriteChar+0x5ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4002:	68 85       	ldd	r22, Y+8	; 0x08
    4004:	79 85       	ldd	r23, Y+9	; 0x09
    4006:	8a 85       	ldd	r24, Y+10	; 0x0a
    4008:	9b 85       	ldd	r25, Y+11	; 0x0b
    400a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	9f 83       	std	Y+7, r25	; 0x07
    4014:	8e 83       	std	Y+6, r24	; 0x06
    4016:	8e 81       	ldd	r24, Y+6	; 0x06
    4018:	9f 81       	ldd	r25, Y+7	; 0x07
    401a:	9b 83       	std	Y+3, r25	; 0x03
    401c:	8a 83       	std	Y+2, r24	; 0x02
    401e:	8a 81       	ldd	r24, Y+2	; 0x02
    4020:	9b 81       	ldd	r25, Y+3	; 0x03
    4022:	01 97       	sbiw	r24, 0x01	; 1
    4024:	f1 f7       	brne	.-4      	; 0x4022 <LCD_voidWriteChar+0x5a6>
    4026:	9b 83       	std	Y+3, r25	; 0x03
    4028:	8a 83       	std	Y+2, r24	; 0x02
    402a:	0f c0       	rjmp	.+30     	; 0x404a <LCD_voidWriteChar+0x5ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    402c:	69 89       	ldd	r22, Y+17	; 0x11
    402e:	7a 89       	ldd	r23, Y+18	; 0x12
    4030:	8b 89       	ldd	r24, Y+19	; 0x13
    4032:	9c 89       	ldd	r25, Y+20	; 0x14
    4034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	88 8b       	std	Y+16, r24	; 0x10
    403e:	88 89       	ldd	r24, Y+16	; 0x10
    4040:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4042:	89 81       	ldd	r24, Y+1	; 0x01
    4044:	8a 95       	dec	r24
    4046:	f1 f7       	brne	.-4      	; 0x4044 <LCD_voidWriteChar+0x5c8>
    4048:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(990);
	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, LOW);
    404a:	80 e0       	ldi	r24, 0x00	; 0
    404c:	63 e0       	ldi	r22, 0x03	; 3
    404e:	40 e0       	ldi	r20, 0x00	; 0
    4050:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>

#endif
}
    4054:	c7 5b       	subi	r28, 0xB7	; 183
    4056:	df 4f       	sbci	r29, 0xFF	; 255
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61
    4062:	cf 91       	pop	r28
    4064:	df 91       	pop	r29
    4066:	1f 91       	pop	r17
    4068:	0f 91       	pop	r16
    406a:	08 95       	ret

0000406c <LCD_voidWriteString>:
 * @brief Write String On Lcd
 * 
 * @param str Pointer to The First Element of the String
 */
void LCD_voidWriteString(uint8_t *str)
{
    406c:	df 93       	push	r29
    406e:	cf 93       	push	r28
    4070:	00 d0       	rcall	.+0      	; 0x4072 <LCD_voidWriteString+0x6>
    4072:	0f 92       	push	r0
    4074:	cd b7       	in	r28, 0x3d	; 61
    4076:	de b7       	in	r29, 0x3e	; 62
    4078:	9b 83       	std	Y+3, r25	; 0x03
    407a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t counter = 0;
    407c:	19 82       	std	Y+1, r1	; 0x01
    407e:	0e c0       	rjmp	.+28     	; 0x409c <LCD_voidWriteString+0x30>
	while (str[counter] != '\0')
	{
		LCD_voidWriteChar(str[counter]);
    4080:	89 81       	ldd	r24, Y+1	; 0x01
    4082:	28 2f       	mov	r18, r24
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	8a 81       	ldd	r24, Y+2	; 0x02
    4088:	9b 81       	ldd	r25, Y+3	; 0x03
    408a:	fc 01       	movw	r30, r24
    408c:	e2 0f       	add	r30, r18
    408e:	f3 1f       	adc	r31, r19
    4090:	80 81       	ld	r24, Z
    4092:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
		counter++;
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	8f 5f       	subi	r24, 0xFF	; 255
    409a:	89 83       	std	Y+1, r24	; 0x01
 * @param str Pointer to The First Element of the String
 */
void LCD_voidWriteString(uint8_t *str)
{
	uint8_t counter = 0;
	while (str[counter] != '\0')
    409c:	89 81       	ldd	r24, Y+1	; 0x01
    409e:	28 2f       	mov	r18, r24
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	8a 81       	ldd	r24, Y+2	; 0x02
    40a4:	9b 81       	ldd	r25, Y+3	; 0x03
    40a6:	fc 01       	movw	r30, r24
    40a8:	e2 0f       	add	r30, r18
    40aa:	f3 1f       	adc	r31, r19
    40ac:	80 81       	ld	r24, Z
    40ae:	88 23       	and	r24, r24
    40b0:	39 f7       	brne	.-50     	; 0x4080 <LCD_voidWriteString+0x14>
	{
		LCD_voidWriteChar(str[counter]);
		counter++;
	}
}
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	cf 91       	pop	r28
    40ba:	df 91       	pop	r29
    40bc:	08 95       	ret

000040be <LCD_voidPrintUnsignedInteger>:
 * @brief Write Unsigned Integer On Lcd
 * 
 * @param number Unsinged Number
 */
void LCD_voidPrintUnsignedInteger(uint16_t number)
{
    40be:	df 93       	push	r29
    40c0:	cf 93       	push	r28
    40c2:	cd b7       	in	r28, 0x3d	; 61
    40c4:	de b7       	in	r29, 0x3e	; 62
    40c6:	2a 97       	sbiw	r28, 0x0a	; 10
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	f8 94       	cli
    40cc:	de bf       	out	0x3e, r29	; 62
    40ce:	0f be       	out	0x3f, r0	; 63
    40d0:	cd bf       	out	0x3d, r28	; 61
    40d2:	98 87       	std	Y+8, r25	; 0x08
    40d4:	8f 83       	std	Y+7, r24	; 0x07
	if (number==0)
    40d6:	8f 81       	ldd	r24, Y+7	; 0x07
    40d8:	98 85       	ldd	r25, Y+8	; 0x08
    40da:	00 97       	sbiw	r24, 0x00	; 0
    40dc:	19 f4       	brne	.+6      	; 0x40e4 <LCD_voidPrintUnsignedInteger+0x26>
	{
		LCD_voidWriteChar('0');
    40de:	80 e3       	ldi	r24, 0x30	; 48
    40e0:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
	}
	sint8_t i=0;
    40e4:	19 82       	std	Y+1, r1	; 0x01
    40e6:	1f c0       	rjmp	.+62     	; 0x4126 <LCD_voidPrintUnsignedInteger+0x68>
	uint8_t str_num[5];
	while(number>0)
	{
		str_num[i]=number%10;
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	e8 2f       	mov	r30, r24
    40ec:	ff 27       	eor	r31, r31
    40ee:	e7 fd       	sbrc	r30, 7
    40f0:	f0 95       	com	r31
    40f2:	8f 81       	ldd	r24, Y+7	; 0x07
    40f4:	98 85       	ldd	r25, Y+8	; 0x08
    40f6:	2a e0       	ldi	r18, 0x0A	; 10
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	b9 01       	movw	r22, r18
    40fc:	0e 94 2e 23 	call	0x465c	; 0x465c <__udivmodhi4>
    4100:	28 2f       	mov	r18, r24
    4102:	ce 01       	movw	r24, r28
    4104:	02 96       	adiw	r24, 0x02	; 2
    4106:	e8 0f       	add	r30, r24
    4108:	f9 1f       	adc	r31, r25
    410a:	20 83       	st	Z, r18
		number/=10;
    410c:	8f 81       	ldd	r24, Y+7	; 0x07
    410e:	98 85       	ldd	r25, Y+8	; 0x08
    4110:	2a e0       	ldi	r18, 0x0A	; 10
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	b9 01       	movw	r22, r18
    4116:	0e 94 2e 23 	call	0x465c	; 0x465c <__udivmodhi4>
    411a:	cb 01       	movw	r24, r22
    411c:	98 87       	std	Y+8, r25	; 0x08
    411e:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	8f 5f       	subi	r24, 0xFF	; 255
    4124:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_voidWriteChar('0');
	}
	sint8_t i=0;
	uint8_t str_num[5];
	while(number>0)
    4126:	8f 81       	ldd	r24, Y+7	; 0x07
    4128:	98 85       	ldd	r25, Y+8	; 0x08
    412a:	00 97       	sbiw	r24, 0x00	; 0
    412c:	e9 f6       	brne	.-70     	; 0x40e8 <LCD_voidPrintUnsignedInteger+0x2a>
	{
		str_num[i]=number%10;
		number/=10;
		i++;
	}
	i--;
    412e:	89 81       	ldd	r24, Y+1	; 0x01
    4130:	81 50       	subi	r24, 0x01	; 1
    4132:	89 83       	std	Y+1, r24	; 0x01
    4134:	7e c0       	rjmp	.+252    	; 0x4232 <LCD_voidPrintUnsignedInteger+0x174>
	while(i>=0)
	{
		switch(str_num[i])
    4136:	89 81       	ldd	r24, Y+1	; 0x01
    4138:	28 2f       	mov	r18, r24
    413a:	33 27       	eor	r19, r19
    413c:	27 fd       	sbrc	r18, 7
    413e:	30 95       	com	r19
    4140:	ce 01       	movw	r24, r28
    4142:	02 96       	adiw	r24, 0x02	; 2
    4144:	fc 01       	movw	r30, r24
    4146:	e2 0f       	add	r30, r18
    4148:	f3 1f       	adc	r31, r19
    414a:	80 81       	ld	r24, Z
    414c:	28 2f       	mov	r18, r24
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	3a 87       	std	Y+10, r19	; 0x0a
    4152:	29 87       	std	Y+9, r18	; 0x09
    4154:	89 85       	ldd	r24, Y+9	; 0x09
    4156:	9a 85       	ldd	r25, Y+10	; 0x0a
    4158:	84 30       	cpi	r24, 0x04	; 4
    415a:	91 05       	cpc	r25, r1
    415c:	09 f4       	brne	.+2      	; 0x4160 <LCD_voidPrintUnsignedInteger+0xa2>
    415e:	4f c0       	rjmp	.+158    	; 0x41fe <LCD_voidPrintUnsignedInteger+0x140>
    4160:	29 85       	ldd	r18, Y+9	; 0x09
    4162:	3a 85       	ldd	r19, Y+10	; 0x0a
    4164:	25 30       	cpi	r18, 0x05	; 5
    4166:	31 05       	cpc	r19, r1
    4168:	d4 f4       	brge	.+52     	; 0x419e <LCD_voidPrintUnsignedInteger+0xe0>
    416a:	89 85       	ldd	r24, Y+9	; 0x09
    416c:	9a 85       	ldd	r25, Y+10	; 0x0a
    416e:	81 30       	cpi	r24, 0x01	; 1
    4170:	91 05       	cpc	r25, r1
    4172:	c9 f1       	breq	.+114    	; 0x41e6 <LCD_voidPrintUnsignedInteger+0x128>
    4174:	29 85       	ldd	r18, Y+9	; 0x09
    4176:	3a 85       	ldd	r19, Y+10	; 0x0a
    4178:	22 30       	cpi	r18, 0x02	; 2
    417a:	31 05       	cpc	r19, r1
    417c:	2c f4       	brge	.+10     	; 0x4188 <LCD_voidPrintUnsignedInteger+0xca>
    417e:	89 85       	ldd	r24, Y+9	; 0x09
    4180:	9a 85       	ldd	r25, Y+10	; 0x0a
    4182:	00 97       	sbiw	r24, 0x00	; 0
    4184:	61 f1       	breq	.+88     	; 0x41de <LCD_voidPrintUnsignedInteger+0x120>
    4186:	52 c0       	rjmp	.+164    	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
    4188:	29 85       	ldd	r18, Y+9	; 0x09
    418a:	3a 85       	ldd	r19, Y+10	; 0x0a
    418c:	22 30       	cpi	r18, 0x02	; 2
    418e:	31 05       	cpc	r19, r1
    4190:	71 f1       	breq	.+92     	; 0x41ee <LCD_voidPrintUnsignedInteger+0x130>
    4192:	89 85       	ldd	r24, Y+9	; 0x09
    4194:	9a 85       	ldd	r25, Y+10	; 0x0a
    4196:	83 30       	cpi	r24, 0x03	; 3
    4198:	91 05       	cpc	r25, r1
    419a:	69 f1       	breq	.+90     	; 0x41f6 <LCD_voidPrintUnsignedInteger+0x138>
    419c:	47 c0       	rjmp	.+142    	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
    419e:	29 85       	ldd	r18, Y+9	; 0x09
    41a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    41a2:	27 30       	cpi	r18, 0x07	; 7
    41a4:	31 05       	cpc	r19, r1
    41a6:	b9 f1       	breq	.+110    	; 0x4216 <LCD_voidPrintUnsignedInteger+0x158>
    41a8:	89 85       	ldd	r24, Y+9	; 0x09
    41aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ac:	88 30       	cpi	r24, 0x08	; 8
    41ae:	91 05       	cpc	r25, r1
    41b0:	5c f4       	brge	.+22     	; 0x41c8 <LCD_voidPrintUnsignedInteger+0x10a>
    41b2:	29 85       	ldd	r18, Y+9	; 0x09
    41b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    41b6:	25 30       	cpi	r18, 0x05	; 5
    41b8:	31 05       	cpc	r19, r1
    41ba:	29 f1       	breq	.+74     	; 0x4206 <LCD_voidPrintUnsignedInteger+0x148>
    41bc:	89 85       	ldd	r24, Y+9	; 0x09
    41be:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c0:	86 30       	cpi	r24, 0x06	; 6
    41c2:	91 05       	cpc	r25, r1
    41c4:	21 f1       	breq	.+72     	; 0x420e <LCD_voidPrintUnsignedInteger+0x150>
    41c6:	32 c0       	rjmp	.+100    	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
    41c8:	29 85       	ldd	r18, Y+9	; 0x09
    41ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    41cc:	28 30       	cpi	r18, 0x08	; 8
    41ce:	31 05       	cpc	r19, r1
    41d0:	31 f1       	breq	.+76     	; 0x421e <LCD_voidPrintUnsignedInteger+0x160>
    41d2:	89 85       	ldd	r24, Y+9	; 0x09
    41d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d6:	89 30       	cpi	r24, 0x09	; 9
    41d8:	91 05       	cpc	r25, r1
    41da:	29 f1       	breq	.+74     	; 0x4226 <LCD_voidPrintUnsignedInteger+0x168>
    41dc:	27 c0       	rjmp	.+78     	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
		{
		case 0 : LCD_voidWriteChar('0');break;
    41de:	80 e3       	ldi	r24, 0x30	; 48
    41e0:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
    41e4:	23 c0       	rjmp	.+70     	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
		case 1 : LCD_voidWriteChar('1');break;
    41e6:	81 e3       	ldi	r24, 0x31	; 49
    41e8:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
    41ec:	1f c0       	rjmp	.+62     	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
		case 2 : LCD_voidWriteChar('2');break;
    41ee:	82 e3       	ldi	r24, 0x32	; 50
    41f0:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
    41f4:	1b c0       	rjmp	.+54     	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
		case 3 : LCD_voidWriteChar('3');break;
    41f6:	83 e3       	ldi	r24, 0x33	; 51
    41f8:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
    41fc:	17 c0       	rjmp	.+46     	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
		case 4 : LCD_voidWriteChar('4');break;
    41fe:	84 e3       	ldi	r24, 0x34	; 52
    4200:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
    4204:	13 c0       	rjmp	.+38     	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
		case 5 : LCD_voidWriteChar('5');break;
    4206:	85 e3       	ldi	r24, 0x35	; 53
    4208:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
    420c:	0f c0       	rjmp	.+30     	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
		case 6 : LCD_voidWriteChar('6');break;
    420e:	86 e3       	ldi	r24, 0x36	; 54
    4210:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
    4214:	0b c0       	rjmp	.+22     	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
		case 7 : LCD_voidWriteChar('7');break;
    4216:	87 e3       	ldi	r24, 0x37	; 55
    4218:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
    421c:	07 c0       	rjmp	.+14     	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
		case 8 : LCD_voidWriteChar('8');break;
    421e:	88 e3       	ldi	r24, 0x38	; 56
    4220:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
    4224:	03 c0       	rjmp	.+6      	; 0x422c <LCD_voidPrintUnsignedInteger+0x16e>
		case 9 : LCD_voidWriteChar('9');break;
    4226:	89 e3       	ldi	r24, 0x39	; 57
    4228:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
		}

		i--;
    422c:	89 81       	ldd	r24, Y+1	; 0x01
    422e:	81 50       	subi	r24, 0x01	; 1
    4230:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=number%10;
		number/=10;
		i++;
	}
	i--;
	while(i>=0)
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	88 23       	and	r24, r24
    4236:	0c f0       	brlt	.+2      	; 0x423a <LCD_voidPrintUnsignedInteger+0x17c>
    4238:	7e cf       	rjmp	.-260    	; 0x4136 <LCD_voidPrintUnsignedInteger+0x78>





}
    423a:	2a 96       	adiw	r28, 0x0a	; 10
    423c:	0f b6       	in	r0, 0x3f	; 63
    423e:	f8 94       	cli
    4240:	de bf       	out	0x3e, r29	; 62
    4242:	0f be       	out	0x3f, r0	; 63
    4244:	cd bf       	out	0x3d, r28	; 61
    4246:	cf 91       	pop	r28
    4248:	df 91       	pop	r29
    424a:	08 95       	ret

0000424c <LCD_voidPrintSignedInteger>:
 * @brief Write signed Integer On Lcd
 * 
 * @param number Signed Number
 */
void LCD_voidPrintSignedInteger(sint32_t number)
{
    424c:	0f 93       	push	r16
    424e:	1f 93       	push	r17
    4250:	df 93       	push	r29
    4252:	cf 93       	push	r28
    4254:	cd b7       	in	r28, 0x3d	; 61
    4256:	de b7       	in	r29, 0x3e	; 62
    4258:	65 97       	sbiw	r28, 0x15	; 21
    425a:	0f b6       	in	r0, 0x3f	; 63
    425c:	f8 94       	cli
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	0f be       	out	0x3f, r0	; 63
    4262:	cd bf       	out	0x3d, r28	; 61
    4264:	6a 8b       	std	Y+18, r22	; 0x12
    4266:	7b 8b       	std	Y+19, r23	; 0x13
    4268:	8c 8b       	std	Y+20, r24	; 0x14
    426a:	9d 8b       	std	Y+21, r25	; 0x15
	sint8_t Str[16];
	uint8_t count = 0;
    426c:	19 82       	std	Y+1, r1	; 0x01
	if (number == 0)
    426e:	8a 89       	ldd	r24, Y+18	; 0x12
    4270:	9b 89       	ldd	r25, Y+19	; 0x13
    4272:	ac 89       	ldd	r26, Y+20	; 0x14
    4274:	bd 89       	ldd	r27, Y+21	; 0x15
    4276:	00 97       	sbiw	r24, 0x00	; 0
    4278:	a1 05       	cpc	r26, r1
    427a:	b1 05       	cpc	r27, r1
    427c:	b1 f4       	brne	.+44     	; 0x42aa <LCD_voidPrintSignedInteger+0x5e>
	{
		LCD_voidWriteChar('0');
    427e:	80 e3       	ldi	r24, 0x30	; 48
    4280:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
    4284:	12 c0       	rjmp	.+36     	; 0x42aa <LCD_voidPrintSignedInteger+0x5e>
	}
	while (number < 0)
	{
		LCD_voidWriteChar('-');
    4286:	8d e2       	ldi	r24, 0x2D	; 45
    4288:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
		number *= -1;
    428c:	8a 89       	ldd	r24, Y+18	; 0x12
    428e:	9b 89       	ldd	r25, Y+19	; 0x13
    4290:	ac 89       	ldd	r26, Y+20	; 0x14
    4292:	bd 89       	ldd	r27, Y+21	; 0x15
    4294:	b0 95       	com	r27
    4296:	a0 95       	com	r26
    4298:	90 95       	com	r25
    429a:	81 95       	neg	r24
    429c:	9f 4f       	sbci	r25, 0xFF	; 255
    429e:	af 4f       	sbci	r26, 0xFF	; 255
    42a0:	bf 4f       	sbci	r27, 0xFF	; 255
    42a2:	8a 8b       	std	Y+18, r24	; 0x12
    42a4:	9b 8b       	std	Y+19, r25	; 0x13
    42a6:	ac 8b       	std	Y+20, r26	; 0x14
    42a8:	bd 8b       	std	Y+21, r27	; 0x15
	uint8_t count = 0;
	if (number == 0)
	{
		LCD_voidWriteChar('0');
	}
	while (number < 0)
    42aa:	8a 89       	ldd	r24, Y+18	; 0x12
    42ac:	9b 89       	ldd	r25, Y+19	; 0x13
    42ae:	ac 89       	ldd	r26, Y+20	; 0x14
    42b0:	bd 89       	ldd	r27, Y+21	; 0x15
    42b2:	bb 23       	and	r27, r27
    42b4:	44 f3       	brlt	.-48     	; 0x4286 <LCD_voidPrintSignedInteger+0x3a>
    42b6:	2d c0       	rjmp	.+90     	; 0x4312 <LCD_voidPrintSignedInteger+0xc6>
		LCD_voidWriteChar('-');
		number *= -1;
	}
	while (number && (count < 16))
	{
		Str[count++] = number % 10;
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	08 2f       	mov	r16, r24
    42bc:	10 e0       	ldi	r17, 0x00	; 0
    42be:	8a 89       	ldd	r24, Y+18	; 0x12
    42c0:	9b 89       	ldd	r25, Y+19	; 0x13
    42c2:	ac 89       	ldd	r26, Y+20	; 0x14
    42c4:	bd 89       	ldd	r27, Y+21	; 0x15
    42c6:	2a e0       	ldi	r18, 0x0A	; 10
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	50 e0       	ldi	r21, 0x00	; 0
    42ce:	bc 01       	movw	r22, r24
    42d0:	cd 01       	movw	r24, r26
    42d2:	0e 94 77 23 	call	0x46ee	; 0x46ee <__divmodsi4>
    42d6:	dc 01       	movw	r26, r24
    42d8:	cb 01       	movw	r24, r22
    42da:	28 2f       	mov	r18, r24
    42dc:	ce 01       	movw	r24, r28
    42de:	02 96       	adiw	r24, 0x02	; 2
    42e0:	fc 01       	movw	r30, r24
    42e2:	e0 0f       	add	r30, r16
    42e4:	f1 1f       	adc	r31, r17
    42e6:	20 83       	st	Z, r18
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	8f 5f       	subi	r24, 0xFF	; 255
    42ec:	89 83       	std	Y+1, r24	; 0x01
		number /= 10;
    42ee:	8a 89       	ldd	r24, Y+18	; 0x12
    42f0:	9b 89       	ldd	r25, Y+19	; 0x13
    42f2:	ac 89       	ldd	r26, Y+20	; 0x14
    42f4:	bd 89       	ldd	r27, Y+21	; 0x15
    42f6:	2a e0       	ldi	r18, 0x0A	; 10
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	40 e0       	ldi	r20, 0x00	; 0
    42fc:	50 e0       	ldi	r21, 0x00	; 0
    42fe:	bc 01       	movw	r22, r24
    4300:	cd 01       	movw	r24, r26
    4302:	0e 94 77 23 	call	0x46ee	; 0x46ee <__divmodsi4>
    4306:	da 01       	movw	r26, r20
    4308:	c9 01       	movw	r24, r18
    430a:	8a 8b       	std	Y+18, r24	; 0x12
    430c:	9b 8b       	std	Y+19, r25	; 0x13
    430e:	ac 8b       	std	Y+20, r26	; 0x14
    4310:	bd 8b       	std	Y+21, r27	; 0x15
	while (number < 0)
	{
		LCD_voidWriteChar('-');
		number *= -1;
	}
	while (number && (count < 16))
    4312:	8a 89       	ldd	r24, Y+18	; 0x12
    4314:	9b 89       	ldd	r25, Y+19	; 0x13
    4316:	ac 89       	ldd	r26, Y+20	; 0x14
    4318:	bd 89       	ldd	r27, Y+21	; 0x15
    431a:	00 97       	sbiw	r24, 0x00	; 0
    431c:	a1 05       	cpc	r26, r1
    431e:	b1 05       	cpc	r27, r1
    4320:	99 f0       	breq	.+38     	; 0x4348 <LCD_voidPrintSignedInteger+0xfc>
    4322:	89 81       	ldd	r24, Y+1	; 0x01
    4324:	80 31       	cpi	r24, 0x10	; 16
    4326:	40 f2       	brcs	.-112    	; 0x42b8 <LCD_voidPrintSignedInteger+0x6c>
    4328:	0f c0       	rjmp	.+30     	; 0x4348 <LCD_voidPrintSignedInteger+0xfc>
		number /= 10;
	}

	while (count)
	{
		LCD_voidWriteChar(Str[--count] + '0');
    432a:	89 81       	ldd	r24, Y+1	; 0x01
    432c:	81 50       	subi	r24, 0x01	; 1
    432e:	89 83       	std	Y+1, r24	; 0x01
    4330:	89 81       	ldd	r24, Y+1	; 0x01
    4332:	28 2f       	mov	r18, r24
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	ce 01       	movw	r24, r28
    4338:	02 96       	adiw	r24, 0x02	; 2
    433a:	fc 01       	movw	r30, r24
    433c:	e2 0f       	add	r30, r18
    433e:	f3 1f       	adc	r31, r19
    4340:	80 81       	ld	r24, Z
    4342:	80 5d       	subi	r24, 0xD0	; 208
    4344:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LCD_voidWriteChar>
	{
		Str[count++] = number % 10;
		number /= 10;
	}

	while (count)
    4348:	89 81       	ldd	r24, Y+1	; 0x01
    434a:	88 23       	and	r24, r24
    434c:	71 f7       	brne	.-36     	; 0x432a <LCD_voidPrintSignedInteger+0xde>
	{
		LCD_voidWriteChar(Str[--count] + '0');
	}
}
    434e:	65 96       	adiw	r28, 0x15	; 21
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	f8 94       	cli
    4354:	de bf       	out	0x3e, r29	; 62
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	cd bf       	out	0x3d, r28	; 61
    435a:	cf 91       	pop	r28
    435c:	df 91       	pop	r29
    435e:	1f 91       	pop	r17
    4360:	0f 91       	pop	r16
    4362:	08 95       	ret

00004364 <LCD_voidGoto>:
 * 
 * @param raw raw
 * @param col column
 */
void LCD_voidGoto(uint8_t raw, uint8_t col)
{
    4364:	df 93       	push	r29
    4366:	cf 93       	push	r28
    4368:	00 d0       	rcall	.+0      	; 0x436a <LCD_voidGoto+0x6>
    436a:	00 d0       	rcall	.+0      	; 0x436c <LCD_voidGoto+0x8>
    436c:	cd b7       	in	r28, 0x3d	; 61
    436e:	de b7       	in	r29, 0x3e	; 62
    4370:	89 83       	std	Y+1, r24	; 0x01
    4372:	6a 83       	std	Y+2, r22	; 0x02
	switch (raw)
    4374:	89 81       	ldd	r24, Y+1	; 0x01
    4376:	28 2f       	mov	r18, r24
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	3c 83       	std	Y+4, r19	; 0x04
    437c:	2b 83       	std	Y+3, r18	; 0x03
    437e:	8b 81       	ldd	r24, Y+3	; 0x03
    4380:	9c 81       	ldd	r25, Y+4	; 0x04
    4382:	00 97       	sbiw	r24, 0x00	; 0
    4384:	31 f0       	breq	.+12     	; 0x4392 <LCD_voidGoto+0x2e>
    4386:	2b 81       	ldd	r18, Y+3	; 0x03
    4388:	3c 81       	ldd	r19, Y+4	; 0x04
    438a:	21 30       	cpi	r18, 0x01	; 1
    438c:	31 05       	cpc	r19, r1
    438e:	49 f0       	breq	.+18     	; 0x43a2 <LCD_voidGoto+0x3e>
    4390:	0f c0       	rjmp	.+30     	; 0x43b0 <LCD_voidGoto+0x4c>
	{
	case 0:
		if ((col < 16) && (col >= 0))
    4392:	8a 81       	ldd	r24, Y+2	; 0x02
    4394:	80 31       	cpi	r24, 0x10	; 16
    4396:	60 f4       	brcc	.+24     	; 0x43b0 <LCD_voidGoto+0x4c>
		{
			LCD_voidSendCommand(LCD_COM_SET_CURSOR_FIRST_LINE + col);
    4398:	8a 81       	ldd	r24, Y+2	; 0x02
    439a:	80 58       	subi	r24, 0x80	; 128
    439c:	0e 94 1d 19 	call	0x323a	; 0x323a <LCD_voidSendCommand>
    43a0:	07 c0       	rjmp	.+14     	; 0x43b0 <LCD_voidGoto+0x4c>
		}
		break;
	case 1:
		if ((col < 16) && (col >= 0))
    43a2:	8a 81       	ldd	r24, Y+2	; 0x02
    43a4:	80 31       	cpi	r24, 0x10	; 16
    43a6:	20 f4       	brcc	.+8      	; 0x43b0 <LCD_voidGoto+0x4c>
		{
			LCD_voidSendCommand(LCD_COM_SET_CURSOR_SECOND_LINE + col);
    43a8:	8a 81       	ldd	r24, Y+2	; 0x02
    43aa:	80 54       	subi	r24, 0x40	; 64
    43ac:	0e 94 1d 19 	call	0x323a	; 0x323a <LCD_voidSendCommand>
		}
		break;
	}
}
    43b0:	0f 90       	pop	r0
    43b2:	0f 90       	pop	r0
    43b4:	0f 90       	pop	r0
    43b6:	0f 90       	pop	r0
    43b8:	cf 91       	pop	r28
    43ba:	df 91       	pop	r29
    43bc:	08 95       	ret

000043be <LCD_voidCLRDisplay>:
/**
 * @brief Clear Lcd
 * 
 */
void LCD_voidCLRDisplay(void)
{
    43be:	df 93       	push	r29
    43c0:	cf 93       	push	r28
    43c2:	cd b7       	in	r28, 0x3d	; 61
    43c4:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(LCD_COM_CLEAR);
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	0e 94 1d 19 	call	0x323a	; 0x323a <LCD_voidSendCommand>
}
    43cc:	cf 91       	pop	r28
    43ce:	df 91       	pop	r29
    43d0:	08 95       	ret

000043d2 <Update_State>:
/**
 * @brief call back funcion
 *
 * @param LocalFptr pointer to function
 */
void Update_State(void){
    43d2:	df 93       	push	r29
    43d4:	cf 93       	push	r28
    43d6:	cd b7       	in	r28, 0x3d	; 61
    43d8:	de b7       	in	r29, 0x3e	; 62
	/*flag="first state delay 35ms";*/
	if (count_flag == delay_35ms)
    43da:	80 91 7e 01 	lds	r24, 0x017E
    43de:	90 91 7f 01 	lds	r25, 0x017F
    43e2:	a0 91 80 01 	lds	r26, 0x0180
    43e6:	b0 91 81 01 	lds	r27, 0x0181
    43ea:	8c 38       	cpi	r24, 0x8C	; 140
    43ec:	91 05       	cpc	r25, r1
    43ee:	a1 05       	cpc	r26, r1
    43f0:	b1 05       	cpc	r27, r1
    43f2:	31 f4       	brne	.+12     	; 0x4400 <Update_State+0x2e>
	{
		flag++;
    43f4:	80 91 9b 01 	lds	r24, 0x019B
    43f8:	8f 5f       	subi	r24, 0xFF	; 255
    43fa:	80 93 9b 01 	sts	0x019B, r24
    43fe:	5e c0       	rjmp	.+188    	; 0x44bc <Update_State+0xea>
	}
	/*flag="second state delay 1ms";*/
	else if (count_flag == delay_36ms)
    4400:	80 91 7e 01 	lds	r24, 0x017E
    4404:	90 91 7f 01 	lds	r25, 0x017F
    4408:	a0 91 80 01 	lds	r26, 0x0180
    440c:	b0 91 81 01 	lds	r27, 0x0181
    4410:	80 39       	cpi	r24, 0x90	; 144
    4412:	91 05       	cpc	r25, r1
    4414:	a1 05       	cpc	r26, r1
    4416:	b1 05       	cpc	r27, r1
    4418:	31 f4       	brne	.+12     	; 0x4426 <Update_State+0x54>
	{

		flag++;
    441a:	80 91 9b 01 	lds	r24, 0x019B
    441e:	8f 5f       	subi	r24, 0xFF	; 255
    4420:	80 93 9b 01 	sts	0x019B, r24
    4424:	4b c0       	rjmp	.+150    	; 0x44bc <Update_State+0xea>
	}
	/*flag="third state delay 1ms";*/
	else if (count_flag == delay_37ms)
    4426:	80 91 7e 01 	lds	r24, 0x017E
    442a:	90 91 7f 01 	lds	r25, 0x017F
    442e:	a0 91 80 01 	lds	r26, 0x0180
    4432:	b0 91 81 01 	lds	r27, 0x0181
    4436:	84 39       	cpi	r24, 0x94	; 148
    4438:	91 05       	cpc	r25, r1
    443a:	a1 05       	cpc	r26, r1
    443c:	b1 05       	cpc	r27, r1
    443e:	31 f4       	brne	.+12     	; 0x444c <Update_State+0x7a>
	{
		flag++;
    4440:	80 91 9b 01 	lds	r24, 0x019B
    4444:	8f 5f       	subi	r24, 0xFF	; 255
    4446:	80 93 9b 01 	sts	0x019B, r24
    444a:	38 c0       	rjmp	.+112    	; 0x44bc <Update_State+0xea>
	}
	/*flag="forth state delay 1ms";*/
	else if (count_flag == delay_38ms)
    444c:	80 91 7e 01 	lds	r24, 0x017E
    4450:	90 91 7f 01 	lds	r25, 0x017F
    4454:	a0 91 80 01 	lds	r26, 0x0180
    4458:	b0 91 81 01 	lds	r27, 0x0181
    445c:	88 39       	cpi	r24, 0x98	; 152
    445e:	91 05       	cpc	r25, r1
    4460:	a1 05       	cpc	r26, r1
    4462:	b1 05       	cpc	r27, r1
    4464:	31 f4       	brne	.+12     	; 0x4472 <Update_State+0xa0>
	{
		flag++;
    4466:	80 91 9b 01 	lds	r24, 0x019B
    446a:	8f 5f       	subi	r24, 0xFF	; 255
    446c:	80 93 9b 01 	sts	0x019B, r24
    4470:	25 c0       	rjmp	.+74     	; 0x44bc <Update_State+0xea>

	}
	/*"fifth state delay 1ms"*/
	else if (count_flag == delay_39ms)
    4472:	80 91 7e 01 	lds	r24, 0x017E
    4476:	90 91 7f 01 	lds	r25, 0x017F
    447a:	a0 91 80 01 	lds	r26, 0x0180
    447e:	b0 91 81 01 	lds	r27, 0x0181
    4482:	8c 39       	cpi	r24, 0x9C	; 156
    4484:	91 05       	cpc	r25, r1
    4486:	a1 05       	cpc	r26, r1
    4488:	b1 05       	cpc	r27, r1
    448a:	31 f4       	brne	.+12     	; 0x4498 <Update_State+0xc6>
	{
		flag++;
    448c:	80 91 9b 01 	lds	r24, 0x019B
    4490:	8f 5f       	subi	r24, 0xFF	; 255
    4492:	80 93 9b 01 	sts	0x019B, r24
    4496:	12 c0       	rjmp	.+36     	; 0x44bc <Update_State+0xea>
	}
	/*"sixth state delay 3ms"*/
	else if (count_flag == delay_42ms)
    4498:	80 91 7e 01 	lds	r24, 0x017E
    449c:	90 91 7f 01 	lds	r25, 0x017F
    44a0:	a0 91 80 01 	lds	r26, 0x0180
    44a4:	b0 91 81 01 	lds	r27, 0x0181
    44a8:	8e 39       	cpi	r24, 0x9E	; 158
    44aa:	91 05       	cpc	r25, r1
    44ac:	a1 05       	cpc	r26, r1
    44ae:	b1 05       	cpc	r27, r1
    44b0:	29 f4       	brne	.+10     	; 0x44bc <Update_State+0xea>
	{
		flag++;
    44b2:	80 91 9b 01 	lds	r24, 0x019B
    44b6:	8f 5f       	subi	r24, 0xFF	; 255
    44b8:	80 93 9b 01 	sts	0x019B, r24
	}
	if (count_lcd == 2000)
    44bc:	80 91 82 01 	lds	r24, 0x0182
    44c0:	90 91 83 01 	lds	r25, 0x0183
    44c4:	a0 91 84 01 	lds	r26, 0x0184
    44c8:	b0 91 85 01 	lds	r27, 0x0185
    44cc:	80 3d       	cpi	r24, 0xD0	; 208
    44ce:	27 e0       	ldi	r18, 0x07	; 7
    44d0:	92 07       	cpc	r25, r18
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	a2 07       	cpc	r26, r18
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	b2 07       	cpc	r27, r18
    44da:	a1 f4       	brne	.+40     	; 0x4504 <Update_State+0x132>
	{
		LCD_voidGoto(ROW,COL);
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	60 e0       	ldi	r22, 0x00	; 0
    44e0:	0e 94 b2 21 	call	0x4364	; 0x4364 <LCD_voidGoto>
		LCD_voidCLRDisplay();
    44e4:	0e 94 df 21 	call	0x43be	; 0x43be <LCD_voidCLRDisplay>
		LCD_voidPrintUnsignedInteger(Dis);
    44e8:	80 91 9c 01 	lds	r24, 0x019C
    44ec:	90 91 9d 01 	lds	r25, 0x019D
    44f0:	0e 94 5f 20 	call	0x40be	; 0x40be <LCD_voidPrintUnsignedInteger>
		count_lcd = 0;
    44f4:	10 92 82 01 	sts	0x0182, r1
    44f8:	10 92 83 01 	sts	0x0183, r1
    44fc:	10 92 84 01 	sts	0x0184, r1
    4500:	10 92 85 01 	sts	0x0185, r1
//
//		}
//
//
//	}
}
    4504:	cf 91       	pop	r28
    4506:	df 91       	pop	r29
    4508:	08 95       	ret

0000450a <APP_Init>:

void APP_Init(void){
    450a:	df 93       	push	r29
    450c:	cf 93       	push	r28
    450e:	cd b7       	in	r28, 0x3d	; 61
    4510:	de b7       	in	r29, 0x3e	; 62

	/* Initialization of LCD */
	LCD_voidInit();
    4512:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_voidInit>

	/* Set Pin 2 of Port A OUTPUT */
	DIO_voidSetPinDirection(PORT_A, PIN2, OUTPUT);
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	62 e0       	ldi	r22, 0x02	; 2
    451a:	41 e0       	ldi	r20, 0x01	; 1
    451c:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>

	/* Set Pin 2 of Port A LOW */
	DIO_voidSetPinValue(PORT_A, PIN2, LOW);
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	62 e0       	ldi	r22, 0x02	; 2
    4524:	40 e0       	ldi	r20, 0x00	; 0
    4526:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>

	/* Set Pin 6 of port D INPUT */
	DIO_voidSetPinDirection(PORT_D, PIN6, INPUT);
    452a:	83 e0       	ldi	r24, 0x03	; 3
    452c:	66 e0       	ldi	r22, 0x06	; 6
    452e:	40 e0       	ldi	r20, 0x00	; 0
    4530:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>

	/* Initialization of UltraSonic Sensor */
	Ultrasonic_init();
    4534:	0e 94 e5 15 	call	0x2bca	; 0x2bca <Ultrasonic_init>

	/* Initialization of TIMER0 in Normal Mode With perscaler 8 */
	Timer0_Init(TIMER0_NORMAL_MODE,TIMER0_SCALER_8,OCO_DISCONNECTED);
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	62 e0       	ldi	r22, 0x02	; 2
    453c:	40 e0       	ldi	r20, 0x00	; 0
    453e:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer0_Init>

	/* Enable Interrupt OverFlow for TIMER0 */
	Timer0_OV_InterruptEnable();
    4542:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <Timer0_OV_InterruptEnable>

	/* SetCallBack function for TIMER0 */
	Timer0_SetCallBack(Update_State);
    4546:	89 ee       	ldi	r24, 0xE9	; 233
    4548:	91 e2       	ldi	r25, 0x21	; 33
    454a:	0e 94 b3 08 	call	0x1166	; 0x1166 <Timer0_SetCallBack>

	/* Initialization of PHASE CORRECT */
	PWM_ENInitPhaseCorrect();
    454e:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <PWM_ENInitPhaseCorrect>

	/* Initialization of MOTOR */
	MOTOR_voidInit();
    4552:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <MOTOR_voidInit>

	DIO_voidSetPinDirection(PORT_C,PIN5,INPUT);
    4556:	82 e0       	ldi	r24, 0x02	; 2
    4558:	65 e0       	ldi	r22, 0x05	; 5
    455a:	40 e0       	ldi	r20, 0x00	; 0
    455c:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORT_C,PIN5,HIGH);
    4560:	82 e0       	ldi	r24, 0x02	; 2
    4562:	65 e0       	ldi	r22, 0x05	; 5
    4564:	41 e0       	ldi	r20, 0x01	; 1
    4566:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORT_C,PIN2,OUTPUT);
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	62 e0       	ldi	r22, 0x02	; 2
    456e:	41 e0       	ldi	r20, 0x01	; 1
    4570:	0e 94 14 12 	call	0x2428	; 0x2428 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORT_C,PIN2,LOW);
    4574:	82 e0       	ldi	r24, 0x02	; 2
    4576:	62 e0       	ldi	r22, 0x02	; 2
    4578:	40 e0       	ldi	r20, 0x00	; 0
    457a:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_voidSetPinValue>


}
    457e:	cf 91       	pop	r28
    4580:	df 91       	pop	r29
    4582:	08 95       	ret

00004584 <APP_Start>:

void APP_Start(void)
{
    4584:	df 93       	push	r29
    4586:	cf 93       	push	r28
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
	LCD_voidInit();
    458c:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_voidInit>
	if (Get_State()==sixth_state_delay_3ms)
    4590:	0e 94 aa 08 	call	0x1154	; 0x1154 <Get_State>
    4594:	86 30       	cpi	r24, 0x06	; 6
    4596:	b9 f5       	brne	.+110    	; 0x4606 <APP_Start+0x82>
	{
		//if(state==state_on){


			Ultrasonic_u16GetDistance(&Dis);
    4598:	8c e9       	ldi	r24, 0x9C	; 156
    459a:	91 e0       	ldi	r25, 0x01	; 1
    459c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <Ultrasonic_u16GetDistance>

			if(Dis<42) {
    45a0:	80 91 9c 01 	lds	r24, 0x019C
    45a4:	90 91 9d 01 	lds	r25, 0x019D
    45a8:	8a 32       	cpi	r24, 0x2A	; 42
    45aa:	91 05       	cpc	r25, r1
    45ac:	40 f4       	brcc	.+16     	; 0x45be <APP_Start+0x3a>

				PWM_ENDutyCycle(20);
    45ae:	84 e1       	ldi	r24, 0x14	; 20
    45b0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <PWM_ENDutyCycle>
				MOTOR_voidRotateAntiClkWise(LEFT_MOTOR_ON,RIGHT_MOTOR_ON);
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	61 e0       	ldi	r22, 0x01	; 1
    45b8:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <MOTOR_voidRotateAntiClkWise>
    45bc:	24 c0       	rjmp	.+72     	; 0x4606 <APP_Start+0x82>

			}
			else if((42<Dis)&&(Dis<=52))
    45be:	80 91 9c 01 	lds	r24, 0x019C
    45c2:	90 91 9d 01 	lds	r25, 0x019D
    45c6:	8b 32       	cpi	r24, 0x2B	; 43
    45c8:	91 05       	cpc	r25, r1
    45ca:	78 f0       	brcs	.+30     	; 0x45ea <APP_Start+0x66>
    45cc:	80 91 9c 01 	lds	r24, 0x019C
    45d0:	90 91 9d 01 	lds	r25, 0x019D
    45d4:	85 33       	cpi	r24, 0x35	; 53
    45d6:	91 05       	cpc	r25, r1
    45d8:	40 f4       	brcc	.+16     	; 0x45ea <APP_Start+0x66>
			{
				PWM_ENDutyCycle(40);
    45da:	88 e2       	ldi	r24, 0x28	; 40
    45dc:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <PWM_ENDutyCycle>

				MOTOR_voidRotateClkWise(LEFT_MOTOR_ON,RIGHT_MOTOR_OFF);
    45e0:	81 e0       	ldi	r24, 0x01	; 1
    45e2:	60 e0       	ldi	r22, 0x00	; 0
    45e4:	0e 94 0f 18 	call	0x301e	; 0x301e <MOTOR_voidRotateClkWise>
    45e8:	0e c0       	rjmp	.+28     	; 0x4606 <APP_Start+0x82>
			}
			else if(Dis>52)
    45ea:	80 91 9c 01 	lds	r24, 0x019C
    45ee:	90 91 9d 01 	lds	r25, 0x019D
    45f2:	85 33       	cpi	r24, 0x35	; 53
    45f4:	91 05       	cpc	r25, r1
    45f6:	38 f0       	brcs	.+14     	; 0x4606 <APP_Start+0x82>
			{
				PWM_ENDutyCycle(20);
    45f8:	84 e1       	ldi	r24, 0x14	; 20
    45fa:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <PWM_ENDutyCycle>
				MOTOR_voidRotateClkWise(LEFT_MOTOR_ON,RIGHT_MOTOR_ON);
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	61 e0       	ldi	r22, 0x01	; 1
    4602:	0e 94 0f 18 	call	0x301e	; 0x301e <MOTOR_voidRotateClkWise>
//
//			//Timer0_OV_InterruptEnable();
//
//		}
	}
}
    4606:	cf 91       	pop	r28
    4608:	df 91       	pop	r29
    460a:	08 95       	ret

0000460c <main>:

#include "APP.h"


int main()
{
    460c:	df 93       	push	r29
    460e:	cf 93       	push	r28
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62

	APP_Init();
    4614:	0e 94 85 22 	call	0x450a	; 0x450a <APP_Init>

	while(1)
	{
		APP_Start();
    4618:	0e 94 c2 22 	call	0x4584	; 0x4584 <APP_Start>
    461c:	fd cf       	rjmp	.-6      	; 0x4618 <main+0xc>

0000461e <__mulsi3>:
    461e:	62 9f       	mul	r22, r18
    4620:	d0 01       	movw	r26, r0
    4622:	73 9f       	mul	r23, r19
    4624:	f0 01       	movw	r30, r0
    4626:	82 9f       	mul	r24, r18
    4628:	e0 0d       	add	r30, r0
    462a:	f1 1d       	adc	r31, r1
    462c:	64 9f       	mul	r22, r20
    462e:	e0 0d       	add	r30, r0
    4630:	f1 1d       	adc	r31, r1
    4632:	92 9f       	mul	r25, r18
    4634:	f0 0d       	add	r31, r0
    4636:	83 9f       	mul	r24, r19
    4638:	f0 0d       	add	r31, r0
    463a:	74 9f       	mul	r23, r20
    463c:	f0 0d       	add	r31, r0
    463e:	65 9f       	mul	r22, r21
    4640:	f0 0d       	add	r31, r0
    4642:	99 27       	eor	r25, r25
    4644:	72 9f       	mul	r23, r18
    4646:	b0 0d       	add	r27, r0
    4648:	e1 1d       	adc	r30, r1
    464a:	f9 1f       	adc	r31, r25
    464c:	63 9f       	mul	r22, r19
    464e:	b0 0d       	add	r27, r0
    4650:	e1 1d       	adc	r30, r1
    4652:	f9 1f       	adc	r31, r25
    4654:	bd 01       	movw	r22, r26
    4656:	cf 01       	movw	r24, r30
    4658:	11 24       	eor	r1, r1
    465a:	08 95       	ret

0000465c <__udivmodhi4>:
    465c:	aa 1b       	sub	r26, r26
    465e:	bb 1b       	sub	r27, r27
    4660:	51 e1       	ldi	r21, 0x11	; 17
    4662:	07 c0       	rjmp	.+14     	; 0x4672 <__udivmodhi4_ep>

00004664 <__udivmodhi4_loop>:
    4664:	aa 1f       	adc	r26, r26
    4666:	bb 1f       	adc	r27, r27
    4668:	a6 17       	cp	r26, r22
    466a:	b7 07       	cpc	r27, r23
    466c:	10 f0       	brcs	.+4      	; 0x4672 <__udivmodhi4_ep>
    466e:	a6 1b       	sub	r26, r22
    4670:	b7 0b       	sbc	r27, r23

00004672 <__udivmodhi4_ep>:
    4672:	88 1f       	adc	r24, r24
    4674:	99 1f       	adc	r25, r25
    4676:	5a 95       	dec	r21
    4678:	a9 f7       	brne	.-22     	; 0x4664 <__udivmodhi4_loop>
    467a:	80 95       	com	r24
    467c:	90 95       	com	r25
    467e:	bc 01       	movw	r22, r24
    4680:	cd 01       	movw	r24, r26
    4682:	08 95       	ret

00004684 <__divmodhi4>:
    4684:	97 fb       	bst	r25, 7
    4686:	09 2e       	mov	r0, r25
    4688:	07 26       	eor	r0, r23
    468a:	0a d0       	rcall	.+20     	; 0x46a0 <__divmodhi4_neg1>
    468c:	77 fd       	sbrc	r23, 7
    468e:	04 d0       	rcall	.+8      	; 0x4698 <__divmodhi4_neg2>
    4690:	e5 df       	rcall	.-54     	; 0x465c <__udivmodhi4>
    4692:	06 d0       	rcall	.+12     	; 0x46a0 <__divmodhi4_neg1>
    4694:	00 20       	and	r0, r0
    4696:	1a f4       	brpl	.+6      	; 0x469e <__divmodhi4_exit>

00004698 <__divmodhi4_neg2>:
    4698:	70 95       	com	r23
    469a:	61 95       	neg	r22
    469c:	7f 4f       	sbci	r23, 0xFF	; 255

0000469e <__divmodhi4_exit>:
    469e:	08 95       	ret

000046a0 <__divmodhi4_neg1>:
    46a0:	f6 f7       	brtc	.-4      	; 0x469e <__divmodhi4_exit>
    46a2:	90 95       	com	r25
    46a4:	81 95       	neg	r24
    46a6:	9f 4f       	sbci	r25, 0xFF	; 255
    46a8:	08 95       	ret

000046aa <__udivmodsi4>:
    46aa:	a1 e2       	ldi	r26, 0x21	; 33
    46ac:	1a 2e       	mov	r1, r26
    46ae:	aa 1b       	sub	r26, r26
    46b0:	bb 1b       	sub	r27, r27
    46b2:	fd 01       	movw	r30, r26
    46b4:	0d c0       	rjmp	.+26     	; 0x46d0 <__udivmodsi4_ep>

000046b6 <__udivmodsi4_loop>:
    46b6:	aa 1f       	adc	r26, r26
    46b8:	bb 1f       	adc	r27, r27
    46ba:	ee 1f       	adc	r30, r30
    46bc:	ff 1f       	adc	r31, r31
    46be:	a2 17       	cp	r26, r18
    46c0:	b3 07       	cpc	r27, r19
    46c2:	e4 07       	cpc	r30, r20
    46c4:	f5 07       	cpc	r31, r21
    46c6:	20 f0       	brcs	.+8      	; 0x46d0 <__udivmodsi4_ep>
    46c8:	a2 1b       	sub	r26, r18
    46ca:	b3 0b       	sbc	r27, r19
    46cc:	e4 0b       	sbc	r30, r20
    46ce:	f5 0b       	sbc	r31, r21

000046d0 <__udivmodsi4_ep>:
    46d0:	66 1f       	adc	r22, r22
    46d2:	77 1f       	adc	r23, r23
    46d4:	88 1f       	adc	r24, r24
    46d6:	99 1f       	adc	r25, r25
    46d8:	1a 94       	dec	r1
    46da:	69 f7       	brne	.-38     	; 0x46b6 <__udivmodsi4_loop>
    46dc:	60 95       	com	r22
    46de:	70 95       	com	r23
    46e0:	80 95       	com	r24
    46e2:	90 95       	com	r25
    46e4:	9b 01       	movw	r18, r22
    46e6:	ac 01       	movw	r20, r24
    46e8:	bd 01       	movw	r22, r26
    46ea:	cf 01       	movw	r24, r30
    46ec:	08 95       	ret

000046ee <__divmodsi4>:
    46ee:	97 fb       	bst	r25, 7
    46f0:	09 2e       	mov	r0, r25
    46f2:	05 26       	eor	r0, r21
    46f4:	0e d0       	rcall	.+28     	; 0x4712 <__divmodsi4_neg1>
    46f6:	57 fd       	sbrc	r21, 7
    46f8:	04 d0       	rcall	.+8      	; 0x4702 <__divmodsi4_neg2>
    46fa:	d7 df       	rcall	.-82     	; 0x46aa <__udivmodsi4>
    46fc:	0a d0       	rcall	.+20     	; 0x4712 <__divmodsi4_neg1>
    46fe:	00 1c       	adc	r0, r0
    4700:	38 f4       	brcc	.+14     	; 0x4710 <__divmodsi4_exit>

00004702 <__divmodsi4_neg2>:
    4702:	50 95       	com	r21
    4704:	40 95       	com	r20
    4706:	30 95       	com	r19
    4708:	21 95       	neg	r18
    470a:	3f 4f       	sbci	r19, 0xFF	; 255
    470c:	4f 4f       	sbci	r20, 0xFF	; 255
    470e:	5f 4f       	sbci	r21, 0xFF	; 255

00004710 <__divmodsi4_exit>:
    4710:	08 95       	ret

00004712 <__divmodsi4_neg1>:
    4712:	f6 f7       	brtc	.-4      	; 0x4710 <__divmodsi4_exit>
    4714:	90 95       	com	r25
    4716:	80 95       	com	r24
    4718:	70 95       	com	r23
    471a:	61 95       	neg	r22
    471c:	7f 4f       	sbci	r23, 0xFF	; 255
    471e:	8f 4f       	sbci	r24, 0xFF	; 255
    4720:	9f 4f       	sbci	r25, 0xFF	; 255
    4722:	08 95       	ret

00004724 <__prologue_saves__>:
    4724:	2f 92       	push	r2
    4726:	3f 92       	push	r3
    4728:	4f 92       	push	r4
    472a:	5f 92       	push	r5
    472c:	6f 92       	push	r6
    472e:	7f 92       	push	r7
    4730:	8f 92       	push	r8
    4732:	9f 92       	push	r9
    4734:	af 92       	push	r10
    4736:	bf 92       	push	r11
    4738:	cf 92       	push	r12
    473a:	df 92       	push	r13
    473c:	ef 92       	push	r14
    473e:	ff 92       	push	r15
    4740:	0f 93       	push	r16
    4742:	1f 93       	push	r17
    4744:	cf 93       	push	r28
    4746:	df 93       	push	r29
    4748:	cd b7       	in	r28, 0x3d	; 61
    474a:	de b7       	in	r29, 0x3e	; 62
    474c:	ca 1b       	sub	r28, r26
    474e:	db 0b       	sbc	r29, r27
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	f8 94       	cli
    4754:	de bf       	out	0x3e, r29	; 62
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	cd bf       	out	0x3d, r28	; 61
    475a:	09 94       	ijmp

0000475c <__epilogue_restores__>:
    475c:	2a 88       	ldd	r2, Y+18	; 0x12
    475e:	39 88       	ldd	r3, Y+17	; 0x11
    4760:	48 88       	ldd	r4, Y+16	; 0x10
    4762:	5f 84       	ldd	r5, Y+15	; 0x0f
    4764:	6e 84       	ldd	r6, Y+14	; 0x0e
    4766:	7d 84       	ldd	r7, Y+13	; 0x0d
    4768:	8c 84       	ldd	r8, Y+12	; 0x0c
    476a:	9b 84       	ldd	r9, Y+11	; 0x0b
    476c:	aa 84       	ldd	r10, Y+10	; 0x0a
    476e:	b9 84       	ldd	r11, Y+9	; 0x09
    4770:	c8 84       	ldd	r12, Y+8	; 0x08
    4772:	df 80       	ldd	r13, Y+7	; 0x07
    4774:	ee 80       	ldd	r14, Y+6	; 0x06
    4776:	fd 80       	ldd	r15, Y+5	; 0x05
    4778:	0c 81       	ldd	r16, Y+4	; 0x04
    477a:	1b 81       	ldd	r17, Y+3	; 0x03
    477c:	aa 81       	ldd	r26, Y+2	; 0x02
    477e:	b9 81       	ldd	r27, Y+1	; 0x01
    4780:	ce 0f       	add	r28, r30
    4782:	d1 1d       	adc	r29, r1
    4784:	0f b6       	in	r0, 0x3f	; 63
    4786:	f8 94       	cli
    4788:	de bf       	out	0x3e, r29	; 62
    478a:	0f be       	out	0x3f, r0	; 63
    478c:	cd bf       	out	0x3d, r28	; 61
    478e:	ed 01       	movw	r28, r26
    4790:	08 95       	ret

00004792 <_exit>:
    4792:	f8 94       	cli

00004794 <__stop_program>:
    4794:	ff cf       	rjmp	.-2      	; 0x4794 <__stop_program>
